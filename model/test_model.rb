# coding: utf-8
# Test for model
require 'minitest/autorun'
require_relative 'model'

class TestModel < Minitest::Unit::TestCase
  def self.runnable_methods
    puts 'Overriding minitest to run tests in a defined order'
    methods = methods_matching(/^test_/)
  end
  def worksheet; @worksheet ||= init_spreadsheet; end
  def init_spreadsheet; Model.new end
  def test_control_d17; assert_in_epsilon(3.0, worksheet.control_d17, 0.002); end
  def test_control_d18; assert_in_epsilon(1.5, worksheet.control_d18, 0.002); end
  def test_control_d19; assert_in_epsilon(1.5, worksheet.control_d19, 0.002); end
  def test_control_d20; assert_in_epsilon(2.0, worksheet.control_d20, 0.002); end
  def test_control_d21; assert_in_epsilon(2.0, worksheet.control_d21, 0.002); end
  def test_control_d22; assert_in_epsilon(1.5, worksheet.control_d22, 0.002); end
  def test_control_d23; assert_in_epsilon(2.0, worksheet.control_d23, 0.002); end
  def test_control_d24; assert_in_epsilon(3.0, worksheet.control_d24, 0.002); end
  def test_control_d25; assert_in_epsilon(2.0, worksheet.control_d25, 0.002); end
  def test_control_d26; assert_in_epsilon(2.0, worksheet.control_d26, 0.002); end
  def test_control_d27; assert_in_epsilon(2.0, worksheet.control_d27, 0.002); end
  def test_control_d28; assert_in_epsilon(3.0, worksheet.control_d28, 0.002); end
  def test_control_d29; assert_in_epsilon(2.0, worksheet.control_d29, 0.002); end
  def test_control_d30; assert_in_epsilon(2.0, worksheet.control_d30, 0.002); end
  def test_control_d31; assert_in_epsilon(2.0, worksheet.control_d31, 0.002); end
  def test_control_d32; assert_in_epsilon(3.0, worksheet.control_d32, 0.002); end
  def test_control_d33; assert_in_epsilon(2.0, worksheet.control_d33, 0.002); end
  def test_control_d34; assert_in_epsilon(2.0, worksheet.control_d34, 0.002); end
  def test_control_d35; assert_in_epsilon(2.0, worksheet.control_d35, 0.002); end
  def test_control_d36; assert_in_epsilon(2.0, worksheet.control_d36, 0.002); end
  def test_control_d37; assert_in_epsilon(2.0, worksheet.control_d37, 0.002); end
  def test_control_d38; assert_in_delta(1.0, worksheet.control_d38, 0.002); end
  def test_control_d39; assert_in_delta(1.0, worksheet.control_d39, 0.002); end
  def test_control_d40; assert_in_delta(1.0, worksheet.control_d40, 0.002); end
  def test_control_d41; assert_in_epsilon(2.0, worksheet.control_d41, 0.002); end
  def test_control_d42; assert_in_epsilon(2.0, worksheet.control_d42, 0.002); end
  def test_control_d43; assert_in_epsilon(2.0, worksheet.control_d43, 0.002); end
  def test_control_d44; assert_in_epsilon(3.0, worksheet.control_d44, 0.002); end
  def test_control_d45; assert_in_epsilon(2.0, worksheet.control_d45, 0.002); end
  def test_control_d46; assert_in_epsilon(2.0, worksheet.control_d46, 0.002); end
  def test_control_d47; assert_in_epsilon(2.0, worksheet.control_d47, 0.002); end
  def test_control_d48; assert_in_epsilon(2.0, worksheet.control_d48, 0.002); end
  def test_control_d49; assert_in_epsilon(2.0, worksheet.control_d49, 0.002); end
  def test_control_d50; assert_in_epsilon(2.0, worksheet.control_d50, 0.002); end
  def test_control_d51; assert_in_epsilon(3.0, worksheet.control_d51, 0.002); end
  def test_control_d52; assert_in_epsilon(2.0, worksheet.control_d52, 0.002); end
  def test_control_d53; assert_in_epsilon(2.0, worksheet.control_d53, 0.002); end
  def test_control_d54; assert_in_epsilon(2.0, worksheet.control_d54, 0.002); end
  def test_control_d55; assert_in_epsilon(2.0, worksheet.control_d55, 0.002); end
  def test_control_d56; assert_in_epsilon(2.0, worksheet.control_d56, 0.002); end
  def test_control_d57; assert_in_epsilon(2.0, worksheet.control_d57, 0.002); end
  def test_control_d58; assert_in_epsilon(2.0, worksheet.control_d58, 0.002); end
  def test_control_d59; assert_in_epsilon(2.0, worksheet.control_d59, 0.002); end
  def test_control_d60; assert_in_delta(1.0, worksheet.control_d60, 0.002); end
  def test_control_d61; assert_in_epsilon(2.0, worksheet.control_d61, 0.002); end
  def test_control_g17; assert_in_epsilon(2050.0, worksheet.control_g17, 0.002); end
  def test_control_g18; assert_in_epsilon(2050.0, worksheet.control_g18, 0.002); end
  def test_control_g19; assert_in_epsilon(2050.0, worksheet.control_g19, 0.002); end
  def test_control_g20; assert_in_epsilon(2050.0, worksheet.control_g20, 0.002); end
  def test_control_g21; assert_in_epsilon(2050.0, worksheet.control_g21, 0.002); end
  def test_control_g22; assert_in_epsilon(2050.0, worksheet.control_g22, 0.002); end
  def test_control_g23; assert_in_epsilon(2050.0, worksheet.control_g23, 0.002); end
  def test_control_g24; assert_in_epsilon(2050.0, worksheet.control_g24, 0.002); end
  def test_control_g25; assert_in_epsilon(2050.0, worksheet.control_g25, 0.002); end
  def test_control_g26; assert_in_epsilon(2050.0, worksheet.control_g26, 0.002); end
  def test_control_g27; assert_in_epsilon(2040.0, worksheet.control_g27, 0.002); end
  def test_control_g28; assert_in_epsilon(2050.0, worksheet.control_g28, 0.002); end
  def test_control_g29; assert_in_epsilon(2050.0, worksheet.control_g29, 0.002); end
  def test_control_g30; assert_in_epsilon(2050.0, worksheet.control_g30, 0.002); end
  def test_control_g31; assert_in_epsilon(2050.0, worksheet.control_g31, 0.002); end
  def test_control_g32; assert_in_epsilon(2050.0, worksheet.control_g32, 0.002); end
  def test_control_g33; assert_in_epsilon(2050.0, worksheet.control_g33, 0.002); end
  def test_control_g34; assert_in_epsilon(2050.0, worksheet.control_g34, 0.002); end
  def test_control_g35; assert_in_epsilon(2050.0, worksheet.control_g35, 0.002); end
  def test_control_g36; assert_in_epsilon(2050.0, worksheet.control_g36, 0.002); end
  def test_control_g37; assert_in_epsilon(2050.0, worksheet.control_g37, 0.002); end
  def test_control_g38; assert_in_epsilon(2050.0, worksheet.control_g38, 0.002); end
  def test_control_g39; assert_in_epsilon(2050.0, worksheet.control_g39, 0.002); end
  def test_control_g40; assert_in_epsilon(2050.0, worksheet.control_g40, 0.002); end
  def test_control_g41; assert_in_epsilon(2050.0, worksheet.control_g41, 0.002); end
  def test_control_g42; assert_in_epsilon(2060.0, worksheet.control_g42, 0.002); end
  def test_control_g43; assert_in_epsilon(2050.0, worksheet.control_g43, 0.002); end
  def test_control_g44; assert_in_epsilon(2050.0, worksheet.control_g44, 0.002); end
  def test_control_g45; assert_in_epsilon(2050.0, worksheet.control_g45, 0.002); end
  def test_control_g46; assert_in_epsilon(2050.0, worksheet.control_g46, 0.002); end
  def test_control_g47; assert_in_epsilon(2070.0, worksheet.control_g47, 0.002); end
  def test_control_g48; assert_in_epsilon(2060.0, worksheet.control_g48, 0.002); end
  def test_control_g49; assert_in_epsilon(2065.0, worksheet.control_g49, 0.002); end
  def test_control_g50; assert_in_epsilon(2050.0, worksheet.control_g50, 0.002); end
  def test_control_g51; assert_in_epsilon(2050.0, worksheet.control_g51, 0.002); end
  def test_control_g52; assert_in_epsilon(2050.0, worksheet.control_g52, 0.002); end
  def test_control_g53; assert_in_epsilon(2050.0, worksheet.control_g53, 0.002); end
  def test_control_g54; assert_in_epsilon(2050.0, worksheet.control_g54, 0.002); end
  def test_control_g55; assert_in_epsilon(2050.0, worksheet.control_g55, 0.002); end
  def test_control_g56; assert_in_epsilon(2050.0, worksheet.control_g56, 0.002); end
  def test_control_g57; assert_in_epsilon(2050.0, worksheet.control_g57, 0.002); end
  def test_control_g58; assert_in_epsilon(2050.0, worksheet.control_g58, 0.002); end
  def test_control_g59; assert_in_epsilon(2070.0, worksheet.control_g59, 0.002); end
  def test_control_g60; assert_in_epsilon(2050.0, worksheet.control_g60, 0.002); end
  def test_control_g61; assert_in_epsilon(2050.0, worksheet.control_g61, 0.002); end
  def test_control_e17; assert_in_epsilon(2020.0, worksheet.control_e17, 0.002); end
  def test_control_e18; assert_in_epsilon(2020.0, worksheet.control_e18, 0.002); end
  def test_control_e19; assert_in_epsilon(2020.0, worksheet.control_e19, 0.002); end
  def test_control_e20; assert_in_epsilon(2020.0, worksheet.control_e20, 0.002); end
  def test_control_e21; assert_in_epsilon(2020.0, worksheet.control_e21, 0.002); end
  def test_control_e22; assert_in_epsilon(2020.0, worksheet.control_e22, 0.002); end
  def test_control_e23; assert_in_epsilon(2020.0, worksheet.control_e23, 0.002); end
  def test_control_e24; assert_in_epsilon(2020.0, worksheet.control_e24, 0.002); end
  def test_control_e25; assert_in_epsilon(2020.0, worksheet.control_e25, 0.002); end
  def test_control_e26; assert_in_epsilon(2020.0, worksheet.control_e26, 0.002); end
  def test_control_e27; assert_in_epsilon(2020.0, worksheet.control_e27, 0.002); end
  def test_control_e28; assert_in_epsilon(2020.0, worksheet.control_e28, 0.002); end
  def test_control_e29; assert_in_epsilon(2020.0, worksheet.control_e29, 0.002); end
  def test_control_e30; assert_in_epsilon(2020.0, worksheet.control_e30, 0.002); end
  def test_control_e31; assert_in_epsilon(2020.0, worksheet.control_e31, 0.002); end
  def test_control_e32; assert_in_epsilon(2020.0, worksheet.control_e32, 0.002); end
  def test_control_e33; assert_in_epsilon(2020.0, worksheet.control_e33, 0.002); end
  def test_control_e34; assert_in_epsilon(2020.0, worksheet.control_e34, 0.002); end
  def test_control_e35; assert_in_epsilon(2020.0, worksheet.control_e35, 0.002); end
  def test_control_e36; assert_in_epsilon(2020.0, worksheet.control_e36, 0.002); end
  def test_control_e37; assert_in_epsilon(2020.0, worksheet.control_e37, 0.002); end
  def test_control_e38; assert_in_epsilon(2020.0, worksheet.control_e38, 0.002); end
  def test_control_e39; assert_in_epsilon(2020.0, worksheet.control_e39, 0.002); end
  def test_control_e40; assert_in_epsilon(2020.0, worksheet.control_e40, 0.002); end
  def test_control_e41; assert_in_epsilon(2020.0, worksheet.control_e41, 0.002); end
  def test_control_e42; assert_in_epsilon(2030.0, worksheet.control_e42, 0.002); end
  def test_control_e43; assert_in_epsilon(2020.0, worksheet.control_e43, 0.002); end
  def test_control_e44; assert_in_epsilon(2020.0, worksheet.control_e44, 0.002); end
  def test_control_e45; assert_in_epsilon(2020.0, worksheet.control_e45, 0.002); end
  def test_control_e46; assert_in_epsilon(2020.0, worksheet.control_e46, 0.002); end
  def test_control_e47; assert_in_epsilon(2040.0, worksheet.control_e47, 0.002); end
  def test_control_e48; assert_in_epsilon(2030.0, worksheet.control_e48, 0.002); end
  def test_control_e49; assert_in_epsilon(2035.0, worksheet.control_e49, 0.002); end
  def test_control_e50; assert_in_epsilon(2020.0, worksheet.control_e50, 0.002); end
  def test_control_e51; assert_in_epsilon(2020.0, worksheet.control_e51, 0.002); end
  def test_control_e52; assert_in_epsilon(2020.0, worksheet.control_e52, 0.002); end
  def test_control_e53; assert_in_epsilon(2020.0, worksheet.control_e53, 0.002); end
  def test_control_e54; assert_in_epsilon(2020.0, worksheet.control_e54, 0.002); end
  def test_control_e55; assert_in_epsilon(2020.0, worksheet.control_e55, 0.002); end
  def test_control_e56; assert_in_epsilon(2020.0, worksheet.control_e56, 0.002); end
  def test_control_e57; assert_in_epsilon(2020.0, worksheet.control_e57, 0.002); end
  def test_control_e58; assert_in_epsilon(2020.0, worksheet.control_e58, 0.002); end
  def test_control_e59; assert_in_epsilon(2020.0, worksheet.control_e59, 0.002); end
  def test_control_e60; assert_in_epsilon(2020.0, worksheet.control_e60, 0.002); end
  def test_control_e61; assert_in_epsilon(2020.0, worksheet.control_e61, 0.002); end
  def test_control_i16; assert_equal("bau", worksheet.control_i16.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_i17; assert_in_delta(1.0, worksheet.control_i17, 0.002); end
  def test_control_i18; assert_in_delta(1.0, worksheet.control_i18, 0.002); end
  def test_control_i19; assert_in_delta(1.0, worksheet.control_i19, 0.002); end
  def test_control_i20; assert_in_delta(1.0, worksheet.control_i20, 0.002); end
  def test_control_i21; assert_in_delta(1.0, worksheet.control_i21, 0.002); end
  def test_control_i22; assert_in_delta(1.0, worksheet.control_i22, 0.002); end
  def test_control_i23; assert_in_delta(1.0, worksheet.control_i23, 0.002); end
  def test_control_i24; assert_in_delta(1.0, worksheet.control_i24, 0.002); end
  def test_control_i25; assert_in_delta(1.0, worksheet.control_i25, 0.002); end
  def test_control_i26; assert_in_delta(1.0, worksheet.control_i26, 0.002); end
  def test_control_i27; assert_in_delta(1.0, worksheet.control_i27, 0.002); end
  def test_control_i28; assert_in_delta(1.0, worksheet.control_i28, 0.002); end
  def test_control_i29; assert_in_delta(1.0, worksheet.control_i29, 0.002); end
  def test_control_i30; assert_in_delta(1.0, worksheet.control_i30, 0.002); end
  def test_control_i31; assert_in_delta(1.0, worksheet.control_i31, 0.002); end
  def test_control_i32; assert_in_delta(1.0, worksheet.control_i32, 0.002); end
  def test_control_i33; assert_in_delta(1.0, worksheet.control_i33, 0.002); end
  def test_control_i34; assert_in_delta(1.0, worksheet.control_i34, 0.002); end
  def test_control_i35; assert_in_delta(1.0, worksheet.control_i35, 0.002); end
  def test_control_i36; assert_in_delta(1.0, worksheet.control_i36, 0.002); end
  def test_control_i37; assert_in_delta(1.0, worksheet.control_i37, 0.002); end
  def test_control_i38; assert_in_delta(1.0, worksheet.control_i38, 0.002); end
  def test_control_i39; assert_in_delta(1.0, worksheet.control_i39, 0.002); end
  def test_control_i40; assert_in_delta(1.0, worksheet.control_i40, 0.002); end
  def test_control_i41; assert_in_delta(1.0, worksheet.control_i41, 0.002); end
  def test_control_i42; assert_in_delta(1.0, worksheet.control_i42, 0.002); end
  def test_control_i43; assert_in_delta(1.0, worksheet.control_i43, 0.002); end
  def test_control_i44; assert_in_delta(1.0, worksheet.control_i44, 0.002); end
  def test_control_i45; assert_in_delta(1.0, worksheet.control_i45, 0.002); end
  def test_control_i46; assert_in_delta(1.0, worksheet.control_i46, 0.002); end
  def test_control_i47; assert_in_delta(1.0, worksheet.control_i47, 0.002); end
  def test_control_i48; assert_in_delta(1.0, worksheet.control_i48, 0.002); end
  def test_control_i49; assert_in_delta(1.0, worksheet.control_i49, 0.002); end
  def test_control_i50; assert_in_delta(1.0, worksheet.control_i50, 0.002); end
  def test_control_i51; assert_in_delta(1.0, worksheet.control_i51, 0.002); end
  def test_control_i52; assert_in_delta(1.0, worksheet.control_i52, 0.002); end
  def test_control_i53; assert_in_delta(1.0, worksheet.control_i53, 0.002); end
  def test_control_i54; assert_in_delta(1.0, worksheet.control_i54, 0.002); end
  def test_control_i55; assert_in_delta(1.0, worksheet.control_i55, 0.002); end
  def test_control_i56; assert_in_delta(1.0, worksheet.control_i56, 0.002); end
  def test_control_i57; assert_in_delta(1.0, worksheet.control_i57, 0.002); end
  def test_control_i58; assert_in_delta(1.0, worksheet.control_i58, 0.002); end
  def test_control_i59; assert_in_delta(1.0, worksheet.control_i59, 0.002); end
  def test_control_i60; assert_in_delta(1.0, worksheet.control_i60, 0.002); end
  def test_control_i61; assert_in_delta(1.0, worksheet.control_i61, 0.002); end
  def test_control_i62; assert_equal("jean-claude junker", worksheet.control_i62.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_i63; assert_in_epsilon(66.0, worksheet.control_i63, 0.002); end
  def test_control_i64; assert_in_epsilon(12.0, worksheet.control_i64, 0.002); end
  def test_control_ef17; assert_in_delta(1.0, worksheet.control_ef17, 0.002); end
  def test_control_eg17; assert_in_epsilon(2.0, worksheet.control_eg17, 0.002); end
  def test_control_eh17; assert_in_epsilon(3.0, worksheet.control_eh17, 0.002); end
  def test_control_ei17; assert_in_epsilon(4.0, worksheet.control_ei17, 0.002); end
  def test_control_ef18; assert_in_delta(1.0, worksheet.control_ef18, 0.002); end
  def test_control_eg18; assert_in_epsilon(2.0, worksheet.control_eg18, 0.002); end
  def test_control_eh18; assert_in_epsilon(3.0, worksheet.control_eh18, 0.002); end
  def test_control_ei18; assert_in_epsilon(4.0, worksheet.control_ei18, 0.002); end
  def test_control_ef19; assert_in_delta(1.0, worksheet.control_ef19, 0.002); end
  def test_control_eg19; assert_in_epsilon(2.0, worksheet.control_eg19, 0.002); end
  def test_control_eh19; assert_in_epsilon(3.0, worksheet.control_eh19, 0.002); end
  def test_control_ei19; assert_in_epsilon(4.0, worksheet.control_ei19, 0.002); end
  def test_control_ef20; assert_in_delta(1.0, worksheet.control_ef20, 0.002); end
  def test_control_eg20; assert_in_epsilon(2.0, worksheet.control_eg20, 0.002); end
  def test_control_eh20; assert_in_epsilon(3.0, worksheet.control_eh20, 0.002); end
  def test_control_ei20; assert_in_epsilon(4.0, worksheet.control_ei20, 0.002); end
  def test_control_ef21; assert_in_delta(1.0, worksheet.control_ef21, 0.002); end
  def test_control_eg21; assert_in_epsilon(2.0, worksheet.control_eg21, 0.002); end
  def test_control_eh21; assert_in_epsilon(3.0, worksheet.control_eh21, 0.002); end
  def test_control_ei21; assert_in_epsilon(4.0, worksheet.control_ei21, 0.002); end
  def test_control_ef22; assert_in_delta(1.0, worksheet.control_ef22, 0.002); end
  def test_control_eg22; assert_in_epsilon(2.0, worksheet.control_eg22, 0.002); end
  def test_control_eh22; assert_in_epsilon(3.0, worksheet.control_eh22, 0.002); end
  def test_control_ei22; assert_in_epsilon(4.0, worksheet.control_ei22, 0.002); end
  def test_control_ef23; assert_in_delta(1.0, worksheet.control_ef23, 0.002); end
  def test_control_eg23; assert_in_epsilon(2.0, worksheet.control_eg23, 0.002); end
  def test_control_eh23; assert_in_epsilon(3.0, worksheet.control_eh23, 0.002); end
  def test_control_ei23; assert_in_epsilon(4.0, worksheet.control_ei23, 0.002); end
  def test_control_ef24; assert_in_delta(1.0, worksheet.control_ef24, 0.002); end
  def test_control_eg24; assert_in_epsilon(2.0, worksheet.control_eg24, 0.002); end
  def test_control_eh24; assert_in_epsilon(3.0, worksheet.control_eh24, 0.002); end
  def test_control_ei24; assert_in_epsilon(4.0, worksheet.control_ei24, 0.002); end
  def test_control_ef25; assert_in_delta(1.0, worksheet.control_ef25, 0.002); end
  def test_control_eg25; assert_in_epsilon(2.0, worksheet.control_eg25, 0.002); end
  def test_control_eh25; assert_in_epsilon(3.0, worksheet.control_eh25, 0.002); end
  def test_control_ei25; assert_in_epsilon(4.0, worksheet.control_ei25, 0.002); end
  def test_control_ef26; assert_in_delta(1.0, worksheet.control_ef26, 0.002); end
  def test_control_eg26; assert_in_epsilon(2.0, worksheet.control_eg26, 0.002); end
  def test_control_eh26; assert_in_epsilon(3.0, worksheet.control_eh26, 0.002); end
  def test_control_ei26; assert_in_epsilon(4.0, worksheet.control_ei26, 0.002); end
  def test_control_ef27; assert_in_delta(1.0, worksheet.control_ef27, 0.002); end
  def test_control_eg27; assert_in_epsilon(2.0, worksheet.control_eg27, 0.002); end
  def test_control_eh27; assert_in_epsilon(3.0, worksheet.control_eh27, 0.002); end
  def test_control_ei27; assert_in_epsilon(4.0, worksheet.control_ei27, 0.002); end
  def test_control_ef28; assert_in_delta(1.0, worksheet.control_ef28, 0.002); end
  def test_control_eg28; assert_in_epsilon(2.0, worksheet.control_eg28, 0.002); end
  def test_control_eh28; assert_in_epsilon(3.0, worksheet.control_eh28, 0.002); end
  def test_control_ei28; assert_in_epsilon(4.0, worksheet.control_ei28, 0.002); end
  def test_control_ef29; assert_in_delta(1.0, worksheet.control_ef29, 0.002); end
  def test_control_eg29; assert_in_epsilon(2.0, worksheet.control_eg29, 0.002); end
  def test_control_eh29; assert_in_epsilon(3.0, worksheet.control_eh29, 0.002); end
  def test_control_ei29; assert_in_epsilon(4.0, worksheet.control_ei29, 0.002); end
  def test_control_ef30; assert_in_delta(1.0, worksheet.control_ef30, 0.002); end
  def test_control_eg30; assert_in_epsilon(2.0, worksheet.control_eg30, 0.002); end
  def test_control_eh30; assert_in_epsilon(3.0, worksheet.control_eh30, 0.002); end
  def test_control_ei30; assert_in_epsilon(4.0, worksheet.control_ei30, 0.002); end
  def test_control_ef31; assert_in_delta(1.0, worksheet.control_ef31, 0.002); end
  def test_control_eg31; assert_in_epsilon(2.0, worksheet.control_eg31, 0.002); end
  def test_control_eh31; assert_in_epsilon(3.0, worksheet.control_eh31, 0.002); end
  def test_control_ei31; assert_in_epsilon(4.0, worksheet.control_ei31, 0.002); end
  def test_control_ef32; assert_in_delta(1.0, worksheet.control_ef32, 0.002); end
  def test_control_eg32; assert_in_epsilon(2.0, worksheet.control_eg32, 0.002); end
  def test_control_eh32; assert_in_epsilon(3.0, worksheet.control_eh32, 0.002); end
  def test_control_ei32; assert_in_epsilon(4.0, worksheet.control_ei32, 0.002); end
  def test_control_ef33; assert_in_delta(1.0, worksheet.control_ef33, 0.002); end
  def test_control_eg33; assert_in_epsilon(2.0, worksheet.control_eg33, 0.002); end
  def test_control_eh33; assert_in_epsilon(3.0, worksheet.control_eh33, 0.002); end
  def test_control_ei33; assert_in_epsilon(4.0, worksheet.control_ei33, 0.002); end
  def test_control_ef34; assert_in_delta(1.0, worksheet.control_ef34, 0.002); end
  def test_control_eg34; assert_in_epsilon(2.0, worksheet.control_eg34, 0.002); end
  def test_control_eh34; assert_in_epsilon(3.0, worksheet.control_eh34, 0.002); end
  def test_control_ei34; assert_in_epsilon(4.0, worksheet.control_ei34, 0.002); end
  def test_control_ef35; assert_in_delta(1.0, worksheet.control_ef35, 0.002); end
  def test_control_eg35; assert_in_epsilon(2.0, worksheet.control_eg35, 0.002); end
  def test_control_eh35; assert_in_epsilon(3.0, worksheet.control_eh35, 0.002); end
  def test_control_ei35; assert_in_epsilon(4.0, worksheet.control_ei35, 0.002); end
  def test_control_ef36; assert_in_delta(1.0, worksheet.control_ef36, 0.002); end
  def test_control_eg36; assert_in_epsilon(2.0, worksheet.control_eg36, 0.002); end
  def test_control_eh36; assert_in_epsilon(3.0, worksheet.control_eh36, 0.002); end
  def test_control_ei36; assert_in_epsilon(4.0, worksheet.control_ei36, 0.002); end
  def test_control_ef37; assert_in_delta(1.0, worksheet.control_ef37, 0.002); end
  def test_control_eg37; assert_in_epsilon(2.0, worksheet.control_eg37, 0.002); end
  def test_control_eh37; assert_in_epsilon(3.0, worksheet.control_eh37, 0.002); end
  def test_control_ei37; assert_in_epsilon(4.0, worksheet.control_ei37, 0.002); end
  def test_control_ef38; assert_in_delta(1.0, worksheet.control_ef38, 0.002); end
  def test_control_eg38; assert_in_epsilon(2.0, worksheet.control_eg38, 0.002); end
  def test_control_eh38; assert_in_epsilon(3.0, worksheet.control_eh38, 0.002); end
  def test_control_ei38; assert_in_epsilon(4.0, worksheet.control_ei38, 0.002); end
  def test_control_ef39; assert_in_delta(1.0, worksheet.control_ef39, 0.002); end
  def test_control_eg39; assert_in_epsilon(2.0, worksheet.control_eg39, 0.002); end
  def test_control_eh39; assert_in_epsilon(3.0, worksheet.control_eh39, 0.002); end
  def test_control_ei39; assert_in_epsilon(4.0, worksheet.control_ei39, 0.002); end
  def test_control_ef40; assert_in_delta(1.0, worksheet.control_ef40, 0.002); end
  def test_control_eg40; assert_in_epsilon(2.0, worksheet.control_eg40, 0.002); end
  def test_control_eh40; assert_in_epsilon(3.0, worksheet.control_eh40, 0.002); end
  def test_control_ei40; assert_in_epsilon(4.0, worksheet.control_ei40, 0.002); end
  def test_control_ef41; assert_in_delta(1.0, worksheet.control_ef41, 0.002); end
  def test_control_eg41; assert_in_epsilon(2.0, worksheet.control_eg41, 0.002); end
  def test_control_eh41; assert_in_epsilon(3.0, worksheet.control_eh41, 0.002); end
  def test_control_ei41; assert_in_epsilon(4.0, worksheet.control_ei41, 0.002); end
  def test_control_ef42; assert_in_delta(1.0, worksheet.control_ef42, 0.002); end
  def test_control_eg42; assert_in_epsilon(2.0, worksheet.control_eg42, 0.002); end
  def test_control_eh42; assert_in_epsilon(3.0, worksheet.control_eh42, 0.002); end
  def test_control_ei42; assert_in_epsilon(4.0, worksheet.control_ei42, 0.002); end
  def test_control_ef43; assert_in_delta(1.0, worksheet.control_ef43, 0.002); end
  def test_control_eg43; assert_in_epsilon(2.0, worksheet.control_eg43, 0.002); end
  def test_control_eh43; assert_in_epsilon(3.0, worksheet.control_eh43, 0.002); end
  def test_control_ei43; assert_in_epsilon(4.0, worksheet.control_ei43, 0.002); end
  def test_control_ef44; assert_in_delta(1.0, worksheet.control_ef44, 0.002); end
  def test_control_eg44; assert_in_epsilon(2.0, worksheet.control_eg44, 0.002); end
  def test_control_eh44; assert_in_epsilon(3.0, worksheet.control_eh44, 0.002); end
  def test_control_ei44; assert_in_epsilon(4.0, worksheet.control_ei44, 0.002); end
  def test_control_ef45; assert_in_delta(1.0, worksheet.control_ef45, 0.002); end
  def test_control_eg45; assert_in_epsilon(2.0, worksheet.control_eg45, 0.002); end
  def test_control_eh45; assert_in_epsilon(3.0, worksheet.control_eh45, 0.002); end
  def test_control_ei45; assert_in_epsilon(4.0, worksheet.control_ei45, 0.002); end
  def test_control_ef46; assert_in_delta(1.0, worksheet.control_ef46, 0.002); end
  def test_control_eg46; assert_in_epsilon(2.0, worksheet.control_eg46, 0.002); end
  def test_control_eh46; assert_in_epsilon(3.0, worksheet.control_eh46, 0.002); end
  def test_control_ei46; assert_in_epsilon(4.0, worksheet.control_ei46, 0.002); end
  def test_control_ef47; assert_in_delta(1.0, worksheet.control_ef47, 0.002); end
  def test_control_eg47; assert_in_epsilon(2.0, worksheet.control_eg47, 0.002); end
  def test_control_eh47; assert_in_epsilon(3.0, worksheet.control_eh47, 0.002); end
  def test_control_ei47; assert_in_epsilon(4.0, worksheet.control_ei47, 0.002); end
  def test_control_ef48; assert_in_delta(1.0, worksheet.control_ef48, 0.002); end
  def test_control_eg48; assert_in_epsilon(2.0, worksheet.control_eg48, 0.002); end
  def test_control_eh48; assert_in_epsilon(3.0, worksheet.control_eh48, 0.002); end
  def test_control_ei48; assert_in_epsilon(4.0, worksheet.control_ei48, 0.002); end
  def test_control_ef49; assert_in_delta(1.0, worksheet.control_ef49, 0.002); end
  def test_control_eg49; assert_in_epsilon(2.0, worksheet.control_eg49, 0.002); end
  def test_control_eh49; assert_in_epsilon(3.0, worksheet.control_eh49, 0.002); end
  def test_control_ei49; assert_in_epsilon(4.0, worksheet.control_ei49, 0.002); end
  def test_control_ef50; assert_in_delta(1.0, worksheet.control_ef50, 0.002); end
  def test_control_eg50; assert_in_epsilon(2.0, worksheet.control_eg50, 0.002); end
  def test_control_eh50; assert_in_epsilon(3.0, worksheet.control_eh50, 0.002); end
  def test_control_ei50; assert_in_epsilon(4.0, worksheet.control_ei50, 0.002); end
  def test_control_ef51; assert_in_delta(1.0, worksheet.control_ef51, 0.002); end
  def test_control_eg51; assert_in_epsilon(2.0, worksheet.control_eg51, 0.002); end
  def test_control_eh51; assert_in_epsilon(3.0, worksheet.control_eh51, 0.002); end
  def test_control_ei51; assert_in_epsilon(4.0, worksheet.control_ei51, 0.002); end
  def test_control_ef52; assert_in_delta(1.0, worksheet.control_ef52, 0.002); end
  def test_control_eg52; assert_in_epsilon(2.0, worksheet.control_eg52, 0.002); end
  def test_control_eh52; assert_in_epsilon(3.0, worksheet.control_eh52, 0.002); end
  def test_control_ei52; assert_in_epsilon(4.0, worksheet.control_ei52, 0.002); end
  def test_control_ef53; assert_in_delta(1.0, worksheet.control_ef53, 0.002); end
  def test_control_eg53; assert_in_epsilon(2.0, worksheet.control_eg53, 0.002); end
  def test_control_eh53; assert_in_epsilon(3.0, worksheet.control_eh53, 0.002); end
  def test_control_ei53; assert_in_epsilon(4.0, worksheet.control_ei53, 0.002); end
  def test_control_ef54; assert_in_delta(1.0, worksheet.control_ef54, 0.002); end
  def test_control_eg54; assert_in_epsilon(2.0, worksheet.control_eg54, 0.002); end
  def test_control_eh54; assert_in_epsilon(3.0, worksheet.control_eh54, 0.002); end
  def test_control_ei54; assert_in_epsilon(4.0, worksheet.control_ei54, 0.002); end
  def test_control_ef55; assert_in_delta(1.0, worksheet.control_ef55, 0.002); end
  def test_control_eg55; assert_in_epsilon(2.0, worksheet.control_eg55, 0.002); end
  def test_control_eh55; assert_in_epsilon(3.0, worksheet.control_eh55, 0.002); end
  def test_control_ei55; assert_in_epsilon(4.0, worksheet.control_ei55, 0.002); end
  def test_control_ef56; assert_in_delta(1.0, worksheet.control_ef56, 0.002); end
  def test_control_eg56; assert_in_epsilon(2.0, worksheet.control_eg56, 0.002); end
  def test_control_eh56; assert_in_epsilon(3.0, worksheet.control_eh56, 0.002); end
  def test_control_ei56; assert_in_epsilon(4.0, worksheet.control_ei56, 0.002); end
  def test_control_ef57; assert_in_delta(1.0, worksheet.control_ef57, 0.002); end
  def test_control_eg57; assert_in_epsilon(2.0, worksheet.control_eg57, 0.002); end
  def test_control_eh57; assert_in_epsilon(3.0, worksheet.control_eh57, 0.002); end
  def test_control_ei57; assert_in_epsilon(4.0, worksheet.control_ei57, 0.002); end
  def test_control_ef58; assert_in_delta(1.0, worksheet.control_ef58, 0.002); end
  def test_control_eg58; assert_in_epsilon(2.0, worksheet.control_eg58, 0.002); end
  def test_control_eh58; assert_in_epsilon(3.0, worksheet.control_eh58, 0.002); end
  def test_control_ei58; assert_in_epsilon(4.0, worksheet.control_ei58, 0.002); end
  def test_control_ef59; assert_in_delta(1.0, worksheet.control_ef59, 0.002); end
  def test_control_eg59; assert_in_epsilon(2.0, worksheet.control_eg59, 0.002); end
  def test_control_eh59; assert_in_epsilon(3.0, worksheet.control_eh59, 0.002); end
  def test_control_ei59; assert_in_epsilon(4.0, worksheet.control_ei59, 0.002); end
  def test_control_ef60; assert_in_delta(1.0, worksheet.control_ef60, 0.002); end
  def test_control_eg60; assert_in_epsilon(2.0, worksheet.control_eg60, 0.002); end
  def test_control_eh60; assert_in_epsilon(3.0, worksheet.control_eh60, 0.002); end
  def test_control_ei60; assert_in_epsilon(4.0, worksheet.control_ei60, 0.002); end
  def test_control_ef61; assert_in_delta(1.0, worksheet.control_ef61, 0.002); end
  def test_control_eg61; assert_in_epsilon(2.0, worksheet.control_eg61, 0.002); end
  def test_control_eh61; assert_in_epsilon(3.0, worksheet.control_eh61, 0.002); end
  def test_control_ei61; assert_in_epsilon(4.0, worksheet.control_ei61, 0.002); end
  def test_control_c17; assert_equal("Buildings Temperature", worksheet.control_c17.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c18; assert_equal("Buildings Insulation", worksheet.control_c18.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c19; assert_equal("District Heat Share", worksheet.control_c19.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c20; assert_equal("Heat Pump Share", worksheet.control_c20.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c21; assert_equal("Hybrid Heat Share", worksheet.control_c21.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c22; assert_equal("Heat Network - Heat Pump", worksheet.control_c22.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c23; assert_equal("Heat Network - Biomass CHP", worksheet.control_c23.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c24; assert_equal("Lighting and Applicances", worksheet.control_c24.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c25; assert_equal("UK Transport Demand", worksheet.control_c25.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c26; assert_equal("International Aviation", worksheet.control_c26.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c27; assert_equal("Light Vehicles - Electric", worksheet.control_c27.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c28; assert_equal("Light Vehicles - Hydrogen", worksheet.control_c28.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c29; assert_equal("Light Vehicles - Hybrid", worksheet.control_c29.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c30; assert_equal("Light Vehicles - Biofuel", worksheet.control_c30.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c31; assert_equal("Heavy Vehicles - Electric", worksheet.control_c31.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c32; assert_equal("Heavy Vehicles - Hydrogen", worksheet.control_c32.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c33; assert_equal("Heavy Vehicles - Hybrid", worksheet.control_c33.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c34; assert_equal("Heavy Vehicles - Biofuel", worksheet.control_c34.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c35; assert_equal("Aviation Efficiency", worksheet.control_c35.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c36; assert_equal("Aviation Biofuel", worksheet.control_c36.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c37; assert_equal("Industrial Efficiency", worksheet.control_c37.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c38; assert_equal("Industrial Electrification", worksheet.control_c38.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c39; assert_equal("Industry Shift to Biomass", worksheet.control_c39.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c40; assert_equal("Industry Shift to Gas", worksheet.control_c40.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c41; assert_equal("Industry CCS", worksheet.control_c41.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c42; assert_equal("Hydrogen Gas Grid Share", worksheet.control_c42.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c43; assert_equal("Biomethane Gas Grid Share", worksheet.control_c43.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c44; assert_equal("Hydrogen from Biomass CCS", worksheet.control_c44.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c45; assert_equal("Hydrogen from Methane CCS", worksheet.control_c45.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c46; assert_equal("Zero Carbon Hydrogen Imports", worksheet.control_c46.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c47; assert_equal("Greenhouse Gas Removal", worksheet.control_c47.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c48; assert_equal("Bio Transformation with CCS", worksheet.control_c48.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c49; assert_equal("CCS Capture Rate", worksheet.control_c49.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c50; assert_equal("Seasonal Storage", worksheet.control_c50.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c51; assert_equal("DSR, Batteries & Interconnectors", worksheet.control_c51.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c52; assert_equal("Biomass with CCS", worksheet.control_c52.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c53; assert_equal("Nuclear", worksheet.control_c53.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c54; assert_equal("Offshore & Onshore Wind", worksheet.control_c54.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c55; assert_equal("Solar", worksheet.control_c55.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c56; assert_equal("Wave & Tidal", worksheet.control_c56.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c57; assert_equal("Gas with CCS", worksheet.control_c57.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c58; assert_equal("Farming Yield & Efficiency", worksheet.control_c58.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c59; assert_equal("Forestry", worksheet.control_c59.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c60; assert_equal("Land for Bioenergy", worksheet.control_c60.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_c61; assert_equal("Waste Reduction", worksheet.control_c61.to_s.gsub(/[\n\r]+/,'')); end
  def test_control_h17; assert_in_epsilon(4.0, worksheet.control_h17, 0.002); end
  def test_control_h18; assert_in_epsilon(4.0, worksheet.control_h18, 0.002); end
  def test_control_h19; assert_in_epsilon(4.0, worksheet.control_h19, 0.002); end
  def test_control_h20; assert_in_epsilon(4.0, worksheet.control_h20, 0.002); end
  def test_control_h21; assert_in_epsilon(4.0, worksheet.control_h21, 0.002); end
  def test_control_h22; assert_in_epsilon(4.0, worksheet.control_h22, 0.002); end
  def test_control_h23; assert_in_epsilon(4.0, worksheet.control_h23, 0.002); end
  def test_control_h24; assert_in_epsilon(4.0, worksheet.control_h24, 0.002); end
  def test_control_h25; assert_in_epsilon(4.0, worksheet.control_h25, 0.002); end
  def test_control_h26; assert_in_epsilon(4.0, worksheet.control_h26, 0.002); end
  def test_control_h27; assert_in_epsilon(4.0, worksheet.control_h27, 0.002); end
  def test_control_h28; assert_in_epsilon(4.0, worksheet.control_h28, 0.002); end
  def test_control_h29; assert_in_epsilon(4.0, worksheet.control_h29, 0.002); end
  def test_control_h30; assert_in_epsilon(4.0, worksheet.control_h30, 0.002); end
  def test_control_h31; assert_in_epsilon(4.0, worksheet.control_h31, 0.002); end
  def test_control_h32; assert_in_epsilon(4.0, worksheet.control_h32, 0.002); end
  def test_control_h33; assert_in_epsilon(4.0, worksheet.control_h33, 0.002); end
  def test_control_h34; assert_in_epsilon(4.0, worksheet.control_h34, 0.002); end
  def test_control_h35; assert_in_epsilon(4.0, worksheet.control_h35, 0.002); end
  def test_control_h36; assert_in_epsilon(4.0, worksheet.control_h36, 0.002); end
  def test_control_h37; assert_in_epsilon(4.0, worksheet.control_h37, 0.002); end
  def test_control_h38; assert_in_epsilon(4.0, worksheet.control_h38, 0.002); end
  def test_control_h39; assert_in_epsilon(4.0, worksheet.control_h39, 0.002); end
  def test_control_h40; assert_in_epsilon(4.0, worksheet.control_h40, 0.002); end
  def test_control_h41; assert_in_epsilon(4.0, worksheet.control_h41, 0.002); end
  def test_control_h42; assert_in_epsilon(4.0, worksheet.control_h42, 0.002); end
  def test_control_h43; assert_in_epsilon(4.0, worksheet.control_h43, 0.002); end
  def test_control_h44; assert_in_epsilon(4.0, worksheet.control_h44, 0.002); end
  def test_control_h45; assert_in_epsilon(4.0, worksheet.control_h45, 0.002); end
  def test_control_h46; assert_in_epsilon(4.0, worksheet.control_h46, 0.002); end
  def test_control_h47; assert_in_epsilon(4.0, worksheet.control_h47, 0.002); end
  def test_control_h48; assert_in_epsilon(4.0, worksheet.control_h48, 0.002); end
  def test_control_h49; assert_in_epsilon(4.0, worksheet.control_h49, 0.002); end
  def test_control_h50; assert_in_epsilon(4.0, worksheet.control_h50, 0.002); end
  def test_control_h51; assert_in_epsilon(4.0, worksheet.control_h51, 0.002); end
  def test_control_h52; assert_in_epsilon(4.0, worksheet.control_h52, 0.002); end
  def test_control_h53; assert_in_epsilon(4.0, worksheet.control_h53, 0.002); end
  def test_control_h54; assert_in_epsilon(4.0, worksheet.control_h54, 0.002); end
  def test_control_h55; assert_in_epsilon(4.0, worksheet.control_h55, 0.002); end
  def test_control_h56; assert_in_epsilon(4.0, worksheet.control_h56, 0.002); end
  def test_control_h57; assert_in_epsilon(4.0, worksheet.control_h57, 0.002); end
  def test_control_h58; assert_in_epsilon(4.0, worksheet.control_h58, 0.002); end
  def test_control_h59; assert_in_epsilon(4.0, worksheet.control_h59, 0.002); end
  def test_control_h60; assert_in_epsilon(4.0, worksheet.control_h60, 0.002); end
  def test_control_h61; assert_in_epsilon(4.0, worksheet.control_h61, 0.002); end
  def test_results_e583; assert_equal("Fossil Fuel", worksheet.results_e583.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f583; assert_in_epsilon(53.0, worksheet.results_f583, 0.002); end
  def test_results_g583; assert_in_epsilon(66.43750816947981, worksheet.results_g583, 0.002); end
  def test_results_h583; assert_in_epsilon(71.8765016678253, worksheet.results_h583, 0.002); end
  def test_results_i583; assert_in_epsilon(76.31551417040463, worksheet.results_i583, 0.002); end
  def test_results_j583; assert_in_epsilon(79.32554980259958, worksheet.results_j583, 0.002); end
  def test_results_k583; assert_in_epsilon(78.02565570175432, worksheet.results_k583, 0.002); end
  def test_results_l583; assert_in_epsilon(73.02565570175432, worksheet.results_l583, 0.002); end
  def test_results_m583; assert_in_epsilon(55.29257845628436, worksheet.results_m583, 0.002); end
  def test_results_n583; assert_in_epsilon(61.68677158376656, worksheet.results_n583, 0.002); end
  def test_results_o583; assert_in_epsilon(68.38784047318114, worksheet.results_o583, 0.002); end
  def test_results_p583; assert_in_epsilon(69.22383888002562, worksheet.results_p583, 0.002); end
  def test_results_q583; assert_in_epsilon(70.45649593824434, worksheet.results_q583, 0.002); end
  def test_results_r583; assert_in_epsilon(71.93753693990158, worksheet.results_r583, 0.002); end
  def test_results_s583; assert_in_epsilon(73.4522603820611, worksheet.results_s583, 0.002); end
  def test_results_t583; assert_in_epsilon(74.86874322350724, worksheet.results_t583, 0.002); end
  def test_results_u583; assert_in_epsilon(76.28891738993318, worksheet.results_u583, 0.002); end
  def test_results_v583; assert_in_epsilon(77.67477081615992, worksheet.results_v583, 0.002); end
  def test_results_w583; assert_in_epsilon(79.48889489886054, worksheet.results_w583, 0.002); end
  def test_results_e584; assert_equal("Nuclear", worksheet.results_e584.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f584; assert_in_epsilon(9.0, worksheet.results_f584, 0.002); end
  def test_results_g584; assert_in_epsilon(8.0, worksheet.results_g584, 0.002); end
  def test_results_h584; assert_in_epsilon(9.956666666666665, worksheet.results_h584, 0.002); end
  def test_results_i584; assert_in_epsilon(16.173333333333325, worksheet.results_i584, 0.002); end
  def test_results_j584; assert_in_epsilon(22.13, worksheet.results_j584, 0.002); end
  def test_results_k584; assert_in_epsilon(28.086666666666662, worksheet.results_k584, 0.002); end
  def test_results_l584; assert_in_epsilon(34.04333333333333, worksheet.results_l584, 0.002); end
  def test_results_m584; assert_in_epsilon(39.99999999999999, worksheet.results_m584, 0.002); end
  def test_results_n584; assert_in_epsilon(39.99999999999999, worksheet.results_n584, 0.002); end
  def test_results_o584; assert_in_epsilon(39.99999999999999, worksheet.results_o584, 0.002); end
  def test_results_p584; assert_in_epsilon(39.99999999999999, worksheet.results_p584, 0.002); end
  def test_results_q584; assert_in_epsilon(39.99999999999999, worksheet.results_q584, 0.002); end
  def test_results_r584; assert_in_epsilon(39.99999999999999, worksheet.results_r584, 0.002); end
  def test_results_s584; assert_in_epsilon(39.99999999999999, worksheet.results_s584, 0.002); end
  def test_results_t584; assert_in_epsilon(39.99999999999999, worksheet.results_t584, 0.002); end
  def test_results_u584; assert_in_epsilon(39.99999999999999, worksheet.results_u584, 0.002); end
  def test_results_v584; assert_in_epsilon(39.99999999999999, worksheet.results_v584, 0.002); end
  def test_results_w584; assert_in_epsilon(39.99999999999999, worksheet.results_w584, 0.002); end
  def test_results_e585; assert_equal("Gas CCS", worksheet.results_e585.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f585; assert_in_delta(0.0, (worksheet.results_f585||0), 0.002); end
  def test_results_g585; assert_in_delta(0.0, (worksheet.results_g585||0), 0.002); end
  def test_results_h585; assert_in_delta(0.3333333333333332, worksheet.results_h585, 0.002); end
  def test_results_i585; assert_in_delta(0.6666666666666664, worksheet.results_i585, 0.002); end
  def test_results_j585; assert_in_delta(0.9999999999999999, worksheet.results_j585, 0.002); end
  def test_results_k585; assert_in_epsilon(1.3333333333333328, worksheet.results_k585, 0.002); end
  def test_results_l585; assert_in_epsilon(1.6666666666666665, worksheet.results_l585, 0.002); end
  def test_results_m585; assert_in_epsilon(1.9999999999999998, worksheet.results_m585, 0.002); end
  def test_results_n585; assert_in_epsilon(1.9999999999999998, worksheet.results_n585, 0.002); end
  def test_results_o585; assert_in_epsilon(1.9999999999999998, worksheet.results_o585, 0.002); end
  def test_results_p585; assert_in_epsilon(1.9999999999999998, worksheet.results_p585, 0.002); end
  def test_results_q585; assert_in_epsilon(1.9999999999999998, worksheet.results_q585, 0.002); end
  def test_results_r585; assert_in_epsilon(1.9999999999999998, worksheet.results_r585, 0.002); end
  def test_results_s585; assert_in_epsilon(1.9999999999999998, worksheet.results_s585, 0.002); end
  def test_results_t585; assert_in_epsilon(1.9999999999999998, worksheet.results_t585, 0.002); end
  def test_results_u585; assert_in_epsilon(1.9999999999999998, worksheet.results_u585, 0.002); end
  def test_results_v585; assert_in_epsilon(1.9999999999999998, worksheet.results_v585, 0.002); end
  def test_results_w585; assert_in_epsilon(1.9999999999999998, worksheet.results_w585, 0.002); end
  def test_results_e586; assert_equal("Biomass CCS", worksheet.results_e586.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f586; assert_in_delta(0.0, (worksheet.results_f586||0), 0.002); end
  def test_results_g586; assert_in_delta(0.0, (worksheet.results_g586||0), 0.002); end
  def test_results_h586; assert_in_delta(0.3333333333333332, worksheet.results_h586, 0.002); end
  def test_results_i586; assert_in_delta(0.6666666666666664, worksheet.results_i586, 0.002); end
  def test_results_j586; assert_in_delta(0.9999999999999999, worksheet.results_j586, 0.002); end
  def test_results_k586; assert_in_epsilon(1.3333333333333328, worksheet.results_k586, 0.002); end
  def test_results_l586; assert_in_epsilon(1.6666666666666665, worksheet.results_l586, 0.002); end
  def test_results_m586; assert_in_epsilon(1.9999999999999998, worksheet.results_m586, 0.002); end
  def test_results_n586; assert_in_epsilon(1.9999999999999998, worksheet.results_n586, 0.002); end
  def test_results_o586; assert_in_epsilon(1.9999999999999998, worksheet.results_o586, 0.002); end
  def test_results_p586; assert_in_epsilon(1.9999999999999998, worksheet.results_p586, 0.002); end
  def test_results_q586; assert_in_epsilon(1.9999999999999998, worksheet.results_q586, 0.002); end
  def test_results_r586; assert_in_epsilon(1.9999999999999998, worksheet.results_r586, 0.002); end
  def test_results_s586; assert_in_epsilon(1.9999999999999998, worksheet.results_s586, 0.002); end
  def test_results_t586; assert_in_epsilon(1.9999999999999998, worksheet.results_t586, 0.002); end
  def test_results_u586; assert_in_epsilon(1.9999999999999998, worksheet.results_u586, 0.002); end
  def test_results_v586; assert_in_epsilon(1.9999999999999998, worksheet.results_v586, 0.002); end
  def test_results_w586; assert_in_epsilon(1.9999999999999998, worksheet.results_w586, 0.002); end
  def test_results_e587; assert_equal("Wind Onshore", worksheet.results_e587.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f587; assert_in_epsilon(4.0, worksheet.results_f587, 0.002); end
  def test_results_g587; assert_in_epsilon(4.0, worksheet.results_g587, 0.002); end
  def test_results_h587; assert_in_epsilon(6.666666666666666, worksheet.results_h587, 0.002); end
  def test_results_i587; assert_in_epsilon(7.333333333333332, worksheet.results_i587, 0.002); end
  def test_results_j587; assert_in_epsilon(7.999999999999999, worksheet.results_j587, 0.002); end
  def test_results_k587; assert_in_epsilon(10.666666666666664, worksheet.results_k587, 0.002); end
  def test_results_l587; assert_in_epsilon(13.333333333333332, worksheet.results_l587, 0.002); end
  def test_results_m587; assert_in_epsilon(15.999999999999998, worksheet.results_m587, 0.002); end
  def test_results_n587; assert_in_epsilon(15.999999999999998, worksheet.results_n587, 0.002); end
  def test_results_o587; assert_in_epsilon(15.999999999999998, worksheet.results_o587, 0.002); end
  def test_results_p587; assert_in_epsilon(15.999999999999998, worksheet.results_p587, 0.002); end
  def test_results_q587; assert_in_epsilon(15.999999999999998, worksheet.results_q587, 0.002); end
  def test_results_r587; assert_in_epsilon(15.999999999999998, worksheet.results_r587, 0.002); end
  def test_results_s587; assert_in_epsilon(15.999999999999998, worksheet.results_s587, 0.002); end
  def test_results_t587; assert_in_epsilon(15.999999999999998, worksheet.results_t587, 0.002); end
  def test_results_u587; assert_in_epsilon(15.999999999999998, worksheet.results_u587, 0.002); end
  def test_results_v587; assert_in_epsilon(15.999999999999998, worksheet.results_v587, 0.002); end
  def test_results_w587; assert_in_epsilon(15.999999999999998, worksheet.results_w587, 0.002); end
  def test_results_e588; assert_equal("Wind Offshore", worksheet.results_e588.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f588; assert_in_epsilon(2.0, worksheet.results_f588, 0.002); end
  def test_results_g588; assert_in_epsilon(2.0, worksheet.results_g588, 0.002); end
  def test_results_h588; assert_in_epsilon(5.333333333333332, worksheet.results_h588, 0.002); end
  def test_results_i588; assert_in_epsilon(8.166666666666666, worksheet.results_i588, 0.002); end
  def test_results_j588; assert_in_epsilon(9.999999999999998, worksheet.results_j588, 0.002); end
  def test_results_k588; assert_in_epsilon(13.333333333333332, worksheet.results_k588, 0.002); end
  def test_results_l588; assert_in_epsilon(16.66666666666666, worksheet.results_l588, 0.002); end
  def test_results_m588; assert_in_epsilon(19.999999999999996, worksheet.results_m588, 0.002); end
  def test_results_n588; assert_in_epsilon(19.999999999999996, worksheet.results_n588, 0.002); end
  def test_results_o588; assert_in_epsilon(19.999999999999996, worksheet.results_o588, 0.002); end
  def test_results_p588; assert_in_epsilon(19.999999999999996, worksheet.results_p588, 0.002); end
  def test_results_q588; assert_in_epsilon(19.999999999999996, worksheet.results_q588, 0.002); end
  def test_results_r588; assert_in_epsilon(19.999999999999996, worksheet.results_r588, 0.002); end
  def test_results_s588; assert_in_epsilon(19.999999999999996, worksheet.results_s588, 0.002); end
  def test_results_t588; assert_in_epsilon(19.999999999999996, worksheet.results_t588, 0.002); end
  def test_results_u588; assert_in_epsilon(19.999999999999996, worksheet.results_u588, 0.002); end
  def test_results_v588; assert_in_epsilon(19.999999999999996, worksheet.results_v588, 0.002); end
  def test_results_w588; assert_in_epsilon(19.999999999999996, worksheet.results_w588, 0.002); end
  def test_results_e589; assert_equal("Solar", worksheet.results_e589.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f589; assert_in_epsilon(1.6, worksheet.results_f589, 0.002); end
  def test_results_g589; assert_in_epsilon(1.5, worksheet.results_g589, 0.002); end
  def test_results_h589; assert_in_epsilon(1.733333333333333, worksheet.results_h589, 0.002); end
  def test_results_i589; assert_in_epsilon(2.0666666666666664, worksheet.results_i589, 0.002); end
  def test_results_j589; assert_in_epsilon(2.3999999999999995, worksheet.results_j589, 0.002); end
  def test_results_k589; assert_in_epsilon(2.733333333333333, worksheet.results_k589, 0.002); end
  def test_results_l589; assert_in_epsilon(3.066666666666666, worksheet.results_l589, 0.002); end
  def test_results_m589; assert_in_epsilon(2.0, worksheet.results_m589, 0.002); end
  def test_results_n589; assert_in_epsilon(2.0, worksheet.results_n589, 0.002); end
  def test_results_o589; assert_in_epsilon(2.0, worksheet.results_o589, 0.002); end
  def test_results_p589; assert_in_epsilon(2.0, worksheet.results_p589, 0.002); end
  def test_results_q589; assert_in_epsilon(2.0, worksheet.results_q589, 0.002); end
  def test_results_r589; assert_in_epsilon(2.0, worksheet.results_r589, 0.002); end
  def test_results_s589; assert_in_epsilon(2.0, worksheet.results_s589, 0.002); end
  def test_results_t589; assert_in_epsilon(2.0, worksheet.results_t589, 0.002); end
  def test_results_u589; assert_in_epsilon(2.0, worksheet.results_u589, 0.002); end
  def test_results_v589; assert_in_epsilon(2.0, worksheet.results_v589, 0.002); end
  def test_results_w589; assert_in_epsilon(2.0, worksheet.results_w589, 0.002); end
  def test_results_e590; assert_equal("Tidal & Wave", worksheet.results_e590.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f590; assert_in_delta(0.0, (worksheet.results_f590||0), 0.002); end
  def test_results_g590; assert_in_delta(0.0, (worksheet.results_g590||0), 0.002); end
  def test_results_h590; assert_in_delta(0.9999999999999998, worksheet.results_h590, 0.002); end
  def test_results_i590; assert_in_epsilon(1.9999999999999996, worksheet.results_i590, 0.002); end
  def test_results_j590; assert_in_epsilon(2.999999999999999, worksheet.results_j590, 0.002); end
  def test_results_k590; assert_in_epsilon(3.999999999999999, worksheet.results_k590, 0.002); end
  def test_results_l590; assert_in_epsilon(5.0, worksheet.results_l590, 0.002); end
  def test_results_m590; assert_in_epsilon(5.999999999999998, worksheet.results_m590, 0.002); end
  def test_results_n590; assert_in_epsilon(5.999999999999998, worksheet.results_n590, 0.002); end
  def test_results_o590; assert_in_epsilon(5.999999999999998, worksheet.results_o590, 0.002); end
  def test_results_p590; assert_in_epsilon(5.999999999999998, worksheet.results_p590, 0.002); end
  def test_results_q590; assert_in_epsilon(5.999999999999998, worksheet.results_q590, 0.002); end
  def test_results_r590; assert_in_epsilon(5.999999999999998, worksheet.results_r590, 0.002); end
  def test_results_s590; assert_in_epsilon(5.999999999999998, worksheet.results_s590, 0.002); end
  def test_results_t590; assert_in_epsilon(5.999999999999998, worksheet.results_t590, 0.002); end
  def test_results_u590; assert_in_epsilon(5.999999999999998, worksheet.results_u590, 0.002); end
  def test_results_v590; assert_in_epsilon(5.999999999999998, worksheet.results_v590, 0.002); end
  def test_results_w590; assert_in_epsilon(5.999999999999998, worksheet.results_w590, 0.002); end
  def test_results_e591; assert_equal("Other Renewbles", worksheet.results_e591.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f591; assert_in_epsilon(4.5, worksheet.results_f591, 0.002); end
  def test_results_g591; assert_in_epsilon(4.5, worksheet.results_g591, 0.002); end
  def test_results_h591; assert_in_epsilon(4.5, worksheet.results_h591, 0.002); end
  def test_results_i591; assert_in_epsilon(3.3, worksheet.results_i591, 0.002); end
  def test_results_j591; assert_in_epsilon(3.3, worksheet.results_j591, 0.002); end
  def test_results_k591; assert_in_epsilon(3.3, worksheet.results_k591, 0.002); end
  def test_results_l591; assert_in_epsilon(3.3, worksheet.results_l591, 0.002); end
  def test_results_m591; assert_in_epsilon(3.3, worksheet.results_m591, 0.002); end
  def test_results_n591; assert_in_epsilon(3.3, worksheet.results_n591, 0.002); end
  def test_results_o591; assert_in_epsilon(1.5000000000000002, worksheet.results_o591, 0.002); end
  def test_results_p591; assert_in_epsilon(1.5000000000000002, worksheet.results_p591, 0.002); end
  def test_results_q591; assert_in_epsilon(1.5000000000000002, worksheet.results_q591, 0.002); end
  def test_results_r591; assert_in_epsilon(1.5, worksheet.results_r591, 0.002); end
  def test_results_s591; assert_in_epsilon(1.5, worksheet.results_s591, 0.002); end
  def test_results_t591; assert_in_epsilon(1.5000000000000002, worksheet.results_t591, 0.002); end
  def test_results_u591; assert_in_epsilon(1.5000000000000002, worksheet.results_u591, 0.002); end
  def test_results_v591; assert_in_epsilon(1.5000000000000002, worksheet.results_v591, 0.002); end
  def test_results_w591; assert_in_epsilon(1.5000000000000002, worksheet.results_w591, 0.002); end
  def test_results_e526; assert_equal("Fossil Fuel", worksheet.results_e526.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f526; assert_in_epsilon(241.47548240108796, worksheet.results_f526, 0.002); end
  def test_results_g526; assert_in_epsilon(249.62729132125457, worksheet.results_g526, 0.002); end
  def test_results_h526; assert_in_epsilon(251.72226659141342, worksheet.results_h526, 0.002); end
  def test_results_i526; assert_in_epsilon(244.51162741174724, worksheet.results_i526, 0.002); end
  def test_results_j526; assert_in_epsilon(271.2342418942791, worksheet.results_j526, 0.002); end
  def test_results_k526; assert_in_epsilon(274.8909939282381, worksheet.results_k526, 0.002); end
  def test_results_l526; assert_in_epsilon(240.85409434318953, worksheet.results_l526, 0.002); end
  def test_results_m526; assert_in_epsilon(172.7896088928918, worksheet.results_m526, 0.002); end
  def test_results_n526; assert_in_epsilon(211.17332363575292, worksheet.results_n526, 0.002); end
  def test_results_o526; assert_in_epsilon(248.42564131361553, worksheet.results_o526, 0.002); end
  def test_results_p526; assert_in_epsilon(251.72135317015756, worksheet.results_p526, 0.002); end
  def test_results_q526; assert_in_epsilon(255.24233461677017, worksheet.results_q526, 0.002); end
  def test_results_r526; assert_in_epsilon(262.5545728941863, worksheet.results_r526, 0.002); end
  def test_results_s526; assert_in_epsilon(269.9841454037849, worksheet.results_s526, 0.002); end
  def test_results_t526; assert_in_epsilon(277.3880949965715, worksheet.results_t526, 0.002); end
  def test_results_u526; assert_in_epsilon(284.8205051506565, worksheet.results_u526, 0.002); end
  def test_results_v526; assert_in_epsilon(291.8898639346455, worksheet.results_v526, 0.002); end
  def test_results_w526; assert_in_epsilon(299.17882432036777, worksheet.results_w526, 0.002); end
  def test_results_e527; assert_equal("Nuclear", worksheet.results_e527.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f527; assert_in_epsilon(62.008473986199114, worksheet.results_f527, 0.002); end
  def test_results_g527; assert_in_epsilon(54.092579151642866, worksheet.results_g527, 0.002); end
  def test_results_h527; assert_in_epsilon(67.45248879918904, worksheet.results_h527, 0.002); end
  def test_results_i527; assert_in_epsilon(108.80054917229447, worksheet.results_i527, 0.002); end
  def test_results_j527; assert_in_epsilon(149.78483082672815, worksheet.results_j527, 0.002); end
  def test_results_k527; assert_in_epsilon(190.918137436062, worksheet.results_k527, 0.002); end
  def test_results_l527; assert_in_epsilon(232.52464570086767, worksheet.results_l527, 0.002); end
  def test_results_m527; assert_in_epsilon(275.1603593950432, worksheet.results_m527, 0.002); end
  def test_results_n527; assert_in_epsilon(273.7364534337893, worksheet.results_n527, 0.002); end
  def test_results_o527; assert_in_epsilon(273.7501827318159, worksheet.results_o527, 0.002); end
  def test_results_p527; assert_in_epsilon(273.706237912385, worksheet.results_p527, 0.002); end
  def test_results_q527; assert_in_epsilon(273.5971085939215, worksheet.results_q527, 0.002); end
  def test_results_r527; assert_in_epsilon(273.57101254192423, worksheet.results_r527, 0.002); end
  def test_results_s527; assert_in_epsilon(273.54327744667034, worksheet.results_s527, 0.002); end
  def test_results_t527; assert_in_epsilon(273.53285054647586, worksheet.results_t527, 0.002); end
  def test_results_u527; assert_in_epsilon(273.5229163155353, worksheet.results_u527, 0.002); end
  def test_results_v527; assert_in_epsilon(273.5075279488801, worksheet.results_v527, 0.002); end
  def test_results_w527; assert_in_epsilon(273.4252423237401, worksheet.results_w527, 0.002); end
  def test_results_e528; assert_equal("Gas CCS", worksheet.results_e528.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f528; assert_in_delta(0.0, (worksheet.results_f528||0), 0.002); end
  def test_results_g528; assert_in_delta(0.0, (worksheet.results_g528||0), 0.002); end
  def test_results_h528; assert_in_epsilon(2.5404770639132126, worksheet.results_h528, 0.002); end
  def test_results_i528; assert_in_epsilon(5.045367593521487, worksheet.results_i528, 0.002); end
  def test_results_j528; assert_in_epsilon(7.614457057391285, worksheet.results_j528, 0.002); end
  def test_results_k528; assert_in_epsilon(10.196197703088998, worksheet.results_k528, 0.002); end
  def test_results_l528; assert_in_epsilon(12.806728013976112, worksheet.results_l528, 0.002); end
  def test_results_m528; assert_in_epsilon(15.477770215971182, worksheet.results_m528, 0.002); end
  def test_results_n528; assert_in_epsilon(15.39767550565065, worksheet.results_n528, 0.002); end
  def test_results_o528; assert_in_epsilon(15.398447778664648, worksheet.results_o528, 0.002); end
  def test_results_p528; assert_in_epsilon(15.395975882571657, worksheet.results_p528, 0.002); end
  def test_results_q528; assert_in_epsilon(15.389837358408085, worksheet.results_q528, 0.002); end
  def test_results_r528; assert_in_epsilon(15.388369455483236, worksheet.results_r528, 0.002); end
  def test_results_s528; assert_in_epsilon(15.386809356375206, worksheet.results_s528, 0.002); end
  def test_results_t528; assert_in_epsilon(15.386222843239267, worksheet.results_t528, 0.002); end
  def test_results_u528; assert_in_epsilon(15.38566404274886, worksheet.results_u528, 0.002); end
  def test_results_v528; assert_in_epsilon(15.384798447124506, worksheet.results_v528, 0.002); end
  def test_results_w528; assert_in_epsilon(15.380169880710383, worksheet.results_w528, 0.002); end
  def test_results_e529; assert_equal("Biomass CCS", worksheet.results_e529.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f529; assert_in_delta(0.0, (worksheet.results_f529||0), 0.002); end
  def test_results_g529; assert_in_delta(0.0, (worksheet.results_g529||0), 0.002); end
  def test_results_h529; assert_in_epsilon(2.5404770639132126, worksheet.results_h529, 0.002); end
  def test_results_i529; assert_in_epsilon(5.045367593521487, worksheet.results_i529, 0.002); end
  def test_results_j529; assert_in_epsilon(9.182431191733249, worksheet.results_j529, 0.002); end
  def test_results_k529; assert_in_epsilon(13.134077915552865, worksheet.results_k529, 0.002); end
  def test_results_l529; assert_in_epsilon(16.918792502168987, worksheet.results_l529, 0.002); end
  def test_results_m529; assert_in_epsilon(20.82870695169617, worksheet.results_m529, 0.002); end
  def test_results_n529; assert_in_epsilon(21.82206394947867, worksheet.results_n529, 0.002); end
  def test_results_o529; assert_in_epsilon(22.781269842046363, worksheet.results_o529, 0.002); end
  def test_results_p529; assert_in_epsilon(22.62316911911715, worksheet.results_p529, 0.002); end
  def test_results_q529; assert_in_epsilon(22.502401103002963, worksheet.results_q529, 0.002); end
  def test_results_r529; assert_in_epsilon(22.316772661686098, worksheet.results_r529, 0.002); end
  def test_results_s529; assert_in_epsilon(22.15372150887955, worksheet.results_s529, 0.002); end
  def test_results_t529; assert_in_epsilon(22.010548144375548, worksheet.results_t529, 0.002); end
  def test_results_u529; assert_in_epsilon(21.881369965234505, worksheet.results_u529, 0.002); end
  def test_results_v529; assert_in_epsilon(21.861621363791173, worksheet.results_v529, 0.002); end
  def test_results_w529; assert_in_epsilon(21.85699279737705, worksheet.results_w529, 0.002); end
  def test_results_e530; assert_equal("Wind Onshore", worksheet.results_e530.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f530; assert_in_epsilon(10.280460885822023, worksheet.results_f530, 0.002); end
  def test_results_g530; assert_in_epsilon(10.023944787910716, worksheet.results_g530, 0.002); end
  def test_results_h530; assert_in_epsilon(16.75001834589522, worksheet.results_h530, 0.002); end
  def test_results_i530; assert_in_epsilon(18.25104156832727, worksheet.results_i530, 0.002); end
  def test_results_j530; assert_in_epsilon(20.07522509294679, worksheet.results_j530, 0.002); end
  def test_results_k530; assert_in_epsilon(26.921947388760884, worksheet.results_k530, 0.002); end
  def test_results_l530; assert_in_epsilon(33.871032938581735, worksheet.results_l530, 0.002); end
  def test_results_m530; assert_in_epsilon(41.03527187900865, worksheet.results_m530, 0.002); end
  def test_results_n530; assert_in_epsilon(40.750490686757864, worksheet.results_n530, 0.002); end
  def test_results_o530; assert_in_epsilon(40.75323654636319, worksheet.results_o530, 0.002); end
  def test_results_p530; assert_in_epsilon(40.744447582477, worksheet.results_p530, 0.002); end
  def test_results_q530; assert_in_epsilon(40.7226217187843, worksheet.results_q530, 0.002); end
  def test_results_r530; assert_in_epsilon(40.71740250838484, worksheet.results_r530, 0.002); end
  def test_results_s530; assert_in_epsilon(40.71185548933407, worksheet.results_s530, 0.002); end
  def test_results_t530; assert_in_epsilon(40.70977010929517, worksheet.results_t530, 0.002); end
  def test_results_u530; assert_in_epsilon(40.70778326310706, worksheet.results_u530, 0.002); end
  def test_results_v530; assert_in_epsilon(40.70470558977602, worksheet.results_v530, 0.002); end
  def test_results_w530; assert_in_epsilon(40.68824846474803, worksheet.results_w530, 0.002); end
  def test_results_e531; assert_equal("Wind Offshore", worksheet.results_e531.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f531; assert_in_epsilon(5.140230442911012, worksheet.results_f531, 0.002); end
  def test_results_g531; assert_in_epsilon(5.011972393955358, worksheet.results_g531, 0.002); end
  def test_results_h531; assert_in_epsilon(13.400014676716175, worksheet.results_h531, 0.002); end
  def test_results_i531; assert_in_epsilon(20.3250235647281, worksheet.results_i531, 0.002); end
  def test_results_j531; assert_in_epsilon(25.094031366183486, worksheet.results_j531, 0.002); end
  def test_results_k531; assert_in_epsilon(33.652434235951105, worksheet.results_k531, 0.002); end
  def test_results_l531; assert_in_epsilon(42.33879117322715, worksheet.results_l531, 0.002); end
  def test_results_m531; assert_in_epsilon(51.294089848760805, worksheet.results_m531, 0.002); end
  def test_results_n531; assert_in_epsilon(50.938113358447325, worksheet.results_n531, 0.002); end
  def test_results_o531; assert_in_epsilon(50.941545682953986, worksheet.results_o531, 0.002); end
  def test_results_p531; assert_in_epsilon(50.93055947809625, worksheet.results_p531, 0.002); end
  def test_results_q531; assert_in_epsilon(50.90327714848038, worksheet.results_q531, 0.002); end
  def test_results_r531; assert_in_epsilon(50.89675313548105, worksheet.results_r531, 0.002); end
  def test_results_s531; assert_in_epsilon(50.889819361667584, worksheet.results_s531, 0.002); end
  def test_results_t531; assert_in_epsilon(50.88721263661896, worksheet.results_t531, 0.002); end
  def test_results_u531; assert_in_epsilon(50.88472907888382, worksheet.results_u531, 0.002); end
  def test_results_v531; assert_in_epsilon(50.88088198722002, worksheet.results_v531, 0.002); end
  def test_results_w531; assert_in_epsilon(50.86031058093503, worksheet.results_w531, 0.002); end
  def test_results_e532; assert_equal("Solar", worksheet.results_e532.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f532; assert_in_epsilon(1.5266196531493215, worksheet.results_f532, 0.002); end
  def test_results_g532; assert_in_epsilon(1.416776894319978, worksheet.results_g532, 0.002); end
  def test_results_h532; assert_in_epsilon(1.6388587154899135, worksheet.results_h532, 0.002); end
  def test_results_i532; assert_in_epsilon(1.9466693026611073, worksheet.results_i532, 0.002); end
  def test_results_j532; assert_in_epsilon(2.2680731291826053, worksheet.results_j532, 0.002); end
  def test_results_k532; assert_in_epsilon(2.5890403527554966, worksheet.results_k532, 0.002); end
  def test_results_l532; assert_in_epsilon(2.9123186363810696, worksheet.results_l532, 0.002); end
  def test_results_m532; assert_in_epsilon(1.9066513477314122, worksheet.results_m532, 0.002); end
  def test_results_n532; assert_in_epsilon(1.9013117003767102, worksheet.results_n532, 0.002); end
  def test_results_o532; assert_in_epsilon(1.90136318524431, worksheet.results_o532, 0.002); end
  def test_results_p532; assert_in_epsilon(1.901198392171444, worksheet.results_p532, 0.002); end
  def test_results_q532; assert_in_epsilon(1.900789157227206, worksheet.results_q532, 0.002); end
  def test_results_r532; assert_in_epsilon(1.9006912970322158, worksheet.results_r532, 0.002); end
  def test_results_s532; assert_in_epsilon(1.900587290425014, worksheet.results_s532, 0.002); end
  def test_results_t532; assert_in_epsilon(1.9005481895492846, worksheet.results_t532, 0.002); end
  def test_results_u532; assert_in_epsilon(1.9005109361832575, worksheet.results_u532, 0.002); end
  def test_results_v532; assert_in_epsilon(1.9004532298083006, worksheet.results_v532, 0.002); end
  def test_results_w532; assert_in_epsilon(1.9001446587140256, worksheet.results_w532, 0.002); end
  def test_results_e533; assert_equal("Tidal & Wave", worksheet.results_e533.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f533; assert_in_delta(0.0, (worksheet.results_f533||0), 0.002); end
  def test_results_g533; assert_in_delta(0.0, (worksheet.results_g533||0), 0.002); end
  def test_results_h533; assert_in_epsilon(2.540477063913212, worksheet.results_h533, 0.002); end
  def test_results_i533; assert_in_epsilon(5.045367593521487, worksheet.results_i533, 0.002); end
  def test_results_j533; assert_in_epsilon(7.614457057391284, worksheet.results_j533, 0.002); end
  def test_results_k533; assert_in_epsilon(10.196197703088998, worksheet.results_k533, 0.002); end
  def test_results_l533; assert_in_epsilon(12.806728013976112, worksheet.results_l533, 0.002); end
  def test_results_m533; assert_in_epsilon(15.47777021597118, worksheet.results_m533, 0.002); end
  def test_results_n533; assert_in_epsilon(15.397675505650648, worksheet.results_n533, 0.002); end
  def test_results_o533; assert_in_epsilon(15.398447778664647, worksheet.results_o533, 0.002); end
  def test_results_p533; assert_in_epsilon(15.395975882571657, worksheet.results_p533, 0.002); end
  def test_results_q533; assert_in_epsilon(15.389837358408085, worksheet.results_q533, 0.002); end
  def test_results_r533; assert_in_epsilon(15.388369455483236, worksheet.results_r533, 0.002); end
  def test_results_s533; assert_in_epsilon(15.386809356375208, worksheet.results_s533, 0.002); end
  def test_results_t533; assert_in_epsilon(15.386222843239267, worksheet.results_t533, 0.002); end
  def test_results_u533; assert_in_epsilon(15.385664042748859, worksheet.results_u533, 0.002); end
  def test_results_v533; assert_in_epsilon(15.384798447124503, worksheet.results_v533, 0.002); end
  def test_results_w533; assert_in_epsilon(15.38016988071038, worksheet.results_w533, 0.002); end
  def test_results_e534; assert_equal("Other Renewbles", worksheet.results_e534.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f534; assert_in_epsilon(63.55102101001474, worksheet.results_f534, 0.002); end
  def test_results_g534; assert_in_epsilon(83.93252689803668, worksheet.results_g534, 0.002); end
  def test_results_h534; assert_in_epsilon(86.53560912065194, worksheet.results_h534, 0.002); end
  def test_results_i534; assert_in_epsilon(81.5294182922757, worksheet.results_i534, 0.002); end
  def test_results_j534; assert_in_epsilon(66.57554911570435, worksheet.results_j534, 0.002); end
  def test_results_k534; assert_in_epsilon(45.82195266870805, worksheet.results_k534, 0.002); end
  def test_results_l534; assert_in_epsilon(40.85059879792871, worksheet.results_l534, 0.002); end
  def test_results_m534; assert_in_epsilon(38.650531336205205, worksheet.results_m534, 0.002); end
  def test_results_n534; assert_in_epsilon(35.97136109555277, worksheet.results_n534, 0.002); end
  def test_results_o534; assert_in_epsilon(33.38090019819302, worksheet.results_o534, 0.002); end
  def test_results_p534; assert_in_epsilon(32.757766916824885, worksheet.results_p534, 0.002); end
  def test_results_q534; assert_in_epsilon(32.29771431798154, worksheet.results_q534, 0.002); end
  def test_results_r534; assert_in_epsilon(31.560705188682263, worksheet.results_r534, 0.002); end
  def test_results_s534; assert_in_epsilon(30.91435094911117, worksheet.results_s534, 0.002); end
  def test_results_t534; assert_in_epsilon(30.343856915354937, worksheet.results_t534, 0.002); end
  def test_results_u534; assert_in_epsilon(29.829239700629795, worksheet.results_u534, 0.002); end
  def test_results_v534; assert_in_epsilon(29.753491278447793, worksheet.results_v534, 0.002); end
  def test_results_w534; assert_in_epsilon(29.75233413684426, worksheet.results_w534, 0.002); end
  def test_results_e535; assert_equal("Interconnectors", worksheet.results_e535.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f535; assert_in_epsilon(29.473949533329105, worksheet.results_f535, 0.002); end
  def test_results_g535; assert_in_epsilon(24.104396225314275, worksheet.results_g535, 0.002); end
  def test_results_h535; assert_in_epsilon(19.320686469793998, worksheet.results_h535, 0.002); end
  def test_results_i535; assert_in_epsilon(14.389024622180832, worksheet.results_i535, 0.002); end
  def test_results_j535; assert_in_epsilon(9.651503355630702, worksheet.results_j535, 0.002); end
  def test_results_k535; assert_in_epsilon(4.846470122770267, worksheet.results_k535, 0.002); end
  def test_results_l535; assert_in_delta(0.0, (worksheet.results_l535||0), 0.002); end
  def test_results_m535; assert_in_delta(0.0, (worksheet.results_m535||0), 0.002); end
  def test_results_n535; assert_in_delta(0.0, (worksheet.results_n535||0), 0.002); end
  def test_results_o535; assert_in_delta(0.0, (worksheet.results_o535||0), 0.002); end
  def test_results_p535; assert_in_delta(0.0, (worksheet.results_p535||0), 0.002); end
  def test_results_q535; assert_in_delta(0.0, (worksheet.results_q535||0), 0.002); end
  def test_results_r535; assert_in_delta(0.0, (worksheet.results_r535||0), 0.002); end
  def test_results_s535; assert_in_delta(0.0, (worksheet.results_s535||0), 0.002); end
  def test_results_t535; assert_in_delta(0.0, (worksheet.results_t535||0), 0.002); end
  def test_results_u535; assert_in_delta(0.0, (worksheet.results_u535||0), 0.002); end
  def test_results_v535; assert_in_delta(0.0, (worksheet.results_v535||0), 0.002); end
  def test_results_w535; assert_in_delta(0.0, (worksheet.results_w535||0), 0.002); end
  def test_results_e34; assert_equal("Domestic District Heat Network ", worksheet.results_e34.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f34; assert_in_delta(0.0, (worksheet.results_f34||0), 0.002); end
  def test_results_g34; assert_in_delta(0.0, (worksheet.results_g34||0), 0.002); end
  def test_results_h34; assert_in_delta(0.0, (worksheet.results_h34||0), 0.002); end
  def test_results_i34; assert_in_delta(0.0, (worksheet.results_i34||0), 0.002); end
  def test_results_j34; assert_in_delta(0.0, (worksheet.results_j34||0), 0.002); end
  def test_results_k34; assert_in_delta(0.0, (worksheet.results_k34||0), 0.002); end
  def test_results_l34; assert_in_delta(0.0, (worksheet.results_l34||0), 0.002); end
  def test_results_m34; assert_in_delta(0.0, (worksheet.results_m34||0), 0.002); end
  def test_results_n34; assert_in_delta(0.0, (worksheet.results_n34||0), 0.002); end
  def test_results_o34; assert_in_delta(0.0, (worksheet.results_o34||0), 0.002); end
  def test_results_p34; assert_in_delta(0.0, (worksheet.results_p34||0), 0.002); end
  def test_results_q34; assert_in_delta(0.0, (worksheet.results_q34||0), 0.002); end
  def test_results_r34; assert_in_delta(0.0, (worksheet.results_r34||0), 0.002); end
  def test_results_s34; assert_in_delta(0.0, (worksheet.results_s34||0), 0.002); end
  def test_results_t34; assert_in_delta(0.0, (worksheet.results_t34||0), 0.002); end
  def test_results_u34; assert_in_delta(0.0, (worksheet.results_u34||0), 0.002); end
  def test_results_v34; assert_in_delta(0.0, (worksheet.results_v34||0), 0.002); end
  def test_results_w34; assert_in_delta(0.0, (worksheet.results_w34||0), 0.002); end
  def test_results_e35; assert_equal("Domestic Heat Pump Air Source ", worksheet.results_e35.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f35; assert_in_delta(0.0, (worksheet.results_f35||0), 0.002); end
  def test_results_g35; assert_in_delta(0.0, (worksheet.results_g35||0), 0.002); end
  def test_results_h35; assert_in_delta(0.0, (worksheet.results_h35||0), 0.002); end
  def test_results_i35; assert_in_delta(0.0, (worksheet.results_i35||0), 0.002); end
  def test_results_j35; assert_in_delta(0.0, (worksheet.results_j35||0), 0.002); end
  def test_results_k35; assert_in_delta(0.0, (worksheet.results_k35||0), 0.002); end
  def test_results_l35; assert_in_delta(0.0, (worksheet.results_l35||0), 0.002); end
  def test_results_m35; assert_in_delta(0.0, (worksheet.results_m35||0), 0.002); end
  def test_results_n35; assert_in_delta(0.0, (worksheet.results_n35||0), 0.002); end
  def test_results_o35; assert_in_delta(0.0, (worksheet.results_o35||0), 0.002); end
  def test_results_p35; assert_in_delta(0.0, (worksheet.results_p35||0), 0.002); end
  def test_results_q35; assert_in_delta(0.0, (worksheet.results_q35||0), 0.002); end
  def test_results_r35; assert_in_delta(0.0, (worksheet.results_r35||0), 0.002); end
  def test_results_s35; assert_in_delta(0.0, (worksheet.results_s35||0), 0.002); end
  def test_results_t35; assert_in_delta(0.0, (worksheet.results_t35||0), 0.002); end
  def test_results_u35; assert_in_delta(0.0, (worksheet.results_u35||0), 0.002); end
  def test_results_v35; assert_in_delta(0.0, (worksheet.results_v35||0), 0.002); end
  def test_results_w35; assert_in_delta(0.0, (worksheet.results_w35||0), 0.002); end
  def test_results_e36; assert_equal("Domestic Heat Pump Ground Source ", worksheet.results_e36.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f36; assert_in_delta(0.0, (worksheet.results_f36||0), 0.002); end
  def test_results_g36; assert_in_delta(0.0, (worksheet.results_g36||0), 0.002); end
  def test_results_h36; assert_in_delta(0.0, (worksheet.results_h36||0), 0.002); end
  def test_results_i36; assert_in_delta(0.0, (worksheet.results_i36||0), 0.002); end
  def test_results_j36; assert_in_delta(0.0, (worksheet.results_j36||0), 0.002); end
  def test_results_k36; assert_in_delta(0.0, (worksheet.results_k36||0), 0.002); end
  def test_results_l36; assert_in_delta(0.0, (worksheet.results_l36||0), 0.002); end
  def test_results_m36; assert_in_delta(0.0, (worksheet.results_m36||0), 0.002); end
  def test_results_n36; assert_in_delta(0.0, (worksheet.results_n36||0), 0.002); end
  def test_results_o36; assert_in_delta(0.0, (worksheet.results_o36||0), 0.002); end
  def test_results_p36; assert_in_delta(0.0, (worksheet.results_p36||0), 0.002); end
  def test_results_q36; assert_in_delta(0.0, (worksheet.results_q36||0), 0.002); end
  def test_results_r36; assert_in_delta(0.0, (worksheet.results_r36||0), 0.002); end
  def test_results_s36; assert_in_delta(0.0, (worksheet.results_s36||0), 0.002); end
  def test_results_t36; assert_in_delta(0.0, (worksheet.results_t36||0), 0.002); end
  def test_results_u36; assert_in_delta(0.0, (worksheet.results_u36||0), 0.002); end
  def test_results_v36; assert_in_delta(0.0, (worksheet.results_v36||0), 0.002); end
  def test_results_w36; assert_in_delta(0.0, (worksheet.results_w36||0), 0.002); end
  def test_results_e37; assert_equal("Domestic Hybrid Heat Pump / Gas Boiler ", worksheet.results_e37.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f37; assert_in_delta(0.0, (worksheet.results_f37||0), 0.002); end
  def test_results_g37; assert_in_delta(0.0, (worksheet.results_g37||0), 0.002); end
  def test_results_h37; assert_in_epsilon(1.185186608838176, worksheet.results_h37, 0.002); end
  def test_results_i37; assert_in_epsilon(2.4899324244003727, worksheet.results_i37, 0.002); end
  def test_results_j37; assert_in_epsilon(3.4629595709036702, worksheet.results_j37, 0.002); end
  def test_results_k37; assert_in_epsilon(4.1845607700366845, worksheet.results_k37, 0.002); end
  def test_results_l37; assert_in_epsilon(4.636232455118452, worksheet.results_l37, 0.002); end
  def test_results_m37; assert_in_epsilon(4.873983270159889, worksheet.results_m37, 0.002); end
  def test_results_n37; assert_in_epsilon(4.511293360215118, worksheet.results_n37, 0.002); end
  def test_results_o37; assert_in_epsilon(4.146564312035282, worksheet.results_o37, 0.002); end
  def test_results_p37; assert_in_epsilon(4.149401726414248, worksheet.results_p37, 0.002); end
  def test_results_q37; assert_in_epsilon(4.153614831212371, worksheet.results_q37, 0.002); end
  def test_results_r37; assert_in_epsilon(4.159453065740231, worksheet.results_r37, 0.002); end
  def test_results_s37; assert_in_epsilon(4.166069698092355, worksheet.results_s37, 0.002); end
  def test_results_t37; assert_in_epsilon(4.172689232224778, worksheet.results_t37, 0.002); end
  def test_results_u37; assert_in_epsilon(4.179307287018227, worksheet.results_u37, 0.002); end
  def test_results_v37; assert_in_epsilon(4.186358826063691, worksheet.results_v37, 0.002); end
  def test_results_w37; assert_in_epsilon(4.193989374591568, worksheet.results_w37, 0.002); end
  def test_results_e38; assert_equal("Domestic Oil Fuel Boiler", worksheet.results_e38.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f38; assert_in_epsilon(4.100681825715016, worksheet.results_f38, 0.002); end
  def test_results_g38; assert_in_epsilon(5.068432976331472, worksheet.results_g38, 0.002); end
  def test_results_h38; assert_in_epsilon(2.55189197636061, worksheet.results_h38, 0.002); end
  def test_results_i38; assert_in_epsilon(2.3378632047734884, worksheet.results_i38, 0.002); end
  def test_results_j38; assert_in_epsilon(1.8968416968526116, worksheet.results_j38, 0.002); end
  def test_results_k38; assert_in_epsilon(1.4750578572497206, worksheet.results_k38, 0.002); end
  def test_results_l38; assert_in_epsilon(1.0921587785397118, worksheet.results_l38, 0.002); end
  def test_results_m38; assert_in_delta(0.7757743647908056, worksheet.results_m38, 0.002); end
  def test_results_n38; assert_in_delta(0.7370916002293653, worksheet.results_n38, 0.002); end
  def test_results_o38; assert_in_delta(0.6989682962534598, worksheet.results_o38, 0.002); end
  def test_results_p38; assert_in_delta(0.6930345303113793, worksheet.results_p38, 0.002); end
  def test_results_q38; assert_in_delta(0.6870838411584774, worksheet.results_q38, 0.002); end
  def test_results_r38; assert_in_delta(0.681113160288947, worksheet.results_r38, 0.002); end
  def test_results_s38; assert_in_delta(0.6751329038708054, worksheet.results_s38, 0.002); end
  def test_results_t38; assert_in_delta(0.6691526117560862, worksheet.results_t38, 0.002); end
  def test_results_u38; assert_in_delta(0.6631723378396219, worksheet.results_u38, 0.002); end
  def test_results_v38; assert_in_delta(0.6571867313677491, worksheet.results_v38, 0.002); end
  def test_results_w38; assert_in_delta(0.6511940021454373, worksheet.results_w38, 0.002); end
  def test_results_e39; assert_equal("Domestic Solid Fuel Boiler ", worksheet.results_e39.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f39; assert_in_epsilon(5.033438855160621, worksheet.results_f39, 0.002); end
  def test_results_g39; assert_in_epsilon(6.221318444621313, worksheet.results_g39, 0.002); end
  def test_results_h39; assert_in_epsilon(3.1450635041937227, worksheet.results_h39, 0.002); end
  def test_results_i39; assert_in_epsilon(2.8958885787153497, worksheet.results_i39, 0.002); end
  def test_results_j39; assert_in_epsilon(2.37051800079658, worksheet.results_j39, 0.002); end
  def test_results_k39; assert_in_epsilon(1.8655612576541174, worksheet.results_k39, 0.002); end
  def test_results_l39; assert_in_epsilon(1.4044643474760672, worksheet.results_l39, 0.002); end
  def test_results_m39; assert_in_epsilon(1.021964667813046, worksheet.results_m39, 0.002); end
  def test_results_n39; assert_in_delta(0.9751943659752176, worksheet.results_n39, 0.002); end
  def test_results_o39; assert_in_delta(0.9290905563517873, worksheet.results_o39, 0.002); end
  def test_results_p39; assert_in_delta(0.9212032087711614, worksheet.results_p39, 0.002); end
  def test_results_q39; assert_in_delta(0.9132933663285489, worksheet.results_q39, 0.002); end
  def test_results_r39; assert_in_delta(0.9053569502699021, worksheet.results_r39, 0.002); end
  def test_results_s39; assert_in_delta(0.8974078060920627, worksheet.results_s39, 0.002); end
  def test_results_t39; assert_in_delta(0.8894586144652141, worksheet.results_t39, 0.002); end
  def test_results_u39; assert_in_delta(0.881509447028056, worksheet.results_u39, 0.002); end
  def test_results_v39; assert_in_delta(0.8735531913911929, worksheet.results_v39, 0.002); end
  def test_results_w39; assert_in_delta(0.865587467971308, worksheet.results_w39, 0.002); end
  def test_results_e40; assert_equal("Domestic Gas Boiler ", worksheet.results_e40.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f40; assert_in_epsilon(42.047138385937494, worksheet.results_f40, 0.002); end
  def test_results_g40; assert_in_epsilon(51.97016296637424, worksheet.results_g40, 0.002); end
  def test_results_h40; assert_in_epsilon(52.84857957051086, worksheet.results_h40, 0.002); end
  def test_results_i40; assert_in_epsilon(48.827549919601935, worksheet.results_i40, 0.002); end
  def test_results_j40; assert_in_epsilon(37.77602053938245, worksheet.results_j40, 0.002); end
  def test_results_k40; assert_in_epsilon(27.407726808872436, worksheet.results_k40, 0.002); end
  def test_results_l40; assert_in_epsilon(18.214635022480994, worksheet.results_l40, 0.002); end
  def test_results_m40; assert_in_epsilon(10.732348331723077, worksheet.results_m40, 0.002); end
  def test_results_n40; assert_in_epsilon(9.840755770644467, worksheet.results_n40, 0.002); end
  def test_results_o40; assert_in_epsilon(8.962903764672525, worksheet.results_o40, 0.002); end
  def test_results_p40; assert_in_epsilon(8.886814801287446, worksheet.results_p40, 0.002); end
  def test_results_q40; assert_in_epsilon(8.810508830763712, worksheet.results_q40, 0.002); end
  def test_results_r40; assert_in_epsilon(8.733946505505163, worksheet.results_r40, 0.002); end
  def test_results_s40; assert_in_epsilon(8.657261392530552, worksheet.results_s40, 0.002); end
  def test_results_t40; assert_in_epsilon(8.580575821817026, worksheet.results_t40, 0.002); end
  def test_results_u40; assert_in_epsilon(8.503890484460587, worksheet.results_u40, 0.002); end
  def test_results_v40; assert_in_epsilon(8.427136767492085, worksheet.results_v40, 0.002); end
  def test_results_w40; assert_in_epsilon(8.35029171515534, worksheet.results_w40, 0.002); end
  def test_results_e41; assert_equal("Domestic Electric Heater ", worksheet.results_e41.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f41; assert_in_delta(0.0, (worksheet.results_f41||0), 0.002); end
  def test_results_g41; assert_in_delta(0.0, (worksheet.results_g41||0), 0.002); end
  def test_results_h41; assert_in_delta(0.0, (worksheet.results_h41||0), 0.002); end
  def test_results_i41; assert_in_delta(0.0, (worksheet.results_i41||0), 0.002); end
  def test_results_j41; assert_in_delta(0.0, (worksheet.results_j41||0), 0.002); end
  def test_results_k41; assert_in_delta(0.0, (worksheet.results_k41||0), 0.002); end
  def test_results_l41; assert_in_delta(0.0, (worksheet.results_l41||0), 0.002); end
  def test_results_m41; assert_in_delta(0.0, (worksheet.results_m41||0), 0.002); end
  def test_results_n41; assert_in_delta(0.0, (worksheet.results_n41||0), 0.002); end
  def test_results_o41; assert_in_delta(0.0, (worksheet.results_o41||0), 0.002); end
  def test_results_p41; assert_in_delta(0.0, (worksheet.results_p41||0), 0.002); end
  def test_results_q41; assert_in_delta(0.0, (worksheet.results_q41||0), 0.002); end
  def test_results_r41; assert_in_delta(0.0, (worksheet.results_r41||0), 0.002); end
  def test_results_s41; assert_in_delta(0.0, (worksheet.results_s41||0), 0.002); end
  def test_results_t41; assert_in_delta(0.0, (worksheet.results_t41||0), 0.002); end
  def test_results_u41; assert_in_delta(0.0, (worksheet.results_u41||0), 0.002); end
  def test_results_v41; assert_in_delta(0.0, (worksheet.results_v41||0), 0.002); end
  def test_results_w41; assert_in_delta(0.0, (worksheet.results_w41||0), 0.002); end
  def test_results_e42; assert_equal("Non-Domestic District Heat Network ", worksheet.results_e42.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f42; assert_in_delta(0.0, (worksheet.results_f42||0), 0.002); end
  def test_results_g42; assert_in_delta(0.0, (worksheet.results_g42||0), 0.002); end
  def test_results_h42; assert_in_delta(0.0, (worksheet.results_h42||0), 0.002); end
  def test_results_i42; assert_in_delta(0.0, (worksheet.results_i42||0), 0.002); end
  def test_results_j42; assert_in_delta(0.0, (worksheet.results_j42||0), 0.002); end
  def test_results_k42; assert_in_delta(0.0, (worksheet.results_k42||0), 0.002); end
  def test_results_l42; assert_in_delta(0.0, (worksheet.results_l42||0), 0.002); end
  def test_results_m42; assert_in_delta(0.0, (worksheet.results_m42||0), 0.002); end
  def test_results_n42; assert_in_delta(0.0, (worksheet.results_n42||0), 0.002); end
  def test_results_o42; assert_in_delta(0.0, (worksheet.results_o42||0), 0.002); end
  def test_results_p42; assert_in_delta(0.0, (worksheet.results_p42||0), 0.002); end
  def test_results_q42; assert_in_delta(0.0, (worksheet.results_q42||0), 0.002); end
  def test_results_r42; assert_in_delta(0.0, (worksheet.results_r42||0), 0.002); end
  def test_results_s42; assert_in_delta(0.0, (worksheet.results_s42||0), 0.002); end
  def test_results_t42; assert_in_delta(0.0, (worksheet.results_t42||0), 0.002); end
  def test_results_u42; assert_in_delta(0.0, (worksheet.results_u42||0), 0.002); end
  def test_results_v42; assert_in_delta(0.0, (worksheet.results_v42||0), 0.002); end
  def test_results_w42; assert_in_delta(0.0, (worksheet.results_w42||0), 0.002); end
  def test_results_e43; assert_equal("Non-Domestic Heat Pump Air Source ", worksheet.results_e43.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f43; assert_in_delta(0.0, (worksheet.results_f43||0), 0.002); end
  def test_results_g43; assert_in_delta(0.0, (worksheet.results_g43||0), 0.002); end
  def test_results_h43; assert_in_delta(0.0, (worksheet.results_h43||0), 0.002); end
  def test_results_i43; assert_in_delta(0.0, (worksheet.results_i43||0), 0.002); end
  def test_results_j43; assert_in_delta(0.0, (worksheet.results_j43||0), 0.002); end
  def test_results_k43; assert_in_delta(0.0, (worksheet.results_k43||0), 0.002); end
  def test_results_l43; assert_in_delta(0.0, (worksheet.results_l43||0), 0.002); end
  def test_results_m43; assert_in_delta(0.0, (worksheet.results_m43||0), 0.002); end
  def test_results_n43; assert_in_delta(0.0, (worksheet.results_n43||0), 0.002); end
  def test_results_o43; assert_in_delta(0.0, (worksheet.results_o43||0), 0.002); end
  def test_results_p43; assert_in_delta(0.0, (worksheet.results_p43||0), 0.002); end
  def test_results_q43; assert_in_delta(0.0, (worksheet.results_q43||0), 0.002); end
  def test_results_r43; assert_in_delta(0.0, (worksheet.results_r43||0), 0.002); end
  def test_results_s43; assert_in_delta(0.0, (worksheet.results_s43||0), 0.002); end
  def test_results_t43; assert_in_delta(0.0, (worksheet.results_t43||0), 0.002); end
  def test_results_u43; assert_in_delta(0.0, (worksheet.results_u43||0), 0.002); end
  def test_results_v43; assert_in_delta(0.0, (worksheet.results_v43||0), 0.002); end
  def test_results_w43; assert_in_delta(0.0, (worksheet.results_w43||0), 0.002); end
  def test_results_e44; assert_equal("Non-Domestic Heat Pump Ground Source ", worksheet.results_e44.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f44; assert_in_delta(0.0, (worksheet.results_f44||0), 0.002); end
  def test_results_g44; assert_in_delta(0.0, (worksheet.results_g44||0), 0.002); end
  def test_results_h44; assert_in_delta(0.0, (worksheet.results_h44||0), 0.002); end
  def test_results_i44; assert_in_delta(0.0, (worksheet.results_i44||0), 0.002); end
  def test_results_j44; assert_in_delta(0.0, (worksheet.results_j44||0), 0.002); end
  def test_results_k44; assert_in_delta(0.0, (worksheet.results_k44||0), 0.002); end
  def test_results_l44; assert_in_delta(0.0, (worksheet.results_l44||0), 0.002); end
  def test_results_m44; assert_in_delta(0.0, (worksheet.results_m44||0), 0.002); end
  def test_results_n44; assert_in_delta(0.0, (worksheet.results_n44||0), 0.002); end
  def test_results_o44; assert_in_delta(0.0, (worksheet.results_o44||0), 0.002); end
  def test_results_p44; assert_in_delta(0.0, (worksheet.results_p44||0), 0.002); end
  def test_results_q44; assert_in_delta(0.0, (worksheet.results_q44||0), 0.002); end
  def test_results_r44; assert_in_delta(0.0, (worksheet.results_r44||0), 0.002); end
  def test_results_s44; assert_in_delta(0.0, (worksheet.results_s44||0), 0.002); end
  def test_results_t44; assert_in_delta(0.0, (worksheet.results_t44||0), 0.002); end
  def test_results_u44; assert_in_delta(0.0, (worksheet.results_u44||0), 0.002); end
  def test_results_v44; assert_in_delta(0.0, (worksheet.results_v44||0), 0.002); end
  def test_results_w44; assert_in_delta(0.0, (worksheet.results_w44||0), 0.002); end
  def test_results_e45; assert_equal("Non-Domestic Hybrid Heat Pump / Gas Boiler ", worksheet.results_e45.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f45; assert_in_delta(0.0, (worksheet.results_f45||0), 0.002); end
  def test_results_g45; assert_in_delta(0.0, (worksheet.results_g45||0), 0.002); end
  def test_results_h45; assert_in_delta(0.35446921390671504, worksheet.results_h45, 0.002); end
  def test_results_i45; assert_in_delta(0.7056004405852192, worksheet.results_i45, 0.002); end
  def test_results_j45; assert_in_delta(0.9736662658392147, worksheet.results_j45, 0.002); end
  def test_results_k45; assert_in_epsilon(1.1764068616754073, worksheet.results_k45, 0.002); end
  def test_results_l45; assert_in_epsilon(1.317013970650231, worksheet.results_l45, 0.002); end
  def test_results_m45; assert_in_epsilon(1.4034107990307993, worksheet.results_m45, 0.002); end
  def test_results_n45; assert_in_epsilon(1.312783384091302, worksheet.results_n45, 0.002); end
  def test_results_o45; assert_in_epsilon(1.220271936132702, worksheet.results_o45, 0.002); end
  def test_results_p45; assert_in_epsilon(1.2352904227046257, worksheet.results_p45, 0.002); end
  def test_results_q45; assert_in_epsilon(1.2508776714930974, worksheet.results_q45, 0.002); end
  def test_results_r45; assert_in_epsilon(1.2670551444340648, worksheet.results_r45, 0.002); end
  def test_results_s45; assert_in_epsilon(1.2838646126640698, worksheet.results_s45, 0.002); end
  def test_results_t45; assert_in_epsilon(1.301342442341282, worksheet.results_t45, 0.002); end
  def test_results_u45; assert_in_epsilon(1.3195085638527948, worksheet.results_u45, 0.002); end
  def test_results_v45; assert_in_epsilon(1.3383754641343175, worksheet.results_v45, 0.002); end
  def test_results_w45; assert_in_epsilon(1.357961415064884, worksheet.results_w45, 0.002); end
  def test_results_e46; assert_equal("Non-Domestic Oil Fuel Boiler", worksheet.results_e46.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f46; assert_in_epsilon(1.7305632511744031, worksheet.results_f46, 0.002); end
  def test_results_g46; assert_in_epsilon(1.8609068755747662, worksheet.results_g46, 0.002); end
  def test_results_h46; assert_in_delta(0.8526338871633609, worksheet.results_h46, 0.002); end
  def test_results_i46; assert_in_delta(0.7114151532008094, worksheet.results_i46, 0.002); end
  def test_results_j46; assert_in_delta(0.5608322701544937, worksheet.results_j46, 0.002); end
  def test_results_k46; assert_in_delta(0.4252169838781159, worksheet.results_k46, 0.002); end
  def test_results_l46; assert_in_delta(0.3083039658618848, worksheet.results_l46, 0.002); end
  def test_results_m46; assert_in_delta(0.2111719920983056, worksheet.results_m46, 0.002); end
  def test_results_n46; assert_in_delta(0.20369943348936603, worksheet.results_n46, 0.002); end
  def test_results_o46; assert_in_delta(0.19620890033423719, worksheet.results_o46, 0.002); end
  def test_results_p46; assert_in_delta(0.19747781935874642, worksheet.results_p46, 0.002); end
  def test_results_q46; assert_in_delta(0.1988230045283175, worksheet.results_q46, 0.002); end
  def test_results_r46; assert_in_delta(0.20024803837525304, worksheet.results_r46, 0.002); end
  def test_results_s46; assert_in_delta(0.2017612064096223, worksheet.results_s46, 0.002); end
  def test_results_t46; assert_in_delta(0.20336949603532847, worksheet.results_t46, 0.002); end
  def test_results_u46; assert_in_delta(0.2050760216808647, worksheet.results_u46, 0.002); end
  def test_results_v46; assert_in_delta(0.2068821221218041, worksheet.results_v46, 0.002); end
  def test_results_w46; assert_in_delta(0.2087904462296081, worksheet.results_w46, 0.002); end
  def test_results_e47; assert_equal("Non-Domestic Solid Fuel Boiler ", worksheet.results_e47.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f47; assert_in_epsilon(2.124203895837612, worksheet.results_f47, 0.002); end
  def test_results_g47; assert_in_epsilon(2.284195987753901, worksheet.results_g47, 0.002); end
  def test_results_h47; assert_in_epsilon(1.051224806479803, worksheet.results_h47, 0.002); end
  def test_results_i47; assert_in_delta(0.8820993635680753, worksheet.results_i47, 0.002); end
  def test_results_j47; assert_in_delta(0.7023713047026572, worksheet.results_j47, 0.002); end
  def test_results_k47; assert_in_delta(0.5400556713848293, worksheet.results_k47, 0.002); end
  def test_results_l47; assert_in_delta(0.39975953722157137, worksheet.results_l47, 0.002); end
  def test_results_m47; assert_in_delta(0.2829185486341696, worksheet.results_m47, 0.002); end
  def test_results_n47; assert_in_delta(0.2742311878937669, worksheet.results_n47, 0.002); end
  def test_results_o47; assert_in_delta(0.26553591006625604, worksheet.results_o47, 0.002); end
  def test_results_p47; assert_in_delta(0.26725317960601425, worksheet.results_p47, 0.002); end
  def test_results_q47; assert_in_delta(0.26907366260959475, worksheet.results_q47, 0.002); end
  def test_results_r47; assert_in_delta(0.2710022074349144, worksheet.results_r47, 0.002); end
  def test_results_s47; assert_in_delta(0.27305002713323057, worksheet.results_s47, 0.002); end
  def test_results_t47; assert_in_delta(0.27522657798634953, worksheet.results_t47, 0.002); end
  def test_results_u47; assert_in_delta(0.2775360748520215, worksheet.results_u47, 0.002); end
  def test_results_v47; assert_in_delta(0.279980329538934, worksheet.results_v47, 0.002); end
  def test_results_w47; assert_in_delta(0.28256292685130824, worksheet.results_w47, 0.002); end
  def test_results_e48; assert_equal("Non-Domestic Gas Boiler ", worksheet.results_e48.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f48; assert_in_epsilon(17.744666765278794, worksheet.results_f48, 0.002); end
  def test_results_g48; assert_in_epsilon(19.081170460473704, worksheet.results_g48, 0.002); end
  def test_results_h48; assert_in_epsilon(17.69288560657506, worksheet.results_h48, 0.002); end
  def test_results_i48; assert_in_epsilon(14.919768402687055, worksheet.results_i48, 0.002); end
  def test_results_j48; assert_in_epsilon(11.240142326323836, worksheet.results_j48, 0.002); end
  def test_results_k48; assert_in_epsilon(7.96000212445711, worksheet.results_k48, 0.002); end
  def test_results_l48; assert_in_epsilon(5.159440413355561, worksheet.results_l48, 0.002); end
  def test_results_m48; assert_in_epsilon(2.8537617916700504, worksheet.results_m48, 0.002); end
  def test_results_n48; assert_in_epsilon(2.6538708629840846, worksheet.results_n48, 0.002); end
  def test_results_o48; assert_in_epsilon(2.452529520311291, worksheet.results_o48, 0.002); end
  def test_results_p48; assert_in_epsilon(2.4683904795297167, worksheet.results_p48, 0.002); end
  def test_results_q48; assert_in_epsilon(2.485204733791568, worksheet.results_q48, 0.002); end
  def test_results_r48; assert_in_epsilon(2.503017063258267, worksheet.results_r48, 0.002); end
  def test_results_s48; assert_in_epsilon(2.521931033354223, worksheet.results_s48, 0.002); end
  def test_results_t48; assert_in_epsilon(2.5420339837175123, worksheet.results_t48, 0.002); end
  def test_results_u48; assert_in_epsilon(2.5633648434069367, worksheet.results_u48, 0.002); end
  def test_results_v48; assert_in_epsilon(2.5859403465594717, worksheet.results_v48, 0.002); end
  def test_results_w48; assert_in_epsilon(2.6097936029649578, worksheet.results_w48, 0.002); end
  def test_results_e49; assert_equal("Non-Domestic Electric Heater ", worksheet.results_e49.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f49; assert_in_delta(0.0, (worksheet.results_f49||0), 0.002); end
  def test_results_g49; assert_in_delta(0.0, (worksheet.results_g49||0), 0.002); end
  def test_results_h49; assert_in_delta(0.0, (worksheet.results_h49||0), 0.002); end
  def test_results_i49; assert_in_delta(0.0, (worksheet.results_i49||0), 0.002); end
  def test_results_j49; assert_in_delta(0.0, (worksheet.results_j49||0), 0.002); end
  def test_results_k49; assert_in_delta(0.0, (worksheet.results_k49||0), 0.002); end
  def test_results_l49; assert_in_delta(0.0, (worksheet.results_l49||0), 0.002); end
  def test_results_m49; assert_in_delta(0.0, (worksheet.results_m49||0), 0.002); end
  def test_results_n49; assert_in_delta(0.0, (worksheet.results_n49||0), 0.002); end
  def test_results_o49; assert_in_delta(0.0, (worksheet.results_o49||0), 0.002); end
  def test_results_p49; assert_in_delta(0.0, (worksheet.results_p49||0), 0.002); end
  def test_results_q49; assert_in_delta(0.0, (worksheet.results_q49||0), 0.002); end
  def test_results_r49; assert_in_delta(0.0, (worksheet.results_r49||0), 0.002); end
  def test_results_s49; assert_in_delta(0.0, (worksheet.results_s49||0), 0.002); end
  def test_results_t49; assert_in_delta(0.0, (worksheet.results_t49||0), 0.002); end
  def test_results_u49; assert_in_delta(0.0, (worksheet.results_u49||0), 0.002); end
  def test_results_v49; assert_in_delta(0.0, (worksheet.results_v49||0), 0.002); end
  def test_results_w49; assert_in_delta(0.0, (worksheet.results_w49||0), 0.002); end
  def test_results_e50; assert_equal("Domestic Gas Stove ", worksheet.results_e50.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f50; assert_in_epsilon(2.9274765301711088, worksheet.results_f50, 0.002); end
  def test_results_g50; assert_in_epsilon(3.0292251769810115, worksheet.results_g50, 0.002); end
  def test_results_h50; assert_in_epsilon(3.107049838302372, worksheet.results_h50, 0.002); end
  def test_results_i50; assert_in_epsilon(2.9784713983966014, worksheet.results_i50, 0.002); end
  def test_results_j50; assert_in_epsilon(2.663917187565171, worksheet.results_j50, 0.002); end
  def test_results_k50; assert_in_epsilon(2.353321686300182, worksheet.results_k50, 0.002); end
  def test_results_l50; assert_in_epsilon(2.052648515689095, worksheet.results_l50, 0.002); end
  def test_results_m50; assert_in_epsilon(1.7645033085119957, worksheet.results_m50, 0.002); end
  def test_results_n50; assert_in_epsilon(1.6591277334826475, worksheet.results_n50, 0.002); end
  def test_results_o50; assert_in_epsilon(1.5479293584325513, worksheet.results_o50, 0.002); end
  def test_results_p50; assert_in_epsilon(1.5719205365612399, worksheet.results_p50, 0.002); end
  def test_results_q50; assert_in_epsilon(1.597315131298313, worksheet.results_q50, 0.002); end
  def test_results_r50; assert_in_epsilon(1.6243676092493187, worksheet.results_r50, 0.002); end
  def test_results_s50; assert_in_epsilon(1.6522141731511244, worksheet.results_s50, 0.002); end
  def test_results_t50; assert_in_epsilon(1.6800636973168175, worksheet.results_t50, 0.002); end
  def test_results_u50; assert_in_epsilon(1.707911712328372, worksheet.results_u50, 0.002); end
  def test_results_v50; assert_in_epsilon(1.7362019481988393, worksheet.results_v50, 0.002); end
  def test_results_w50; assert_in_epsilon(1.765082863129586, worksheet.results_w50, 0.002); end
  def test_results_e51; assert_equal("Domestic Electric Stove ", worksheet.results_e51.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f51; assert_in_delta(0.0, (worksheet.results_f51||0), 0.002); end
  def test_results_g51; assert_in_delta(0.0, (worksheet.results_g51||0), 0.002); end
  def test_results_h51; assert_in_delta(0.0, (worksheet.results_h51||0), 0.002); end
  def test_results_i51; assert_in_delta(0.0, (worksheet.results_i51||0), 0.002); end
  def test_results_j51; assert_in_delta(0.0, (worksheet.results_j51||0), 0.002); end
  def test_results_k51; assert_in_delta(0.0, (worksheet.results_k51||0), 0.002); end
  def test_results_l51; assert_in_delta(0.0, (worksheet.results_l51||0), 0.002); end
  def test_results_m51; assert_in_delta(0.0, (worksheet.results_m51||0), 0.002); end
  def test_results_n51; assert_in_delta(0.0, (worksheet.results_n51||0), 0.002); end
  def test_results_o51; assert_in_delta(0.0, (worksheet.results_o51||0), 0.002); end
  def test_results_p51; assert_in_delta(0.0, (worksheet.results_p51||0), 0.002); end
  def test_results_q51; assert_in_delta(0.0, (worksheet.results_q51||0), 0.002); end
  def test_results_r51; assert_in_delta(0.0, (worksheet.results_r51||0), 0.002); end
  def test_results_s51; assert_in_delta(0.0, (worksheet.results_s51||0), 0.002); end
  def test_results_t51; assert_in_delta(0.0, (worksheet.results_t51||0), 0.002); end
  def test_results_u51; assert_in_delta(0.0, (worksheet.results_u51||0), 0.002); end
  def test_results_v51; assert_in_delta(0.0, (worksheet.results_v51||0), 0.002); end
  def test_results_w51; assert_in_delta(0.0, (worksheet.results_w51||0), 0.002); end
  def test_results_e52; assert_equal("Non-Domestic Gas Stove ", worksheet.results_e52.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f52; assert_in_epsilon(3.450351871026432, worksheet.results_f52, 0.002); end
  def test_results_g52; assert_in_epsilon(3.537477579502817, worksheet.results_g52, 0.002); end
  def test_results_h52; assert_in_epsilon(3.5802580703545055, worksheet.results_h52, 0.002); end
  def test_results_i52; assert_in_epsilon(3.394229944693024, worksheet.results_i52, 0.002); end
  def test_results_j52; assert_in_epsilon(3.0090448168652415, worksheet.results_j52, 0.002); end
  def test_results_k52; assert_in_epsilon(2.636803497151705, worksheet.results_k52, 0.002); end
  def test_results_l52; assert_in_epsilon(2.2792779895732944, worksheet.results_l52, 0.002); end
  def test_results_m52; assert_in_epsilon(1.9383435723916995, worksheet.results_m52, 0.002); end
  def test_results_n52; assert_in_epsilon(1.8375747164632683, worksheet.results_n52, 0.002); end
  def test_results_o52; assert_in_epsilon(1.7304808429168201, worksheet.results_o52, 0.002); end
  def test_results_p52; assert_in_epsilon(1.7741776527146829, worksheet.results_p52, 0.002); end
  def test_results_q52; assert_in_epsilon(1.8189778617176429, worksheet.results_q52, 0.002); end
  def test_results_r52; assert_in_epsilon(1.8649093321383288, worksheet.results_r52, 0.002); end
  def test_results_s52; assert_in_epsilon(1.9120006297451546, worksheet.results_s52, 0.002); end
  def test_results_t52; assert_in_epsilon(1.9602810416279823, worksheet.results_t52, 0.002); end
  def test_results_u52; assert_in_epsilon(2.0097805944123937, worksheet.results_u52, 0.002); end
  def test_results_v52; assert_in_epsilon(2.0605300729338922, worksheet.results_v52, 0.002); end
  def test_results_w52; assert_in_epsilon(2.112561039383658, worksheet.results_w52, 0.002); end
  def test_results_e53; assert_equal("Non-Domestic Electric Stove ", worksheet.results_e53.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f53; assert_in_delta(0.0, (worksheet.results_f53||0), 0.002); end
  def test_results_g53; assert_in_delta(0.0, (worksheet.results_g53||0), 0.002); end
  def test_results_h53; assert_in_delta(0.0, (worksheet.results_h53||0), 0.002); end
  def test_results_i53; assert_in_delta(0.0, (worksheet.results_i53||0), 0.002); end
  def test_results_j53; assert_in_delta(0.0, (worksheet.results_j53||0), 0.002); end
  def test_results_k53; assert_in_delta(0.0, (worksheet.results_k53||0), 0.002); end
  def test_results_l53; assert_in_delta(0.0, (worksheet.results_l53||0), 0.002); end
  def test_results_m53; assert_in_delta(0.0, (worksheet.results_m53||0), 0.002); end
  def test_results_n53; assert_in_delta(0.0, (worksheet.results_n53||0), 0.002); end
  def test_results_o53; assert_in_delta(0.0, (worksheet.results_o53||0), 0.002); end
  def test_results_p53; assert_in_delta(0.0, (worksheet.results_p53||0), 0.002); end
  def test_results_q53; assert_in_delta(0.0, (worksheet.results_q53||0), 0.002); end
  def test_results_r53; assert_in_delta(0.0, (worksheet.results_r53||0), 0.002); end
  def test_results_s53; assert_in_delta(0.0, (worksheet.results_s53||0), 0.002); end
  def test_results_t53; assert_in_delta(0.0, (worksheet.results_t53||0), 0.002); end
  def test_results_u53; assert_in_delta(0.0, (worksheet.results_u53||0), 0.002); end
  def test_results_v53; assert_in_delta(0.0, (worksheet.results_v53||0), 0.002); end
  def test_results_w53; assert_in_delta(0.0, (worksheet.results_w53||0), 0.002); end
  def test_results_e54; assert_equal("Domestic Lighting ", worksheet.results_e54.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f54; assert_in_delta(0.0, (worksheet.results_f54||0), 0.002); end
  def test_results_g54; assert_in_delta(0.0, (worksheet.results_g54||0), 0.002); end
  def test_results_h54; assert_in_delta(0.0, (worksheet.results_h54||0), 0.002); end
  def test_results_i54; assert_in_delta(0.0, (worksheet.results_i54||0), 0.002); end
  def test_results_j54; assert_in_delta(0.0, (worksheet.results_j54||0), 0.002); end
  def test_results_k54; assert_in_delta(0.0, (worksheet.results_k54||0), 0.002); end
  def test_results_l54; assert_in_delta(0.0, (worksheet.results_l54||0), 0.002); end
  def test_results_m54; assert_in_delta(0.0, (worksheet.results_m54||0), 0.002); end
  def test_results_n54; assert_in_delta(0.0, (worksheet.results_n54||0), 0.002); end
  def test_results_o54; assert_in_delta(0.0, (worksheet.results_o54||0), 0.002); end
  def test_results_p54; assert_in_delta(0.0, (worksheet.results_p54||0), 0.002); end
  def test_results_q54; assert_in_delta(0.0, (worksheet.results_q54||0), 0.002); end
  def test_results_r54; assert_in_delta(0.0, (worksheet.results_r54||0), 0.002); end
  def test_results_s54; assert_in_delta(0.0, (worksheet.results_s54||0), 0.002); end
  def test_results_t54; assert_in_delta(0.0, (worksheet.results_t54||0), 0.002); end
  def test_results_u54; assert_in_delta(0.0, (worksheet.results_u54||0), 0.002); end
  def test_results_v54; assert_in_delta(0.0, (worksheet.results_v54||0), 0.002); end
  def test_results_w54; assert_in_delta(0.0, (worksheet.results_w54||0), 0.002); end
  def test_results_e55; assert_equal("Non-Domestic Lighting ", worksheet.results_e55.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f55; assert_in_delta(0.0, (worksheet.results_f55||0), 0.002); end
  def test_results_g55; assert_in_delta(0.0, (worksheet.results_g55||0), 0.002); end
  def test_results_h55; assert_in_delta(0.0, (worksheet.results_h55||0), 0.002); end
  def test_results_i55; assert_in_delta(0.0, (worksheet.results_i55||0), 0.002); end
  def test_results_j55; assert_in_delta(0.0, (worksheet.results_j55||0), 0.002); end
  def test_results_k55; assert_in_delta(0.0, (worksheet.results_k55||0), 0.002); end
  def test_results_l55; assert_in_delta(0.0, (worksheet.results_l55||0), 0.002); end
  def test_results_m55; assert_in_delta(0.0, (worksheet.results_m55||0), 0.002); end
  def test_results_n55; assert_in_delta(0.0, (worksheet.results_n55||0), 0.002); end
  def test_results_o55; assert_in_delta(0.0, (worksheet.results_o55||0), 0.002); end
  def test_results_p55; assert_in_delta(0.0, (worksheet.results_p55||0), 0.002); end
  def test_results_q55; assert_in_delta(0.0, (worksheet.results_q55||0), 0.002); end
  def test_results_r55; assert_in_delta(0.0, (worksheet.results_r55||0), 0.002); end
  def test_results_s55; assert_in_delta(0.0, (worksheet.results_s55||0), 0.002); end
  def test_results_t55; assert_in_delta(0.0, (worksheet.results_t55||0), 0.002); end
  def test_results_u55; assert_in_delta(0.0, (worksheet.results_u55||0), 0.002); end
  def test_results_v55; assert_in_delta(0.0, (worksheet.results_v55||0), 0.002); end
  def test_results_w55; assert_in_delta(0.0, (worksheet.results_w55||0), 0.002); end
  def test_results_e56; assert_equal("Domestic Appliances ", worksheet.results_e56.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f56; assert_in_epsilon(1.88328331556766, worksheet.results_f56, 0.002); end
  def test_results_g56; assert_in_epsilon(1.04871338463667, worksheet.results_g56, 0.002); end
  def test_results_h56; assert_in_epsilon(1.11824754259859, worksheet.results_h56, 0.002); end
  def test_results_i56; assert_in_epsilon(1.18245997541111, worksheet.results_i56, 0.002); end
  def test_results_j56; assert_in_epsilon(1.23957686452896, worksheet.results_j56, 0.002); end
  def test_results_k56; assert_in_epsilon(1.23957686452896, worksheet.results_k56, 0.002); end
  def test_results_l56; assert_in_epsilon(1.23957686452896, worksheet.results_l56, 0.002); end
  def test_results_m56; assert_in_epsilon(1.23957686452896, worksheet.results_m56, 0.002); end
  def test_results_n56; assert_in_epsilon(1.23957686452896, worksheet.results_n56, 0.002); end
  def test_results_o56; assert_in_epsilon(1.23957686452896, worksheet.results_o56, 0.002); end
  def test_results_p56; assert_in_epsilon(1.23957686452896, worksheet.results_p56, 0.002); end
  def test_results_q56; assert_in_epsilon(1.23957686452896, worksheet.results_q56, 0.002); end
  def test_results_r56; assert_in_epsilon(1.23957686452896, worksheet.results_r56, 0.002); end
  def test_results_s56; assert_in_epsilon(1.23957686452896, worksheet.results_s56, 0.002); end
  def test_results_t56; assert_in_epsilon(1.23957686452896, worksheet.results_t56, 0.002); end
  def test_results_u56; assert_in_epsilon(1.23957686452896, worksheet.results_u56, 0.002); end
  def test_results_v56; assert_in_epsilon(1.23957686452896, worksheet.results_v56, 0.002); end
  def test_results_w56; assert_in_epsilon(1.23957686452896, worksheet.results_w56, 0.002); end
  def test_results_e57; assert_equal("Non-Domestic Appliances ", worksheet.results_e57.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f57; assert_in_epsilon(14.6911816051795, worksheet.results_f57, 0.002); end
  def test_results_g57; assert_in_epsilon(10.2904069370086, worksheet.results_g57, 0.002); end
  def test_results_h57; assert_in_epsilon(6.52949922146348, worksheet.results_h57, 0.002); end
  def test_results_i57; assert_in_epsilon(3.54680132146847, worksheet.results_i57, 0.002); end
  def test_results_j57; assert_in_epsilon(1.91416249173958, worksheet.results_j57, 0.002); end
  def test_results_k57; assert_in_epsilon(1.91416249173958, worksheet.results_k57, 0.002); end
  def test_results_l57; assert_in_epsilon(1.91416249173958, worksheet.results_l57, 0.002); end
  def test_results_m57; assert_in_epsilon(1.91416249173958, worksheet.results_m57, 0.002); end
  def test_results_n57; assert_in_epsilon(1.91416249173958, worksheet.results_n57, 0.002); end
  def test_results_o57; assert_in_epsilon(1.91416249173958, worksheet.results_o57, 0.002); end
  def test_results_p57; assert_in_epsilon(1.91416249173958, worksheet.results_p57, 0.002); end
  def test_results_q57; assert_in_epsilon(1.91416249173958, worksheet.results_q57, 0.002); end
  def test_results_r57; assert_in_epsilon(1.91416249173958, worksheet.results_r57, 0.002); end
  def test_results_s57; assert_in_epsilon(1.91416249173958, worksheet.results_s57, 0.002); end
  def test_results_t57; assert_in_epsilon(1.91416249173958, worksheet.results_t57, 0.002); end
  def test_results_u57; assert_in_epsilon(1.91416249173958, worksheet.results_u57, 0.002); end
  def test_results_v57; assert_in_epsilon(1.91416249173958, worksheet.results_v57, 0.002); end
  def test_results_w57; assert_in_epsilon(1.91416249173958, worksheet.results_w57, 0.002); end
  def test_results_e58; assert_equal("Domestic Air Conditioning ", worksheet.results_e58.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f58; assert_in_delta(0.0, (worksheet.results_f58||0), 0.002); end
  def test_results_g58; assert_in_delta(0.0, (worksheet.results_g58||0), 0.002); end
  def test_results_h58; assert_in_delta(0.0, (worksheet.results_h58||0), 0.002); end
  def test_results_i58; assert_in_delta(0.0, (worksheet.results_i58||0), 0.002); end
  def test_results_j58; assert_in_delta(0.0, (worksheet.results_j58||0), 0.002); end
  def test_results_k58; assert_in_delta(0.0, (worksheet.results_k58||0), 0.002); end
  def test_results_l58; assert_in_delta(0.0, (worksheet.results_l58||0), 0.002); end
  def test_results_m58; assert_in_delta(0.0, (worksheet.results_m58||0), 0.002); end
  def test_results_n58; assert_in_delta(0.0, (worksheet.results_n58||0), 0.002); end
  def test_results_o58; assert_in_delta(0.0, (worksheet.results_o58||0), 0.002); end
  def test_results_p58; assert_in_delta(0.0, (worksheet.results_p58||0), 0.002); end
  def test_results_q58; assert_in_delta(0.0, (worksheet.results_q58||0), 0.002); end
  def test_results_r58; assert_in_delta(0.0, (worksheet.results_r58||0), 0.002); end
  def test_results_s58; assert_in_delta(0.0, (worksheet.results_s58||0), 0.002); end
  def test_results_t58; assert_in_delta(0.0, (worksheet.results_t58||0), 0.002); end
  def test_results_u58; assert_in_delta(0.0, (worksheet.results_u58||0), 0.002); end
  def test_results_v58; assert_in_delta(0.0, (worksheet.results_v58||0), 0.002); end
  def test_results_w58; assert_in_delta(0.0, (worksheet.results_w58||0), 0.002); end
  def test_results_e59; assert_equal("Non-Domestic Air Conditioning ", worksheet.results_e59.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f59; assert_in_delta(0.0, (worksheet.results_f59||0), 0.002); end
  def test_results_g59; assert_in_delta(0.0, (worksheet.results_g59||0), 0.002); end
  def test_results_h59; assert_in_delta(0.0, (worksheet.results_h59||0), 0.002); end
  def test_results_i59; assert_in_delta(0.0, (worksheet.results_i59||0), 0.002); end
  def test_results_j59; assert_in_delta(0.0, (worksheet.results_j59||0), 0.002); end
  def test_results_k59; assert_in_delta(0.0, (worksheet.results_k59||0), 0.002); end
  def test_results_l59; assert_in_delta(0.0, (worksheet.results_l59||0), 0.002); end
  def test_results_m59; assert_in_delta(0.0, (worksheet.results_m59||0), 0.002); end
  def test_results_n59; assert_in_delta(0.0, (worksheet.results_n59||0), 0.002); end
  def test_results_o59; assert_in_delta(0.0, (worksheet.results_o59||0), 0.002); end
  def test_results_p59; assert_in_delta(0.0, (worksheet.results_p59||0), 0.002); end
  def test_results_q59; assert_in_delta(0.0, (worksheet.results_q59||0), 0.002); end
  def test_results_r59; assert_in_delta(0.0, (worksheet.results_r59||0), 0.002); end
  def test_results_s59; assert_in_delta(0.0, (worksheet.results_s59||0), 0.002); end
  def test_results_t59; assert_in_delta(0.0, (worksheet.results_t59||0), 0.002); end
  def test_results_u59; assert_in_delta(0.0, (worksheet.results_u59||0), 0.002); end
  def test_results_v59; assert_in_delta(0.0, (worksheet.results_v59||0), 0.002); end
  def test_results_w59; assert_in_delta(0.0, (worksheet.results_w59||0), 0.002); end
  def test_results_e60; assert_equal("Heat Network Waste Heat Offtake from Power ", worksheet.results_e60.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f60; assert_in_delta(0.0, (worksheet.results_f60||0), 0.002); end
  def test_results_g60; assert_in_delta(0.0, (worksheet.results_g60||0), 0.002); end
  def test_results_h60; assert_in_delta(0.0, (worksheet.results_h60||0), 0.002); end
  def test_results_i60; assert_in_delta(0.0, (worksheet.results_i60||0), 0.002); end
  def test_results_j60; assert_in_delta(0.0, (worksheet.results_j60||0), 0.002); end
  def test_results_k60; assert_in_delta(0.0, (worksheet.results_k60||0), 0.002); end
  def test_results_l60; assert_in_delta(0.0, (worksheet.results_l60||0), 0.002); end
  def test_results_m60; assert_in_delta(0.0, (worksheet.results_m60||0), 0.002); end
  def test_results_n60; assert_in_delta(0.0, (worksheet.results_n60||0), 0.002); end
  def test_results_o60; assert_in_delta(0.0, (worksheet.results_o60||0), 0.002); end
  def test_results_p60; assert_in_delta(0.0, (worksheet.results_p60||0), 0.002); end
  def test_results_q60; assert_in_delta(0.0, (worksheet.results_q60||0), 0.002); end
  def test_results_r60; assert_in_delta(0.0, (worksheet.results_r60||0), 0.002); end
  def test_results_s60; assert_in_delta(0.0, (worksheet.results_s60||0), 0.002); end
  def test_results_t60; assert_in_delta(0.0, (worksheet.results_t60||0), 0.002); end
  def test_results_u60; assert_in_delta(0.0, (worksheet.results_u60||0), 0.002); end
  def test_results_v60; assert_in_delta(0.0, (worksheet.results_v60||0), 0.002); end
  def test_results_w60; assert_in_delta(0.0, (worksheet.results_w60||0), 0.002); end
  def test_results_e61; assert_equal("Heat Network Heat Pump Water Source ", worksheet.results_e61.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f61; assert_in_delta(0.0, (worksheet.results_f61||0), 0.002); end
  def test_results_g61; assert_in_delta(0.0, (worksheet.results_g61||0), 0.002); end
  def test_results_h61; assert_in_delta(0.0, (worksheet.results_h61||0), 0.002); end
  def test_results_i61; assert_in_delta(0.0, (worksheet.results_i61||0), 0.002); end
  def test_results_j61; assert_in_delta(0.0, (worksheet.results_j61||0), 0.002); end
  def test_results_k61; assert_in_delta(0.0, (worksheet.results_k61||0), 0.002); end
  def test_results_l61; assert_in_delta(0.0, (worksheet.results_l61||0), 0.002); end
  def test_results_m61; assert_in_delta(0.0, (worksheet.results_m61||0), 0.002); end
  def test_results_n61; assert_in_delta(0.0, (worksheet.results_n61||0), 0.002); end
  def test_results_o61; assert_in_delta(0.0, (worksheet.results_o61||0), 0.002); end
  def test_results_p61; assert_in_delta(0.0, (worksheet.results_p61||0), 0.002); end
  def test_results_q61; assert_in_delta(0.0, (worksheet.results_q61||0), 0.002); end
  def test_results_r61; assert_in_delta(0.0, (worksheet.results_r61||0), 0.002); end
  def test_results_s61; assert_in_delta(0.0, (worksheet.results_s61||0), 0.002); end
  def test_results_t61; assert_in_delta(0.0, (worksheet.results_t61||0), 0.002); end
  def test_results_u61; assert_in_delta(0.0, (worksheet.results_u61||0), 0.002); end
  def test_results_v61; assert_in_delta(0.0, (worksheet.results_v61||0), 0.002); end
  def test_results_w61; assert_in_delta(0.0, (worksheet.results_w61||0), 0.002); end
  def test_results_e62; assert_equal("Heat Network Heat Pump Ground Source ", worksheet.results_e62.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f62; assert_in_delta(0.0, (worksheet.results_f62||0), 0.002); end
  def test_results_g62; assert_in_delta(0.0, (worksheet.results_g62||0), 0.002); end
  def test_results_h62; assert_in_delta(0.0, (worksheet.results_h62||0), 0.002); end
  def test_results_i62; assert_in_delta(0.0, (worksheet.results_i62||0), 0.002); end
  def test_results_j62; assert_in_delta(0.0, (worksheet.results_j62||0), 0.002); end
  def test_results_k62; assert_in_delta(0.0, (worksheet.results_k62||0), 0.002); end
  def test_results_l62; assert_in_delta(0.0, (worksheet.results_l62||0), 0.002); end
  def test_results_m62; assert_in_delta(0.0, (worksheet.results_m62||0), 0.002); end
  def test_results_n62; assert_in_delta(0.0, (worksheet.results_n62||0), 0.002); end
  def test_results_o62; assert_in_delta(0.0, (worksheet.results_o62||0), 0.002); end
  def test_results_p62; assert_in_delta(0.0, (worksheet.results_p62||0), 0.002); end
  def test_results_q62; assert_in_delta(0.0, (worksheet.results_q62||0), 0.002); end
  def test_results_r62; assert_in_delta(0.0, (worksheet.results_r62||0), 0.002); end
  def test_results_s62; assert_in_delta(0.0, (worksheet.results_s62||0), 0.002); end
  def test_results_t62; assert_in_delta(0.0, (worksheet.results_t62||0), 0.002); end
  def test_results_u62; assert_in_delta(0.0, (worksheet.results_u62||0), 0.002); end
  def test_results_v62; assert_in_delta(0.0, (worksheet.results_v62||0), 0.002); end
  def test_results_w62; assert_in_delta(0.0, (worksheet.results_w62||0), 0.002); end
  def test_results_e63; assert_equal("Heat Network Biomass CHP ", worksheet.results_e63.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f63; assert_in_delta(0.09924086000047816, worksheet.results_f63, 0.002); end
  def test_results_g63; assert_in_delta(0.09924086000047816, worksheet.results_g63, 0.002); end
  def test_results_h63; assert_in_delta(0.43180372592632443, worksheet.results_h63, 0.002); end
  def test_results_i63; assert_in_delta(0.5178361304012347, worksheet.results_i63, 0.002); end
  def test_results_j63; assert_in_delta(0.27346402391975316, worksheet.results_j63, 0.002); end
  def test_results_k63; assert_in_delta(0.029091917438271688, worksheet.results_k63, 0.002); end
  def test_results_l63; assert_in_delta(0.0, (worksheet.results_l63||0), 0.002); end
  def test_results_m63; assert_in_delta(0.0, (worksheet.results_m63||0), 0.002); end
  def test_results_n63; assert_in_delta(7.441578217834731e-17, worksheet.results_n63, 0.002); end
  def test_results_o63; assert_in_delta(-7.441578217834731e-17, worksheet.results_o63, 0.002); end
  def test_results_p63; assert_in_delta(7.441578217834731e-17, worksheet.results_p63, 0.002); end
  def test_results_q63; assert_in_delta(-7.441578217834731e-17, worksheet.results_q63, 0.002); end
  def test_results_r63; assert_in_delta(0.0, (worksheet.results_r63||0), 0.002); end
  def test_results_s63; assert_in_delta(7.441578217834731e-17, worksheet.results_s63, 0.002); end
  def test_results_t63; assert_in_delta(0.0, (worksheet.results_t63||0), 0.002); end
  def test_results_u63; assert_in_delta(7.441578217834731e-17, worksheet.results_u63, 0.002); end
  def test_results_v63; assert_in_delta(0.0, (worksheet.results_v63||0), 0.002); end
  def test_results_w63; assert_in_delta(0.0, (worksheet.results_w63||0), 0.002); end
  def test_results_e64; assert_equal("Heat Network Gas CHP ", worksheet.results_e64.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f64; assert_in_epsilon(11.21235872695641, worksheet.results_f64, 0.002); end
  def test_results_g64; assert_in_epsilon(12.89460214891471, worksheet.results_g64, 0.002); end
  def test_results_h64; assert_in_epsilon(4.6715982089885015, worksheet.results_h64, 0.002); end
  def test_results_i64; assert_in_delta(0.0, (worksheet.results_i64||0), 0.002); end
  def test_results_j64; assert_in_delta(0.0, (worksheet.results_j64||0), 0.002); end
  def test_results_k64; assert_in_delta(0.0, (worksheet.results_k64||0), 0.002); end
  def test_results_l64; assert_in_delta(0.0, (worksheet.results_l64||0), 0.002); end
  def test_results_m64; assert_in_delta(0.0, (worksheet.results_m64||0), 0.002); end
  def test_results_n64; assert_in_delta(0.0, (worksheet.results_n64||0), 0.002); end
  def test_results_o64; assert_in_delta(0.0, (worksheet.results_o64||0), 0.002); end
  def test_results_p64; assert_in_delta(0.0, (worksheet.results_p64||0), 0.002); end
  def test_results_q64; assert_in_delta(0.0, (worksheet.results_q64||0), 0.002); end
  def test_results_r64; assert_in_delta(0.0, (worksheet.results_r64||0), 0.002); end
  def test_results_s64; assert_in_delta(0.0, (worksheet.results_s64||0), 0.002); end
  def test_results_t64; assert_in_delta(0.0, (worksheet.results_t64||0), 0.002); end
  def test_results_u64; assert_in_delta(0.0, (worksheet.results_u64||0), 0.002); end
  def test_results_v64; assert_in_delta(0.0, (worksheet.results_v64||0), 0.002); end
  def test_results_w64; assert_in_delta(0.0, (worksheet.results_w64||0), 0.002); end
  def test_results_e65; assert_equal("Gas Grid Distribution All Types ", worksheet.results_e65.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f65; assert_in_epsilon(14.526829661964548, worksheet.results_f65, 0.002); end
  def test_results_g65; assert_in_epsilon(16.31334161813321, worksheet.results_g65, 0.002); end
  def test_results_h65; assert_in_epsilon(14.978200731814326, worksheet.results_h65, 0.002); end
  def test_results_i65; assert_in_epsilon(13.146506217951032, worksheet.results_i65, 0.002); end
  def test_results_j65; assert_in_epsilon(10.60267258478709, worksheet.results_j65, 0.002); end
  def test_results_k65; assert_in_epsilon(8.191253854028666, worksheet.results_k65, 0.002); end
  def test_results_l65; assert_in_epsilon(6.097629795742718, worksheet.results_l65, 0.002); end
  def test_results_m65; assert_in_epsilon(4.360954417054294, worksheet.results_m65, 0.002); end
  def test_results_n65; assert_in_epsilon(3.9748668521101664, worksheet.results_n65, 0.002); end
  def test_results_o65; assert_in_epsilon(3.6389254252324994, worksheet.results_o65, 0.002); end
  def test_results_p65; assert_in_epsilon(3.6049695400003694, worksheet.results_p65, 0.002); end
  def test_results_q65; assert_in_epsilon(3.571881078157531, worksheet.results_q65, 0.002); end
  def test_results_r65; assert_in_epsilon(3.5779424683062384, worksheet.results_r65, 0.002); end
  def test_results_s65; assert_in_epsilon(3.584730088221861, worksheet.results_s65, 0.002); end
  def test_results_t65; assert_in_epsilon(3.592028016810906, worksheet.results_t65, 0.002); end
  def test_results_u65; assert_in_epsilon(3.599849752561418, worksheet.results_u65, 0.002); end
  def test_results_v65; assert_in_epsilon(3.6083407846722446, worksheet.results_v65, 0.002); end
  def test_results_w65; assert_in_epsilon(3.6175603015489486, worksheet.results_w65, 0.002); end
  def test_results_e66; assert_equal("Gas Grid Transmission All Types ", worksheet.results_e66.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f66; assert_in_epsilon(12.477180032913884, worksheet.results_f66, 0.002); end
  def test_results_g66; assert_in_epsilon(12.830963143295822, worksheet.results_g66, 0.002); end
  def test_results_h66; assert_in_epsilon(11.526650803657589, worksheet.results_h66, 0.002); end
  def test_results_i66; assert_in_epsilon(9.958589305459673, worksheet.results_i66, 0.002); end
  def test_results_j66; assert_in_epsilon(7.88133765757809, worksheet.results_j66, 0.002); end
  def test_results_k66; assert_in_epsilon(5.939884796717406, worksheet.results_k66, 0.002); end
  def test_results_l66; assert_in_epsilon(4.431473576012041, worksheet.results_l66, 0.002); end
  def test_results_m66; assert_in_epsilon(3.244780020731158, worksheet.results_m66, 0.002); end
  def test_results_n66; assert_in_epsilon(2.8016501078117657, worksheet.results_n66, 0.002); end
  def test_results_o66; assert_in_epsilon(2.4910906434780893, worksheet.results_o66, 0.002); end
  def test_results_p66; assert_in_epsilon(2.393305944290221, worksheet.results_p66, 0.002); end
  def test_results_q66; assert_in_epsilon(2.2959819852447185, worksheet.results_q66, 0.002); end
  def test_results_r66; assert_in_epsilon(2.2992015499860727, worksheet.results_r66, 0.002); end
  def test_results_s66; assert_in_epsilon(2.302806858540991, worksheet.results_s66, 0.002); end
  def test_results_t66; assert_in_epsilon(2.3066832223772815, worksheet.results_t66, 0.002); end
  def test_results_u66; assert_in_epsilon(2.3108378113445935, worksheet.results_u66, 0.002); end
  def test_results_v66; assert_in_epsilon(2.3153479034077895, worksheet.results_v66, 0.002); end
  def test_results_w66; assert_in_epsilon(2.320244937048614, worksheet.results_w66, 0.002); end
  def test_results_e67; assert_equal("Car Electric ", worksheet.results_e67.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f67; assert_in_delta(0.0, (worksheet.results_f67||0), 0.002); end
  def test_results_g67; assert_in_delta(0.0, (worksheet.results_g67||0), 0.002); end
  def test_results_h67; assert_in_delta(0.0, (worksheet.results_h67||0), 0.002); end
  def test_results_i67; assert_in_delta(0.0, (worksheet.results_i67||0), 0.002); end
  def test_results_j67; assert_in_delta(0.0, (worksheet.results_j67||0), 0.002); end
  def test_results_k67; assert_in_delta(0.0, (worksheet.results_k67||0), 0.002); end
  def test_results_l67; assert_in_delta(0.0, (worksheet.results_l67||0), 0.002); end
  def test_results_m67; assert_in_delta(0.0, (worksheet.results_m67||0), 0.002); end
  def test_results_n67; assert_in_delta(0.0, (worksheet.results_n67||0), 0.002); end
  def test_results_o67; assert_in_delta(0.0, (worksheet.results_o67||0), 0.002); end
  def test_results_p67; assert_in_delta(0.0, (worksheet.results_p67||0), 0.002); end
  def test_results_q67; assert_in_delta(0.0, (worksheet.results_q67||0), 0.002); end
  def test_results_r67; assert_in_delta(0.0, (worksheet.results_r67||0), 0.002); end
  def test_results_s67; assert_in_delta(0.0, (worksheet.results_s67||0), 0.002); end
  def test_results_t67; assert_in_delta(0.0, (worksheet.results_t67||0), 0.002); end
  def test_results_u67; assert_in_delta(0.0, (worksheet.results_u67||0), 0.002); end
  def test_results_v67; assert_in_delta(0.0, (worksheet.results_v67||0), 0.002); end
  def test_results_w67; assert_in_delta(0.0, (worksheet.results_w67||0), 0.002); end
  def test_results_e68; assert_equal("Car Hydrogen ", worksheet.results_e68.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f68; assert_in_delta(0.0, (worksheet.results_f68||0), 0.002); end
  def test_results_g68; assert_in_delta(0.0, (worksheet.results_g68||0), 0.002); end
  def test_results_h68; assert_in_delta(0.0, (worksheet.results_h68||0), 0.002); end
  def test_results_i68; assert_in_delta(0.0, (worksheet.results_i68||0), 0.002); end
  def test_results_j68; assert_in_delta(0.0, (worksheet.results_j68||0), 0.002); end
  def test_results_k68; assert_in_delta(0.0, (worksheet.results_k68||0), 0.002); end
  def test_results_l68; assert_in_delta(0.0, (worksheet.results_l68||0), 0.002); end
  def test_results_m68; assert_in_delta(0.0, (worksheet.results_m68||0), 0.002); end
  def test_results_n68; assert_in_delta(0.0, (worksheet.results_n68||0), 0.002); end
  def test_results_o68; assert_in_delta(0.0, (worksheet.results_o68||0), 0.002); end
  def test_results_p68; assert_in_delta(0.0, (worksheet.results_p68||0), 0.002); end
  def test_results_q68; assert_in_delta(0.0, (worksheet.results_q68||0), 0.002); end
  def test_results_r68; assert_in_delta(0.0, (worksheet.results_r68||0), 0.002); end
  def test_results_s68; assert_in_delta(0.0, (worksheet.results_s68||0), 0.002); end
  def test_results_t68; assert_in_delta(0.0, (worksheet.results_t68||0), 0.002); end
  def test_results_u68; assert_in_delta(0.0, (worksheet.results_u68||0), 0.002); end
  def test_results_v68; assert_in_delta(0.0, (worksheet.results_v68||0), 0.002); end
  def test_results_w68; assert_in_delta(0.0, (worksheet.results_w68||0), 0.002); end
  def test_results_e69; assert_equal("Car Plug-in Hybrid Electric Vehicle ", worksheet.results_e69.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f69; assert_in_delta(0.43574906731164714, worksheet.results_f69, 0.002); end
  def test_results_g69; assert_in_delta(0.4094104115618428, worksheet.results_g69, 0.002); end
  def test_results_h69; assert_in_epsilon(3.053955201446044, worksheet.results_h69, 0.002); end
  def test_results_i69; assert_in_epsilon(5.643805311162076, worksheet.results_i69, 0.002); end
  def test_results_j69; assert_in_epsilon(7.867757561249739, worksheet.results_j69, 0.002); end
  def test_results_k69; assert_in_epsilon(3.664759158023485, worksheet.results_k69, 0.002); end
  def test_results_l69; assert_in_epsilon(1.8624901788336932, worksheet.results_l69, 0.002); end
  def test_results_m69; assert_in_delta(0.0, (worksheet.results_m69||0), 0.002); end
  def test_results_n69; assert_in_delta(0.0, (worksheet.results_n69||0), 0.002); end
  def test_results_o69; assert_in_delta(0.0, (worksheet.results_o69||0), 0.002); end
  def test_results_p69; assert_in_delta(0.0, (worksheet.results_p69||0), 0.002); end
  def test_results_q69; assert_in_delta(0.0, (worksheet.results_q69||0), 0.002); end
  def test_results_r69; assert_in_delta(0.0, (worksheet.results_r69||0), 0.002); end
  def test_results_s69; assert_in_delta(0.0, (worksheet.results_s69||0), 0.002); end
  def test_results_t69; assert_in_delta(0.0, (worksheet.results_t69||0), 0.002); end
  def test_results_u69; assert_in_delta(0.0, (worksheet.results_u69||0), 0.002); end
  def test_results_v69; assert_in_delta(0.0, (worksheet.results_v69||0), 0.002); end
  def test_results_w69; assert_in_delta(0.0, (worksheet.results_w69||0), 0.002); end
  def test_results_e70; assert_equal("Car Internal Combustion Engine ", worksheet.results_e70.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f70; assert_in_epsilon(79.44548893302635, worksheet.results_f70, 0.002); end
  def test_results_g70; assert_in_epsilon(71.5862552651352, worksheet.results_g70, 0.002); end
  def test_results_h70; assert_in_epsilon(44.62653040729231, worksheet.results_h70, 0.002); end
  def test_results_i70; assert_in_epsilon(19.978994330547334, worksheet.results_i70, 0.002); end
  def test_results_j70; assert_in_delta(0.0, (worksheet.results_j70||0), 0.002); end
  def test_results_k70; assert_in_delta(0.0, (worksheet.results_k70||0), 0.002); end
  def test_results_l70; assert_in_delta(0.0, (worksheet.results_l70||0), 0.002); end
  def test_results_m70; assert_in_delta(0.0, (worksheet.results_m70||0), 0.002); end
  def test_results_n70; assert_in_delta(0.0, (worksheet.results_n70||0), 0.002); end
  def test_results_o70; assert_in_delta(0.0, (worksheet.results_o70||0), 0.002); end
  def test_results_p70; assert_in_delta(0.0, (worksheet.results_p70||0), 0.002); end
  def test_results_q70; assert_in_delta(0.0, (worksheet.results_q70||0), 0.002); end
  def test_results_r70; assert_in_delta(0.0, (worksheet.results_r70||0), 0.002); end
  def test_results_s70; assert_in_delta(0.0, (worksheet.results_s70||0), 0.002); end
  def test_results_t70; assert_in_delta(0.0, (worksheet.results_t70||0), 0.002); end
  def test_results_u70; assert_in_delta(0.0, (worksheet.results_u70||0), 0.002); end
  def test_results_v70; assert_in_delta(0.0, (worksheet.results_v70||0), 0.002); end
  def test_results_w70; assert_in_delta(0.0, (worksheet.results_w70||0), 0.002); end
  def test_results_e71; assert_equal("LGV (van) Electric ", worksheet.results_e71.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f71; assert_in_delta(0.0, (worksheet.results_f71||0), 0.002); end
  def test_results_g71; assert_in_delta(0.0, (worksheet.results_g71||0), 0.002); end
  def test_results_h71; assert_in_delta(0.0, (worksheet.results_h71||0), 0.002); end
  def test_results_i71; assert_in_delta(0.0, (worksheet.results_i71||0), 0.002); end
  def test_results_j71; assert_in_delta(0.0, (worksheet.results_j71||0), 0.002); end
  def test_results_k71; assert_in_delta(0.0, (worksheet.results_k71||0), 0.002); end
  def test_results_l71; assert_in_delta(0.0, (worksheet.results_l71||0), 0.002); end
  def test_results_m71; assert_in_delta(0.0, (worksheet.results_m71||0), 0.002); end
  def test_results_n71; assert_in_delta(0.0, (worksheet.results_n71||0), 0.002); end
  def test_results_o71; assert_in_delta(0.0, (worksheet.results_o71||0), 0.002); end
  def test_results_p71; assert_in_delta(0.0, (worksheet.results_p71||0), 0.002); end
  def test_results_q71; assert_in_delta(0.0, (worksheet.results_q71||0), 0.002); end
  def test_results_r71; assert_in_delta(0.0, (worksheet.results_r71||0), 0.002); end
  def test_results_s71; assert_in_delta(0.0, (worksheet.results_s71||0), 0.002); end
  def test_results_t71; assert_in_delta(0.0, (worksheet.results_t71||0), 0.002); end
  def test_results_u71; assert_in_delta(0.0, (worksheet.results_u71||0), 0.002); end
  def test_results_v71; assert_in_delta(0.0, (worksheet.results_v71||0), 0.002); end
  def test_results_w71; assert_in_delta(0.0, (worksheet.results_w71||0), 0.002); end
  def test_results_e72; assert_equal("LGV (van) Hydrogen ", worksheet.results_e72.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f72; assert_in_delta(0.0, (worksheet.results_f72||0), 0.002); end
  def test_results_g72; assert_in_delta(0.0, (worksheet.results_g72||0), 0.002); end
  def test_results_h72; assert_in_delta(0.0, (worksheet.results_h72||0), 0.002); end
  def test_results_i72; assert_in_delta(0.0, (worksheet.results_i72||0), 0.002); end
  def test_results_j72; assert_in_delta(0.0, (worksheet.results_j72||0), 0.002); end
  def test_results_k72; assert_in_delta(0.0, (worksheet.results_k72||0), 0.002); end
  def test_results_l72; assert_in_delta(0.0, (worksheet.results_l72||0), 0.002); end
  def test_results_m72; assert_in_delta(0.0, (worksheet.results_m72||0), 0.002); end
  def test_results_n72; assert_in_delta(0.0, (worksheet.results_n72||0), 0.002); end
  def test_results_o72; assert_in_delta(0.0, (worksheet.results_o72||0), 0.002); end
  def test_results_p72; assert_in_delta(0.0, (worksheet.results_p72||0), 0.002); end
  def test_results_q72; assert_in_delta(0.0, (worksheet.results_q72||0), 0.002); end
  def test_results_r72; assert_in_delta(0.0, (worksheet.results_r72||0), 0.002); end
  def test_results_s72; assert_in_delta(0.0, (worksheet.results_s72||0), 0.002); end
  def test_results_t72; assert_in_delta(0.0, (worksheet.results_t72||0), 0.002); end
  def test_results_u72; assert_in_delta(0.0, (worksheet.results_u72||0), 0.002); end
  def test_results_v72; assert_in_delta(0.0, (worksheet.results_v72||0), 0.002); end
  def test_results_w72; assert_in_delta(0.0, (worksheet.results_w72||0), 0.002); end
  def test_results_e73; assert_equal("LGV (van) Plug-in Hybrid Electric Vehicle ", worksheet.results_e73.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f73; assert_in_delta(0.07634151997965176, worksheet.results_f73, 0.002); end
  def test_results_g73; assert_in_delta(0.06300519973783565, worksheet.results_g73, 0.002); end
  def test_results_h73; assert_in_delta(0.5170193400958447, worksheet.results_h73, 0.002); end
  def test_results_i73; assert_in_delta(0.9959616690399034, worksheet.results_i73, 0.002); end
  def test_results_j73; assert_in_epsilon(1.4596538878667837, worksheet.results_j73, 0.002); end
  def test_results_k73; assert_in_delta(0.7162544035453671, worksheet.results_k73, 0.002); end
  def test_results_l73; assert_in_delta(0.38278077208699746, worksheet.results_l73, 0.002); end
  def test_results_m73; assert_in_delta(0.0, (worksheet.results_m73||0), 0.002); end
  def test_results_n73; assert_in_delta(0.0, (worksheet.results_n73||0), 0.002); end
  def test_results_o73; assert_in_delta(0.0, (worksheet.results_o73||0), 0.002); end
  def test_results_p73; assert_in_delta(0.0, (worksheet.results_p73||0), 0.002); end
  def test_results_q73; assert_in_delta(0.0, (worksheet.results_q73||0), 0.002); end
  def test_results_r73; assert_in_delta(0.0, (worksheet.results_r73||0), 0.002); end
  def test_results_s73; assert_in_delta(0.0, (worksheet.results_s73||0), 0.002); end
  def test_results_t73; assert_in_delta(0.0, (worksheet.results_t73||0), 0.002); end
  def test_results_u73; assert_in_delta(0.0, (worksheet.results_u73||0), 0.002); end
  def test_results_v73; assert_in_delta(0.0, (worksheet.results_v73||0), 0.002); end
  def test_results_w73; assert_in_delta(0.0, (worksheet.results_w73||0), 0.002); end
  def test_results_e74; assert_equal("LGV (van) Internal Combustion Engine ", worksheet.results_e74.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f74; assert_in_epsilon(14.149449355738513, worksheet.results_f74, 0.002); end
  def test_results_g74; assert_in_epsilon(11.251752235017547, worksheet.results_g74, 0.002); end
  def test_results_h74; assert_in_epsilon(7.814638563338151, worksheet.results_h74, 0.002); end
  def test_results_i74; assert_in_epsilon(3.6827634854323876, worksheet.results_i74, 0.002); end
  def test_results_j74; assert_in_delta(0.0, (worksheet.results_j74||0), 0.002); end
  def test_results_k74; assert_in_delta(0.0, (worksheet.results_k74||0), 0.002); end
  def test_results_l74; assert_in_delta(0.0, (worksheet.results_l74||0), 0.002); end
  def test_results_m74; assert_in_delta(0.0, (worksheet.results_m74||0), 0.002); end
  def test_results_n74; assert_in_delta(0.0, (worksheet.results_n74||0), 0.002); end
  def test_results_o74; assert_in_delta(0.0, (worksheet.results_o74||0), 0.002); end
  def test_results_p74; assert_in_delta(0.0, (worksheet.results_p74||0), 0.002); end
  def test_results_q74; assert_in_delta(0.0, (worksheet.results_q74||0), 0.002); end
  def test_results_r74; assert_in_delta(0.0, (worksheet.results_r74||0), 0.002); end
  def test_results_s74; assert_in_delta(0.0, (worksheet.results_s74||0), 0.002); end
  def test_results_t74; assert_in_delta(0.0, (worksheet.results_t74||0), 0.002); end
  def test_results_u74; assert_in_delta(0.0, (worksheet.results_u74||0), 0.002); end
  def test_results_v74; assert_in_delta(0.0, (worksheet.results_v74||0), 0.002); end
  def test_results_w74; assert_in_delta(0.0, (worksheet.results_w74||0), 0.002); end
  def test_results_e75; assert_equal("HGV _Rigid Electric ", worksheet.results_e75.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f75; assert_in_delta(0.0, (worksheet.results_f75||0), 0.002); end
  def test_results_g75; assert_in_delta(0.0, (worksheet.results_g75||0), 0.002); end
  def test_results_h75; assert_in_delta(0.0, (worksheet.results_h75||0), 0.002); end
  def test_results_i75; assert_in_delta(0.0, (worksheet.results_i75||0), 0.002); end
  def test_results_j75; assert_in_delta(0.0, (worksheet.results_j75||0), 0.002); end
  def test_results_k75; assert_in_delta(0.0, (worksheet.results_k75||0), 0.002); end
  def test_results_l75; assert_in_delta(0.0, (worksheet.results_l75||0), 0.002); end
  def test_results_m75; assert_in_delta(0.0, (worksheet.results_m75||0), 0.002); end
  def test_results_n75; assert_in_delta(0.0, (worksheet.results_n75||0), 0.002); end
  def test_results_o75; assert_in_delta(0.0, (worksheet.results_o75||0), 0.002); end
  def test_results_p75; assert_in_delta(0.0, (worksheet.results_p75||0), 0.002); end
  def test_results_q75; assert_in_delta(0.0, (worksheet.results_q75||0), 0.002); end
  def test_results_r75; assert_in_delta(0.0, (worksheet.results_r75||0), 0.002); end
  def test_results_s75; assert_in_delta(0.0, (worksheet.results_s75||0), 0.002); end
  def test_results_t75; assert_in_delta(0.0, (worksheet.results_t75||0), 0.002); end
  def test_results_u75; assert_in_delta(0.0, (worksheet.results_u75||0), 0.002); end
  def test_results_v75; assert_in_delta(0.0, (worksheet.results_v75||0), 0.002); end
  def test_results_w75; assert_in_delta(0.0, (worksheet.results_w75||0), 0.002); end
  def test_results_e76; assert_equal("HGV _Rigid Hydrogen ", worksheet.results_e76.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f76; assert_in_delta(0.0, (worksheet.results_f76||0), 0.002); end
  def test_results_g76; assert_in_delta(0.0, (worksheet.results_g76||0), 0.002); end
  def test_results_h76; assert_in_delta(0.0, (worksheet.results_h76||0), 0.002); end
  def test_results_i76; assert_in_delta(0.0, (worksheet.results_i76||0), 0.002); end
  def test_results_j76; assert_in_delta(0.0, (worksheet.results_j76||0), 0.002); end
  def test_results_k76; assert_in_delta(0.0, (worksheet.results_k76||0), 0.002); end
  def test_results_l76; assert_in_delta(0.0, (worksheet.results_l76||0), 0.002); end
  def test_results_m76; assert_in_delta(0.0, (worksheet.results_m76||0), 0.002); end
  def test_results_n76; assert_in_delta(0.0, (worksheet.results_n76||0), 0.002); end
  def test_results_o76; assert_in_delta(0.0, (worksheet.results_o76||0), 0.002); end
  def test_results_p76; assert_in_delta(0.0, (worksheet.results_p76||0), 0.002); end
  def test_results_q76; assert_in_delta(0.0, (worksheet.results_q76||0), 0.002); end
  def test_results_r76; assert_in_delta(0.0, (worksheet.results_r76||0), 0.002); end
  def test_results_s76; assert_in_delta(0.0, (worksheet.results_s76||0), 0.002); end
  def test_results_t76; assert_in_delta(0.0, (worksheet.results_t76||0), 0.002); end
  def test_results_u76; assert_in_delta(0.0, (worksheet.results_u76||0), 0.002); end
  def test_results_v76; assert_in_delta(0.0, (worksheet.results_v76||0), 0.002); end
  def test_results_w76; assert_in_delta(0.0, (worksheet.results_w76||0), 0.002); end
  def test_results_e77; assert_equal("HGV _Rigid Plug-in Hybrid Electric Vehicle ", worksheet.results_e77.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f77; assert_in_delta(0.17824196230604433, worksheet.results_f77, 0.002); end
  def test_results_g77; assert_in_delta(0.17930241018142545, worksheet.results_g77, 0.002); end
  def test_results_h77; assert_in_epsilon(1.2579039338232918, worksheet.results_h77, 0.002); end
  def test_results_i77; assert_in_epsilon(2.225806387255339, worksheet.results_i77, 0.002); end
  def test_results_j77; assert_in_epsilon(2.8668004311580373, worksheet.results_j77, 0.002); end
  def test_results_k77; assert_in_epsilon(1.2440059333351572, worksheet.results_k77, 0.002); end
  def test_results_l77; assert_in_delta(0.6230246084682721, worksheet.results_l77, 0.002); end
  def test_results_m77; assert_in_delta(0.0, (worksheet.results_m77||0), 0.002); end
  def test_results_n77; assert_in_delta(0.0, (worksheet.results_n77||0), 0.002); end
  def test_results_o77; assert_in_delta(0.0, (worksheet.results_o77||0), 0.002); end
  def test_results_p77; assert_in_delta(0.0, (worksheet.results_p77||0), 0.002); end
  def test_results_q77; assert_in_delta(0.0, (worksheet.results_q77||0), 0.002); end
  def test_results_r77; assert_in_delta(0.0, (worksheet.results_r77||0), 0.002); end
  def test_results_s77; assert_in_delta(0.0, (worksheet.results_s77||0), 0.002); end
  def test_results_t77; assert_in_delta(0.0, (worksheet.results_t77||0), 0.002); end
  def test_results_u77; assert_in_delta(0.0, (worksheet.results_u77||0), 0.002); end
  def test_results_v77; assert_in_delta(0.0, (worksheet.results_v77||0), 0.002); end
  def test_results_w77; assert_in_delta(0.0, (worksheet.results_w77||0), 0.002); end
  def test_results_e78; assert_equal("HGV _Rigid Internal Combustion Engine ", worksheet.results_e78.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f78; assert_in_epsilon(9.811532203799343, worksheet.results_f78, 0.002); end
  def test_results_g78; assert_in_epsilon(9.716387590837018, worksheet.results_g78, 0.002); end
  def test_results_h78; assert_in_epsilon(5.976361695930594, worksheet.results_h78, 0.002); end
  def test_results_i78; assert_in_epsilon(2.677549350260118, worksheet.results_i78, 0.002); end
  def test_results_j78; assert_in_delta(0.0, (worksheet.results_j78||0), 0.002); end
  def test_results_k78; assert_in_delta(0.0, (worksheet.results_k78||0), 0.002); end
  def test_results_l78; assert_in_delta(0.0, (worksheet.results_l78||0), 0.002); end
  def test_results_m78; assert_in_delta(0.0, (worksheet.results_m78||0), 0.002); end
  def test_results_n78; assert_in_delta(0.0, (worksheet.results_n78||0), 0.002); end
  def test_results_o78; assert_in_delta(0.0, (worksheet.results_o78||0), 0.002); end
  def test_results_p78; assert_in_delta(0.0, (worksheet.results_p78||0), 0.002); end
  def test_results_q78; assert_in_delta(0.0, (worksheet.results_q78||0), 0.002); end
  def test_results_r78; assert_in_delta(0.0, (worksheet.results_r78||0), 0.002); end
  def test_results_s78; assert_in_delta(0.0, (worksheet.results_s78||0), 0.002); end
  def test_results_t78; assert_in_delta(0.0, (worksheet.results_t78||0), 0.002); end
  def test_results_u78; assert_in_delta(0.0, (worksheet.results_u78||0), 0.002); end
  def test_results_v78; assert_in_delta(0.0, (worksheet.results_v78||0), 0.002); end
  def test_results_w78; assert_in_delta(0.0, (worksheet.results_w78||0), 0.002); end
  def test_results_e79; assert_equal("HGV _Articulated Electric ", worksheet.results_e79.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f79; assert_in_delta(0.0, (worksheet.results_f79||0), 0.002); end
  def test_results_g79; assert_in_delta(0.0, (worksheet.results_g79||0), 0.002); end
  def test_results_h79; assert_in_delta(0.0, (worksheet.results_h79||0), 0.002); end
  def test_results_i79; assert_in_delta(0.0, (worksheet.results_i79||0), 0.002); end
  def test_results_j79; assert_in_delta(0.0, (worksheet.results_j79||0), 0.002); end
  def test_results_k79; assert_in_delta(0.0, (worksheet.results_k79||0), 0.002); end
  def test_results_l79; assert_in_delta(0.0, (worksheet.results_l79||0), 0.002); end
  def test_results_m79; assert_in_delta(0.0, (worksheet.results_m79||0), 0.002); end
  def test_results_n79; assert_in_delta(0.0, (worksheet.results_n79||0), 0.002); end
  def test_results_o79; assert_in_delta(0.0, (worksheet.results_o79||0), 0.002); end
  def test_results_p79; assert_in_delta(0.0, (worksheet.results_p79||0), 0.002); end
  def test_results_q79; assert_in_delta(0.0, (worksheet.results_q79||0), 0.002); end
  def test_results_r79; assert_in_delta(0.0, (worksheet.results_r79||0), 0.002); end
  def test_results_s79; assert_in_delta(0.0, (worksheet.results_s79||0), 0.002); end
  def test_results_t79; assert_in_delta(0.0, (worksheet.results_t79||0), 0.002); end
  def test_results_u79; assert_in_delta(0.0, (worksheet.results_u79||0), 0.002); end
  def test_results_v79; assert_in_delta(0.0, (worksheet.results_v79||0), 0.002); end
  def test_results_w79; assert_in_delta(0.0, (worksheet.results_w79||0), 0.002); end
  def test_results_e80; assert_equal("HGV _Articulated Hydrogen ", worksheet.results_e80.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f80; assert_in_delta(0.0, (worksheet.results_f80||0), 0.002); end
  def test_results_g80; assert_in_delta(0.0, (worksheet.results_g80||0), 0.002); end
  def test_results_h80; assert_in_delta(0.0, (worksheet.results_h80||0), 0.002); end
  def test_results_i80; assert_in_delta(0.0, (worksheet.results_i80||0), 0.002); end
  def test_results_j80; assert_in_delta(0.0, (worksheet.results_j80||0), 0.002); end
  def test_results_k80; assert_in_delta(0.0, (worksheet.results_k80||0), 0.002); end
  def test_results_l80; assert_in_delta(0.0, (worksheet.results_l80||0), 0.002); end
  def test_results_m80; assert_in_delta(0.0, (worksheet.results_m80||0), 0.002); end
  def test_results_n80; assert_in_delta(0.0, (worksheet.results_n80||0), 0.002); end
  def test_results_o80; assert_in_delta(0.0, (worksheet.results_o80||0), 0.002); end
  def test_results_p80; assert_in_delta(0.0, (worksheet.results_p80||0), 0.002); end
  def test_results_q80; assert_in_delta(0.0, (worksheet.results_q80||0), 0.002); end
  def test_results_r80; assert_in_delta(0.0, (worksheet.results_r80||0), 0.002); end
  def test_results_s80; assert_in_delta(0.0, (worksheet.results_s80||0), 0.002); end
  def test_results_t80; assert_in_delta(0.0, (worksheet.results_t80||0), 0.002); end
  def test_results_u80; assert_in_delta(0.0, (worksheet.results_u80||0), 0.002); end
  def test_results_v80; assert_in_delta(0.0, (worksheet.results_v80||0), 0.002); end
  def test_results_w80; assert_in_delta(0.0, (worksheet.results_w80||0), 0.002); end
  def test_results_e81; assert_equal("HGV _Articulated Plug-in Hybrid Electric Vehicle ", worksheet.results_e81.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f81; assert_in_delta(0.1745732030481716, worksheet.results_f81, 0.002); end
  def test_results_g81; assert_in_delta(0.17191952777367178, worksheet.results_g81, 0.002); end
  def test_results_h81; assert_in_epsilon(1.197014124134419, worksheet.results_h81, 0.002); end
  def test_results_i81; assert_in_epsilon(2.099014192874656, worksheet.results_i81, 0.002); end
  def test_results_j81; assert_in_epsilon(3.0851377744625834, worksheet.results_j81, 0.002); end
  def test_results_k81; assert_in_epsilon(2.498365259808508, worksheet.results_k81, 0.002); end
  def test_results_l81; assert_in_epsilon(1.2341399650372704, worksheet.results_l81, 0.002); end
  def test_results_m81; assert_in_delta(0.0, (worksheet.results_m81||0), 0.002); end
  def test_results_n81; assert_in_delta(0.0, (worksheet.results_n81||0), 0.002); end
  def test_results_o81; assert_in_delta(0.0, (worksheet.results_o81||0), 0.002); end
  def test_results_p81; assert_in_delta(0.0, (worksheet.results_p81||0), 0.002); end
  def test_results_q81; assert_in_delta(0.0, (worksheet.results_q81||0), 0.002); end
  def test_results_r81; assert_in_delta(0.0, (worksheet.results_r81||0), 0.002); end
  def test_results_s81; assert_in_delta(0.0, (worksheet.results_s81||0), 0.002); end
  def test_results_t81; assert_in_delta(0.0, (worksheet.results_t81||0), 0.002); end
  def test_results_u81; assert_in_delta(0.0, (worksheet.results_u81||0), 0.002); end
  def test_results_v81; assert_in_delta(0.0, (worksheet.results_v81||0), 0.002); end
  def test_results_w81; assert_in_delta(0.0, (worksheet.results_w81||0), 0.002); end
  def test_results_e82; assert_equal("HGV _Articulated Internal Combustion Engine ", worksheet.results_e82.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f82; assert_in_epsilon(8.938455784971504, worksheet.results_f82, 0.002); end
  def test_results_g82; assert_in_epsilon(8.745013991731396, worksheet.results_g82, 0.002); end
  def test_results_h82; assert_in_epsilon(5.664282288499209, worksheet.results_h82, 0.002); end
  def test_results_i82; assert_in_epsilon(3.001781695281233, worksheet.results_i82, 0.002); end
  def test_results_j82; assert_in_delta(0.6751202848695618, worksheet.results_j82, 0.002); end
  def test_results_k82; assert_in_delta(0.0, (worksheet.results_k82||0), 0.002); end
  def test_results_l82; assert_in_delta(0.0, (worksheet.results_l82||0), 0.002); end
  def test_results_m82; assert_in_delta(0.0, (worksheet.results_m82||0), 0.002); end
  def test_results_n82; assert_in_delta(0.0, (worksheet.results_n82||0), 0.002); end
  def test_results_o82; assert_in_delta(0.0, (worksheet.results_o82||0), 0.002); end
  def test_results_p82; assert_in_delta(0.0, (worksheet.results_p82||0), 0.002); end
  def test_results_q82; assert_in_delta(0.0, (worksheet.results_q82||0), 0.002); end
  def test_results_r82; assert_in_delta(0.0, (worksheet.results_r82||0), 0.002); end
  def test_results_s82; assert_in_delta(0.0, (worksheet.results_s82||0), 0.002); end
  def test_results_t82; assert_in_delta(0.0, (worksheet.results_t82||0), 0.002); end
  def test_results_u82; assert_in_delta(0.0, (worksheet.results_u82||0), 0.002); end
  def test_results_v82; assert_in_delta(0.0, (worksheet.results_v82||0), 0.002); end
  def test_results_w82; assert_in_delta(0.0, (worksheet.results_w82||0), 0.002); end
  def test_results_e83; assert_equal("Bus Electric ", worksheet.results_e83.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f83; assert_in_delta(0.0, (worksheet.results_f83||0), 0.002); end
  def test_results_g83; assert_in_delta(0.0, (worksheet.results_g83||0), 0.002); end
  def test_results_h83; assert_in_delta(0.0, (worksheet.results_h83||0), 0.002); end
  def test_results_i83; assert_in_delta(0.0, (worksheet.results_i83||0), 0.002); end
  def test_results_j83; assert_in_delta(0.0, (worksheet.results_j83||0), 0.002); end
  def test_results_k83; assert_in_delta(0.0, (worksheet.results_k83||0), 0.002); end
  def test_results_l83; assert_in_delta(0.0, (worksheet.results_l83||0), 0.002); end
  def test_results_m83; assert_in_delta(0.0, (worksheet.results_m83||0), 0.002); end
  def test_results_n83; assert_in_delta(0.0, (worksheet.results_n83||0), 0.002); end
  def test_results_o83; assert_in_delta(0.0, (worksheet.results_o83||0), 0.002); end
  def test_results_p83; assert_in_delta(0.0, (worksheet.results_p83||0), 0.002); end
  def test_results_q83; assert_in_delta(0.0, (worksheet.results_q83||0), 0.002); end
  def test_results_r83; assert_in_delta(0.0, (worksheet.results_r83||0), 0.002); end
  def test_results_s83; assert_in_delta(0.0, (worksheet.results_s83||0), 0.002); end
  def test_results_t83; assert_in_delta(0.0, (worksheet.results_t83||0), 0.002); end
  def test_results_u83; assert_in_delta(0.0, (worksheet.results_u83||0), 0.002); end
  def test_results_v83; assert_in_delta(0.0, (worksheet.results_v83||0), 0.002); end
  def test_results_w83; assert_in_delta(0.0, (worksheet.results_w83||0), 0.002); end
  def test_results_e84; assert_equal("Bus Hydrogen ", worksheet.results_e84.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f84; assert_in_delta(0.0, (worksheet.results_f84||0), 0.002); end
  def test_results_g84; assert_in_delta(0.0, (worksheet.results_g84||0), 0.002); end
  def test_results_h84; assert_in_delta(0.0, (worksheet.results_h84||0), 0.002); end
  def test_results_i84; assert_in_delta(0.0, (worksheet.results_i84||0), 0.002); end
  def test_results_j84; assert_in_delta(0.0, (worksheet.results_j84||0), 0.002); end
  def test_results_k84; assert_in_delta(0.0, (worksheet.results_k84||0), 0.002); end
  def test_results_l84; assert_in_delta(0.0, (worksheet.results_l84||0), 0.002); end
  def test_results_m84; assert_in_delta(0.0, (worksheet.results_m84||0), 0.002); end
  def test_results_n84; assert_in_delta(0.0, (worksheet.results_n84||0), 0.002); end
  def test_results_o84; assert_in_delta(0.0, (worksheet.results_o84||0), 0.002); end
  def test_results_p84; assert_in_delta(0.0, (worksheet.results_p84||0), 0.002); end
  def test_results_q84; assert_in_delta(0.0, (worksheet.results_q84||0), 0.002); end
  def test_results_r84; assert_in_delta(0.0, (worksheet.results_r84||0), 0.002); end
  def test_results_s84; assert_in_delta(0.0, (worksheet.results_s84||0), 0.002); end
  def test_results_t84; assert_in_delta(0.0, (worksheet.results_t84||0), 0.002); end
  def test_results_u84; assert_in_delta(0.0, (worksheet.results_u84||0), 0.002); end
  def test_results_v84; assert_in_delta(0.0, (worksheet.results_v84||0), 0.002); end
  def test_results_w84; assert_in_delta(0.0, (worksheet.results_w84||0), 0.002); end
  def test_results_e85; assert_equal("Bus Plug-in Hybrid Electric Vehicle ", worksheet.results_e85.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f85; assert_in_delta(0.07031708679958541, worksheet.results_f85, 0.002); end
  def test_results_g85; assert_in_delta(0.0745974198836928, worksheet.results_g85, 0.002); end
  def test_results_h85; assert_in_delta(0.5768076405076508, worksheet.results_h85, 0.002); end
  def test_results_i85; assert_in_epsilon(1.1025198175095712, worksheet.results_i85, 0.002); end
  def test_results_j85; assert_in_epsilon(1.687413773304529, worksheet.results_j85, 0.002); end
  def test_results_k85; assert_in_epsilon(1.4041250157819314, worksheet.results_k85, 0.002); end
  def test_results_l85; assert_in_delta(0.7301236127520518, worksheet.results_l85, 0.002); end
  def test_results_m85; assert_in_delta(0.0, (worksheet.results_m85||0), 0.002); end
  def test_results_n85; assert_in_delta(0.0, (worksheet.results_n85||0), 0.002); end
  def test_results_o85; assert_in_delta(0.0, (worksheet.results_o85||0), 0.002); end
  def test_results_p85; assert_in_delta(0.0, (worksheet.results_p85||0), 0.002); end
  def test_results_q85; assert_in_delta(0.0, (worksheet.results_q85||0), 0.002); end
  def test_results_r85; assert_in_delta(0.0, (worksheet.results_r85||0), 0.002); end
  def test_results_s85; assert_in_delta(0.0, (worksheet.results_s85||0), 0.002); end
  def test_results_t85; assert_in_delta(0.0, (worksheet.results_t85||0), 0.002); end
  def test_results_u85; assert_in_delta(0.0, (worksheet.results_u85||0), 0.002); end
  def test_results_v85; assert_in_delta(0.0, (worksheet.results_v85||0), 0.002); end
  def test_results_w85; assert_in_delta(0.0, (worksheet.results_w85||0), 0.002); end
  def test_results_e86; assert_equal("Bus Internal Combustion Engine ", worksheet.results_e86.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f86; assert_in_epsilon(3.8706842804327124, worksheet.results_f86, 0.002); end
  def test_results_g86; assert_in_epsilon(4.042430016043687, worksheet.results_g86, 0.002); end
  def test_results_h86; assert_in_epsilon(2.9168947909396428, worksheet.results_h86, 0.002); end
  def test_results_i86; assert_in_epsilon(1.6893448816678913, worksheet.results_i86, 0.002); end
  def test_results_j86; assert_in_delta(0.39696373196219903, worksheet.results_j86, 0.002); end
  def test_results_k86; assert_in_delta(0.0, (worksheet.results_k86||0), 0.002); end
  def test_results_l86; assert_in_delta(0.0, (worksheet.results_l86||0), 0.002); end
  def test_results_m86; assert_in_delta(0.0, (worksheet.results_m86||0), 0.002); end
  def test_results_n86; assert_in_delta(0.0, (worksheet.results_n86||0), 0.002); end
  def test_results_o86; assert_in_delta(0.0, (worksheet.results_o86||0), 0.002); end
  def test_results_p86; assert_in_delta(0.0, (worksheet.results_p86||0), 0.002); end
  def test_results_q86; assert_in_delta(0.0, (worksheet.results_q86||0), 0.002); end
  def test_results_r86; assert_in_delta(0.0, (worksheet.results_r86||0), 0.002); end
  def test_results_s86; assert_in_delta(0.0, (worksheet.results_s86||0), 0.002); end
  def test_results_t86; assert_in_delta(0.0, (worksheet.results_t86||0), 0.002); end
  def test_results_u86; assert_in_delta(0.0, (worksheet.results_u86||0), 0.002); end
  def test_results_v86; assert_in_delta(0.0, (worksheet.results_v86||0), 0.002); end
  def test_results_w86; assert_in_delta(0.0, (worksheet.results_w86||0), 0.002); end
  def test_results_e87; assert_equal("Train Passenger Electric ", worksheet.results_e87.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f87; assert_in_delta(0.0, (worksheet.results_f87||0), 0.002); end
  def test_results_g87; assert_in_delta(0.0, (worksheet.results_g87||0), 0.002); end
  def test_results_h87; assert_in_delta(0.0, (worksheet.results_h87||0), 0.002); end
  def test_results_i87; assert_in_delta(0.0, (worksheet.results_i87||0), 0.002); end
  def test_results_j87; assert_in_delta(0.0, (worksheet.results_j87||0), 0.002); end
  def test_results_k87; assert_in_delta(0.0, (worksheet.results_k87||0), 0.002); end
  def test_results_l87; assert_in_delta(0.0, (worksheet.results_l87||0), 0.002); end
  def test_results_m87; assert_in_delta(0.0, (worksheet.results_m87||0), 0.002); end
  def test_results_n87; assert_in_delta(0.0, (worksheet.results_n87||0), 0.002); end
  def test_results_o87; assert_in_delta(0.0, (worksheet.results_o87||0), 0.002); end
  def test_results_p87; assert_in_delta(0.0, (worksheet.results_p87||0), 0.002); end
  def test_results_q87; assert_in_delta(0.0, (worksheet.results_q87||0), 0.002); end
  def test_results_r87; assert_in_delta(0.0, (worksheet.results_r87||0), 0.002); end
  def test_results_s87; assert_in_delta(0.0, (worksheet.results_s87||0), 0.002); end
  def test_results_t87; assert_in_delta(0.0, (worksheet.results_t87||0), 0.002); end
  def test_results_u87; assert_in_delta(0.0, (worksheet.results_u87||0), 0.002); end
  def test_results_v87; assert_in_delta(0.0, (worksheet.results_v87||0), 0.002); end
  def test_results_w87; assert_in_delta(0.0, (worksheet.results_w87||0), 0.002); end
  def test_results_e88; assert_equal("Train Passenger Internal Combustion Engine ", worksheet.results_e88.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f88; assert_in_delta(0.5500731381216691, worksheet.results_f88, 0.002); end
  def test_results_g88; assert_in_delta(0.5639531562312852, worksheet.results_g88, 0.002); end
  def test_results_h88; assert_in_delta(0.5500108033965385, worksheet.results_h88, 0.002); end
  def test_results_i88; assert_in_delta(0.5306154218649904, worksheet.results_i88, 0.002); end
  def test_results_j88; assert_in_delta(0.5093498224833923, worksheet.results_j88, 0.002); end
  def test_results_k88; assert_in_delta(0.4833625965734646, worksheet.results_k88, 0.002); end
  def test_results_l88; assert_in_delta(0.457105718029231, worksheet.results_l88, 0.002); end
  def test_results_m88; assert_in_delta(0.4307649619037583, worksheet.results_m88, 0.002); end
  def test_results_n88; assert_in_delta(0.43804000710534197, worksheet.results_n88, 0.002); end
  def test_results_o88; assert_in_delta(0.444931968738943, worksheet.results_o88, 0.002); end
  def test_results_p88; assert_in_delta(0.45182791787190163, worksheet.results_p88, 0.002); end
  def test_results_q88; assert_in_delta(0.4591272606811464, worksheet.results_q88, 0.002); end
  def test_results_r88; assert_in_delta(0.4669031402511262, worksheet.results_r88, 0.002); end
  def test_results_s88; assert_in_delta(0.4749072694007868, worksheet.results_s88, 0.002); end
  def test_results_t88; assert_in_delta(0.4829122494394315, worksheet.results_t88, 0.002); end
  def test_results_u88; assert_in_delta(0.4909167956915352, worksheet.results_u88, 0.002); end
  def test_results_v88; assert_in_delta(0.4990484525228793, worksheet.results_v88, 0.002); end
  def test_results_w88; assert_in_delta(0.5073498922940914, worksheet.results_w88, 0.002); end
  def test_results_e89; assert_equal("Train Freight Electric ", worksheet.results_e89.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f89; assert_in_delta(0.0, (worksheet.results_f89||0), 0.002); end
  def test_results_g89; assert_in_delta(0.0, (worksheet.results_g89||0), 0.002); end
  def test_results_h89; assert_in_delta(0.0, (worksheet.results_h89||0), 0.002); end
  def test_results_i89; assert_in_delta(0.0, (worksheet.results_i89||0), 0.002); end
  def test_results_j89; assert_in_delta(0.0, (worksheet.results_j89||0), 0.002); end
  def test_results_k89; assert_in_delta(0.0, (worksheet.results_k89||0), 0.002); end
  def test_results_l89; assert_in_delta(0.0, (worksheet.results_l89||0), 0.002); end
  def test_results_m89; assert_in_delta(0.0, (worksheet.results_m89||0), 0.002); end
  def test_results_n89; assert_in_delta(0.0, (worksheet.results_n89||0), 0.002); end
  def test_results_o89; assert_in_delta(0.0, (worksheet.results_o89||0), 0.002); end
  def test_results_p89; assert_in_delta(0.0, (worksheet.results_p89||0), 0.002); end
  def test_results_q89; assert_in_delta(0.0, (worksheet.results_q89||0), 0.002); end
  def test_results_r89; assert_in_delta(0.0, (worksheet.results_r89||0), 0.002); end
  def test_results_s89; assert_in_delta(0.0, (worksheet.results_s89||0), 0.002); end
  def test_results_t89; assert_in_delta(0.0, (worksheet.results_t89||0), 0.002); end
  def test_results_u89; assert_in_delta(0.0, (worksheet.results_u89||0), 0.002); end
  def test_results_v89; assert_in_delta(0.0, (worksheet.results_v89||0), 0.002); end
  def test_results_w89; assert_in_delta(0.0, (worksheet.results_w89||0), 0.002); end
  def test_results_e90; assert_equal("Train Freight Internal Combustion Engine ", worksheet.results_e90.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f90; assert_in_epsilon(1.5215763635840474, worksheet.results_f90, 0.002); end
  def test_results_g90; assert_in_epsilon(1.7794943549207438, worksheet.results_g90, 0.002); end
  def test_results_h90; assert_in_epsilon(1.8941480588050619, worksheet.results_h90, 0.002); end
  def test_results_i90; assert_in_epsilon(1.99301313976178, worksheet.results_i90, 0.002); end
  def test_results_j90; assert_in_epsilon(2.0412289969603363, worksheet.results_j90, 0.002); end
  def test_results_k90; assert_in_epsilon(2.002174654553639, worksheet.results_k90, 0.002); end
  def test_results_l90; assert_in_epsilon(1.9634921739624789, worksheet.results_l90, 0.002); end
  def test_results_m90; assert_in_epsilon(1.9251815551868539, worksheet.results_m90, 0.002); end
  def test_results_n90; assert_in_epsilon(1.9251815551868539, worksheet.results_n90, 0.002); end
  def test_results_o90; assert_in_epsilon(1.9251815551868539, worksheet.results_o90, 0.002); end
  def test_results_p90; assert_in_epsilon(1.9251815551868539, worksheet.results_p90, 0.002); end
  def test_results_q90; assert_in_epsilon(1.9251815551868539, worksheet.results_q90, 0.002); end
  def test_results_r90; assert_in_epsilon(1.9251815551868539, worksheet.results_r90, 0.002); end
  def test_results_s90; assert_in_epsilon(1.9251815551868539, worksheet.results_s90, 0.002); end
  def test_results_t90; assert_in_epsilon(1.9251815551868539, worksheet.results_t90, 0.002); end
  def test_results_u90; assert_in_epsilon(1.9251815551868539, worksheet.results_u90, 0.002); end
  def test_results_v90; assert_in_epsilon(1.9251815551868539, worksheet.results_v90, 0.002); end
  def test_results_w90; assert_in_epsilon(1.9251815551868539, worksheet.results_w90, 0.002); end
  def test_results_e91; assert_equal("Non-Road Mobile Machinery Internal Combustion Engine ", worksheet.results_e91.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f91; assert_in_delta(0.00013969824239987847, worksheet.results_f91, 0.002); end
  def test_results_g91; assert_in_delta(0.00013969824239987847, worksheet.results_g91, 0.002); end
  def test_results_h91; assert_in_delta(0.00013854416554654614, worksheet.results_h91, 0.002); end
  def test_results_i91; assert_in_delta(0.00013739008869321384, worksheet.results_i91, 0.002); end
  def test_results_j91; assert_in_delta(0.0001362360118398815, worksheet.results_j91, 0.002); end
  def test_results_k91; assert_in_delta(0.00013508193498654918, worksheet.results_k91, 0.002); end
  def test_results_l91; assert_in_delta(0.00013392785813321688, worksheet.results_l91, 0.002); end
  def test_results_m91; assert_in_delta(0.00013277378127988452, worksheet.results_m91, 0.002); end
  def test_results_n91; assert_in_delta(0.00013277378127988452, worksheet.results_n91, 0.002); end
  def test_results_o91; assert_in_delta(0.00013277378127988452, worksheet.results_o91, 0.002); end
  def test_results_p91; assert_in_delta(0.00013277378127988452, worksheet.results_p91, 0.002); end
  def test_results_q91; assert_in_delta(0.00013277378127988452, worksheet.results_q91, 0.002); end
  def test_results_r91; assert_in_delta(0.00013277378127988452, worksheet.results_r91, 0.002); end
  def test_results_s91; assert_in_delta(0.00013277378127988452, worksheet.results_s91, 0.002); end
  def test_results_t91; assert_in_delta(0.00013277378127988452, worksheet.results_t91, 0.002); end
  def test_results_u91; assert_in_delta(0.00013277378127988452, worksheet.results_u91, 0.002); end
  def test_results_v91; assert_in_delta(0.00013277378127988452, worksheet.results_v91, 0.002); end
  def test_results_w91; assert_in_delta(0.00013277378127988452, worksheet.results_w91, 0.002); end
  def test_results_e92; assert_equal("Shipping Domestic Internal Combustion Engine ", worksheet.results_e92.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f92; assert_in_epsilon(1.235606157630203, worksheet.results_f92, 0.002); end
  def test_results_g92; assert_in_epsilon(1.1079989585619847, worksheet.results_g92, 0.002); end
  def test_results_h92; assert_in_delta(0.9768752323581723, worksheet.results_h92, 0.002); end
  def test_results_i92; assert_in_delta(0.8177634882138837, worksheet.results_i92, 0.002); end
  def test_results_j92; assert_in_delta(0.737127450333529, worksheet.results_j92, 0.002); end
  def test_results_k92; assert_in_delta(0.6877904209400816, worksheet.results_k92, 0.002); end
  def test_results_l92; assert_in_delta(0.6434838955447321, worksheet.results_l92, 0.002); end
  def test_results_m92; assert_in_delta(0.5986476442278306, worksheet.results_m92, 0.002); end
  def test_results_n92; assert_in_delta(0.5986476442278306, worksheet.results_n92, 0.002); end
  def test_results_o92; assert_in_delta(0.5986476442278306, worksheet.results_o92, 0.002); end
  def test_results_p92; assert_in_delta(0.5986476442278306, worksheet.results_p92, 0.002); end
  def test_results_q92; assert_in_delta(0.5986476442278306, worksheet.results_q92, 0.002); end
  def test_results_r92; assert_in_delta(0.5986476442278306, worksheet.results_r92, 0.002); end
  def test_results_s92; assert_in_delta(0.5986476442278306, worksheet.results_s92, 0.002); end
  def test_results_t92; assert_in_delta(0.5986476442278306, worksheet.results_t92, 0.002); end
  def test_results_u92; assert_in_delta(0.5986476442278306, worksheet.results_u92, 0.002); end
  def test_results_v92; assert_in_delta(0.5986476442278306, worksheet.results_v92, 0.002); end
  def test_results_w92; assert_in_delta(0.5986476442278306, worksheet.results_w92, 0.002); end
  def test_results_e93; assert_equal("Shipping International Internal Combustion Engine ", worksheet.results_e93.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f93; assert_in_epsilon(9.0972596970779, worksheet.results_f93, 0.002); end
  def test_results_g93; assert_in_epsilon(8.829462686634699, worksheet.results_g93, 0.002); end
  def test_results_h93; assert_in_epsilon(8.2060091636953, worksheet.results_h93, 0.002); end
  def test_results_i93; assert_in_epsilon(8.234243065357111, worksheet.results_i93, 0.002); end
  def test_results_j93; assert_in_epsilon(7.7773205715859675, worksheet.results_j93, 0.002); end
  def test_results_k93; assert_in_epsilon(7.456785598016119, worksheet.results_k93, 0.002); end
  def test_results_l93; assert_in_epsilon(7.103557918766534, worksheet.results_l93, 0.002); end
  def test_results_m93; assert_in_epsilon(7.139048366719577, worksheet.results_m93, 0.002); end
  def test_results_n93; assert_in_epsilon(7.139048366719577, worksheet.results_n93, 0.002); end
  def test_results_o93; assert_in_epsilon(7.139048366719577, worksheet.results_o93, 0.002); end
  def test_results_p93; assert_in_epsilon(7.139048366719577, worksheet.results_p93, 0.002); end
  def test_results_q93; assert_in_epsilon(7.139048366719577, worksheet.results_q93, 0.002); end
  def test_results_r93; assert_in_epsilon(7.139048366719577, worksheet.results_r93, 0.002); end
  def test_results_s93; assert_in_epsilon(7.139048366719577, worksheet.results_s93, 0.002); end
  def test_results_t93; assert_in_epsilon(7.139048366719577, worksheet.results_t93, 0.002); end
  def test_results_u93; assert_in_epsilon(7.139048366719577, worksheet.results_u93, 0.002); end
  def test_results_v93; assert_in_epsilon(7.139048366719577, worksheet.results_v93, 0.002); end
  def test_results_w93; assert_in_epsilon(7.139048366719577, worksheet.results_w93, 0.002); end
  def test_results_e94; assert_equal("Light Duty Vehicles Electric Refuelling Infrastructure ", worksheet.results_e94.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f94; assert_in_delta(0.0, (worksheet.results_f94||0), 0.002); end
  def test_results_g94; assert_in_delta(0.0, (worksheet.results_g94||0), 0.002); end
  def test_results_h94; assert_in_delta(0.0, (worksheet.results_h94||0), 0.002); end
  def test_results_i94; assert_in_delta(0.0, (worksheet.results_i94||0), 0.002); end
  def test_results_j94; assert_in_delta(0.0, (worksheet.results_j94||0), 0.002); end
  def test_results_k94; assert_in_delta(0.0, (worksheet.results_k94||0), 0.002); end
  def test_results_l94; assert_in_delta(0.0, (worksheet.results_l94||0), 0.002); end
  def test_results_m94; assert_in_delta(0.0, (worksheet.results_m94||0), 0.002); end
  def test_results_n94; assert_in_delta(0.0, (worksheet.results_n94||0), 0.002); end
  def test_results_o94; assert_in_delta(0.0, (worksheet.results_o94||0), 0.002); end
  def test_results_p94; assert_in_delta(0.0, (worksheet.results_p94||0), 0.002); end
  def test_results_q94; assert_in_delta(0.0, (worksheet.results_q94||0), 0.002); end
  def test_results_r94; assert_in_delta(0.0, (worksheet.results_r94||0), 0.002); end
  def test_results_s94; assert_in_delta(0.0, (worksheet.results_s94||0), 0.002); end
  def test_results_t94; assert_in_delta(0.0, (worksheet.results_t94||0), 0.002); end
  def test_results_u94; assert_in_delta(0.0, (worksheet.results_u94||0), 0.002); end
  def test_results_v94; assert_in_delta(0.0, (worksheet.results_v94||0), 0.002); end
  def test_results_w94; assert_in_delta(0.0, (worksheet.results_w94||0), 0.002); end
  def test_results_e95; assert_equal("HGV _Articulated Electric Refuelling Infrastructure ", worksheet.results_e95.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f95; assert_in_delta(0.0, (worksheet.results_f95||0), 0.002); end
  def test_results_g95; assert_in_delta(0.0, (worksheet.results_g95||0), 0.002); end
  def test_results_h95; assert_in_delta(0.0, (worksheet.results_h95||0), 0.002); end
  def test_results_i95; assert_in_delta(0.0, (worksheet.results_i95||0), 0.002); end
  def test_results_j95; assert_in_delta(0.0, (worksheet.results_j95||0), 0.002); end
  def test_results_k95; assert_in_delta(0.0, (worksheet.results_k95||0), 0.002); end
  def test_results_l95; assert_in_delta(0.0, (worksheet.results_l95||0), 0.002); end
  def test_results_m95; assert_in_delta(0.0, (worksheet.results_m95||0), 0.002); end
  def test_results_n95; assert_in_delta(0.0, (worksheet.results_n95||0), 0.002); end
  def test_results_o95; assert_in_delta(0.0, (worksheet.results_o95||0), 0.002); end
  def test_results_p95; assert_in_delta(0.0, (worksheet.results_p95||0), 0.002); end
  def test_results_q95; assert_in_delta(0.0, (worksheet.results_q95||0), 0.002); end
  def test_results_r95; assert_in_delta(0.0, (worksheet.results_r95||0), 0.002); end
  def test_results_s95; assert_in_delta(0.0, (worksheet.results_s95||0), 0.002); end
  def test_results_t95; assert_in_delta(0.0, (worksheet.results_t95||0), 0.002); end
  def test_results_u95; assert_in_delta(0.0, (worksheet.results_u95||0), 0.002); end
  def test_results_v95; assert_in_delta(0.0, (worksheet.results_v95||0), 0.002); end
  def test_results_w95; assert_in_delta(0.0, (worksheet.results_w95||0), 0.002); end
  def test_results_e96; assert_equal("Bus Electric Refuelling Infrastructure ", worksheet.results_e96.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f96; assert_in_delta(0.0, (worksheet.results_f96||0), 0.002); end
  def test_results_g96; assert_in_delta(0.0, (worksheet.results_g96||0), 0.002); end
  def test_results_h96; assert_in_delta(0.0, (worksheet.results_h96||0), 0.002); end
  def test_results_i96; assert_in_delta(0.0, (worksheet.results_i96||0), 0.002); end
  def test_results_j96; assert_in_delta(0.0, (worksheet.results_j96||0), 0.002); end
  def test_results_k96; assert_in_delta(0.0, (worksheet.results_k96||0), 0.002); end
  def test_results_l96; assert_in_delta(0.0, (worksheet.results_l96||0), 0.002); end
  def test_results_m96; assert_in_delta(0.0, (worksheet.results_m96||0), 0.002); end
  def test_results_n96; assert_in_delta(0.0, (worksheet.results_n96||0), 0.002); end
  def test_results_o96; assert_in_delta(0.0, (worksheet.results_o96||0), 0.002); end
  def test_results_p96; assert_in_delta(0.0, (worksheet.results_p96||0), 0.002); end
  def test_results_q96; assert_in_delta(0.0, (worksheet.results_q96||0), 0.002); end
  def test_results_r96; assert_in_delta(0.0, (worksheet.results_r96||0), 0.002); end
  def test_results_s96; assert_in_delta(0.0, (worksheet.results_s96||0), 0.002); end
  def test_results_t96; assert_in_delta(0.0, (worksheet.results_t96||0), 0.002); end
  def test_results_u96; assert_in_delta(0.0, (worksheet.results_u96||0), 0.002); end
  def test_results_v96; assert_in_delta(0.0, (worksheet.results_v96||0), 0.002); end
  def test_results_w96; assert_in_delta(0.0, (worksheet.results_w96||0), 0.002); end
  def test_results_e97; assert_equal("Light Duty Vehicles Hydrogen Refuelling Infrastructure ", worksheet.results_e97.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f97; assert_in_delta(0.0, (worksheet.results_f97||0), 0.002); end
  def test_results_g97; assert_in_delta(0.0, (worksheet.results_g97||0), 0.002); end
  def test_results_h97; assert_in_delta(0.0, (worksheet.results_h97||0), 0.002); end
  def test_results_i97; assert_in_delta(0.0, (worksheet.results_i97||0), 0.002); end
  def test_results_j97; assert_in_delta(0.0, (worksheet.results_j97||0), 0.002); end
  def test_results_k97; assert_in_delta(0.0, (worksheet.results_k97||0), 0.002); end
  def test_results_l97; assert_in_delta(0.0, (worksheet.results_l97||0), 0.002); end
  def test_results_m97; assert_in_delta(0.0, (worksheet.results_m97||0), 0.002); end
  def test_results_n97; assert_in_delta(0.0, (worksheet.results_n97||0), 0.002); end
  def test_results_o97; assert_in_delta(0.0, (worksheet.results_o97||0), 0.002); end
  def test_results_p97; assert_in_delta(0.0, (worksheet.results_p97||0), 0.002); end
  def test_results_q97; assert_in_delta(0.0, (worksheet.results_q97||0), 0.002); end
  def test_results_r97; assert_in_delta(0.0, (worksheet.results_r97||0), 0.002); end
  def test_results_s97; assert_in_delta(0.0, (worksheet.results_s97||0), 0.002); end
  def test_results_t97; assert_in_delta(0.0, (worksheet.results_t97||0), 0.002); end
  def test_results_u97; assert_in_delta(0.0, (worksheet.results_u97||0), 0.002); end
  def test_results_v97; assert_in_delta(0.0, (worksheet.results_v97||0), 0.002); end
  def test_results_w97; assert_in_delta(0.0, (worksheet.results_w97||0), 0.002); end
  def test_results_e98; assert_equal("HGV _Articulated Hydrogen Refuelling Infrastructure ", worksheet.results_e98.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f98; assert_in_delta(0.0, (worksheet.results_f98||0), 0.002); end
  def test_results_g98; assert_in_delta(0.0, (worksheet.results_g98||0), 0.002); end
  def test_results_h98; assert_in_delta(0.0, (worksheet.results_h98||0), 0.002); end
  def test_results_i98; assert_in_delta(0.0, (worksheet.results_i98||0), 0.002); end
  def test_results_j98; assert_in_delta(0.0, (worksheet.results_j98||0), 0.002); end
  def test_results_k98; assert_in_delta(0.0, (worksheet.results_k98||0), 0.002); end
  def test_results_l98; assert_in_delta(0.0, (worksheet.results_l98||0), 0.002); end
  def test_results_m98; assert_in_delta(0.0, (worksheet.results_m98||0), 0.002); end
  def test_results_n98; assert_in_delta(0.0, (worksheet.results_n98||0), 0.002); end
  def test_results_o98; assert_in_delta(0.0, (worksheet.results_o98||0), 0.002); end
  def test_results_p98; assert_in_delta(0.0, (worksheet.results_p98||0), 0.002); end
  def test_results_q98; assert_in_delta(0.0, (worksheet.results_q98||0), 0.002); end
  def test_results_r98; assert_in_delta(0.0, (worksheet.results_r98||0), 0.002); end
  def test_results_s98; assert_in_delta(0.0, (worksheet.results_s98||0), 0.002); end
  def test_results_t98; assert_in_delta(0.0, (worksheet.results_t98||0), 0.002); end
  def test_results_u98; assert_in_delta(0.0, (worksheet.results_u98||0), 0.002); end
  def test_results_v98; assert_in_delta(0.0, (worksheet.results_v98||0), 0.002); end
  def test_results_w98; assert_in_delta(0.0, (worksheet.results_w98||0), 0.002); end
  def test_results_e99; assert_equal("Bus Hydrogen Refuelling Infrastructure ", worksheet.results_e99.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f99; assert_in_delta(0.0, (worksheet.results_f99||0), 0.002); end
  def test_results_g99; assert_in_delta(0.0, (worksheet.results_g99||0), 0.002); end
  def test_results_h99; assert_in_delta(0.0, (worksheet.results_h99||0), 0.002); end
  def test_results_i99; assert_in_delta(0.0, (worksheet.results_i99||0), 0.002); end
  def test_results_j99; assert_in_delta(0.0, (worksheet.results_j99||0), 0.002); end
  def test_results_k99; assert_in_delta(0.0, (worksheet.results_k99||0), 0.002); end
  def test_results_l99; assert_in_delta(0.0, (worksheet.results_l99||0), 0.002); end
  def test_results_m99; assert_in_delta(0.0, (worksheet.results_m99||0), 0.002); end
  def test_results_n99; assert_in_delta(0.0, (worksheet.results_n99||0), 0.002); end
  def test_results_o99; assert_in_delta(0.0, (worksheet.results_o99||0), 0.002); end
  def test_results_p99; assert_in_delta(0.0, (worksheet.results_p99||0), 0.002); end
  def test_results_q99; assert_in_delta(0.0, (worksheet.results_q99||0), 0.002); end
  def test_results_r99; assert_in_delta(0.0, (worksheet.results_r99||0), 0.002); end
  def test_results_s99; assert_in_delta(0.0, (worksheet.results_s99||0), 0.002); end
  def test_results_t99; assert_in_delta(0.0, (worksheet.results_t99||0), 0.002); end
  def test_results_u99; assert_in_delta(0.0, (worksheet.results_u99||0), 0.002); end
  def test_results_v99; assert_in_delta(0.0, (worksheet.results_v99||0), 0.002); end
  def test_results_w99; assert_in_delta(0.0, (worksheet.results_w99||0), 0.002); end
  def test_results_e100; assert_equal("Light Duty Vehicles Internal Combustion Engine Refuelling Infrastructure ", worksheet.results_e100.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f100; assert_in_delta(0.0, (worksheet.results_f100||0), 0.002); end
  def test_results_g100; assert_in_delta(0.0, (worksheet.results_g100||0), 0.002); end
  def test_results_h100; assert_in_delta(0.0, (worksheet.results_h100||0), 0.002); end
  def test_results_i100; assert_in_delta(0.0, (worksheet.results_i100||0), 0.002); end
  def test_results_j100; assert_in_delta(0.0, (worksheet.results_j100||0), 0.002); end
  def test_results_k100; assert_in_delta(0.0, (worksheet.results_k100||0), 0.002); end
  def test_results_l100; assert_in_delta(0.0, (worksheet.results_l100||0), 0.002); end
  def test_results_m100; assert_in_delta(0.0, (worksheet.results_m100||0), 0.002); end
  def test_results_n100; assert_in_delta(0.0, (worksheet.results_n100||0), 0.002); end
  def test_results_o100; assert_in_delta(0.0, (worksheet.results_o100||0), 0.002); end
  def test_results_p100; assert_in_delta(0.0, (worksheet.results_p100||0), 0.002); end
  def test_results_q100; assert_in_delta(0.0, (worksheet.results_q100||0), 0.002); end
  def test_results_r100; assert_in_delta(0.0, (worksheet.results_r100||0), 0.002); end
  def test_results_s100; assert_in_delta(0.0, (worksheet.results_s100||0), 0.002); end
  def test_results_t100; assert_in_delta(0.0, (worksheet.results_t100||0), 0.002); end
  def test_results_u100; assert_in_delta(0.0, (worksheet.results_u100||0), 0.002); end
  def test_results_v100; assert_in_delta(0.0, (worksheet.results_v100||0), 0.002); end
  def test_results_w100; assert_in_delta(0.0, (worksheet.results_w100||0), 0.002); end
  def test_results_e101; assert_equal("HGV _Articulated Internal Combustion Engine Refuelling Infrastructure ", worksheet.results_e101.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f101; assert_in_delta(0.0, (worksheet.results_f101||0), 0.002); end
  def test_results_g101; assert_in_delta(0.0, (worksheet.results_g101||0), 0.002); end
  def test_results_h101; assert_in_delta(0.0, (worksheet.results_h101||0), 0.002); end
  def test_results_i101; assert_in_delta(0.0, (worksheet.results_i101||0), 0.002); end
  def test_results_j101; assert_in_delta(0.0, (worksheet.results_j101||0), 0.002); end
  def test_results_k101; assert_in_delta(0.0, (worksheet.results_k101||0), 0.002); end
  def test_results_l101; assert_in_delta(0.0, (worksheet.results_l101||0), 0.002); end
  def test_results_m101; assert_in_delta(0.0, (worksheet.results_m101||0), 0.002); end
  def test_results_n101; assert_in_delta(0.0, (worksheet.results_n101||0), 0.002); end
  def test_results_o101; assert_in_delta(0.0, (worksheet.results_o101||0), 0.002); end
  def test_results_p101; assert_in_delta(0.0, (worksheet.results_p101||0), 0.002); end
  def test_results_q101; assert_in_delta(0.0, (worksheet.results_q101||0), 0.002); end
  def test_results_r101; assert_in_delta(0.0, (worksheet.results_r101||0), 0.002); end
  def test_results_s101; assert_in_delta(0.0, (worksheet.results_s101||0), 0.002); end
  def test_results_t101; assert_in_delta(0.0, (worksheet.results_t101||0), 0.002); end
  def test_results_u101; assert_in_delta(0.0, (worksheet.results_u101||0), 0.002); end
  def test_results_v101; assert_in_delta(0.0, (worksheet.results_v101||0), 0.002); end
  def test_results_w101; assert_in_delta(0.0, (worksheet.results_w101||0), 0.002); end
  def test_results_e102; assert_equal("Bus Internal Combustion Engine Refuelling Infrastructure ", worksheet.results_e102.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f102; assert_in_delta(0.0, (worksheet.results_f102||0), 0.002); end
  def test_results_g102; assert_in_delta(0.0, (worksheet.results_g102||0), 0.002); end
  def test_results_h102; assert_in_delta(0.0, (worksheet.results_h102||0), 0.002); end
  def test_results_i102; assert_in_delta(0.0, (worksheet.results_i102||0), 0.002); end
  def test_results_j102; assert_in_delta(0.0, (worksheet.results_j102||0), 0.002); end
  def test_results_k102; assert_in_delta(0.0, (worksheet.results_k102||0), 0.002); end
  def test_results_l102; assert_in_delta(0.0, (worksheet.results_l102||0), 0.002); end
  def test_results_m102; assert_in_delta(0.0, (worksheet.results_m102||0), 0.002); end
  def test_results_n102; assert_in_delta(0.0, (worksheet.results_n102||0), 0.002); end
  def test_results_o102; assert_in_delta(0.0, (worksheet.results_o102||0), 0.002); end
  def test_results_p102; assert_in_delta(0.0, (worksheet.results_p102||0), 0.002); end
  def test_results_q102; assert_in_delta(0.0, (worksheet.results_q102||0), 0.002); end
  def test_results_r102; assert_in_delta(0.0, (worksheet.results_r102||0), 0.002); end
  def test_results_s102; assert_in_delta(0.0, (worksheet.results_s102||0), 0.002); end
  def test_results_t102; assert_in_delta(0.0, (worksheet.results_t102||0), 0.002); end
  def test_results_u102; assert_in_delta(0.0, (worksheet.results_u102||0), 0.002); end
  def test_results_v102; assert_in_delta(0.0, (worksheet.results_v102||0), 0.002); end
  def test_results_w102; assert_in_delta(0.0, (worksheet.results_w102||0), 0.002); end
  def test_results_e103; assert_equal("Aviation Domestic Plug-in Hybrid Electric Vehicle ", worksheet.results_e103.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f103; assert_in_delta(0.0, (worksheet.results_f103||0), 0.002); end
  def test_results_g103; assert_in_delta(0.0, (worksheet.results_g103||0), 0.002); end
  def test_results_h103; assert_in_delta(0.0, (worksheet.results_h103||0), 0.002); end
  def test_results_i103; assert_in_delta(0.0, (worksheet.results_i103||0), 0.002); end
  def test_results_j103; assert_in_delta(0.0, (worksheet.results_j103||0), 0.002); end
  def test_results_k103; assert_in_delta(0.0, (worksheet.results_k103||0), 0.002); end
  def test_results_l103; assert_in_delta(0.0, (worksheet.results_l103||0), 0.002); end
  def test_results_m103; assert_in_delta(0.0, (worksheet.results_m103||0), 0.002); end
  def test_results_n103; assert_in_delta(0.0, (worksheet.results_n103||0), 0.002); end
  def test_results_o103; assert_in_delta(0.0, (worksheet.results_o103||0), 0.002); end
  def test_results_p103; assert_in_delta(0.0, (worksheet.results_p103||0), 0.002); end
  def test_results_q103; assert_in_delta(0.0, (worksheet.results_q103||0), 0.002); end
  def test_results_r103; assert_in_delta(0.0, (worksheet.results_r103||0), 0.002); end
  def test_results_s103; assert_in_delta(0.0, (worksheet.results_s103||0), 0.002); end
  def test_results_t103; assert_in_delta(0.0, (worksheet.results_t103||0), 0.002); end
  def test_results_u103; assert_in_delta(0.0, (worksheet.results_u103||0), 0.002); end
  def test_results_v103; assert_in_delta(0.0, (worksheet.results_v103||0), 0.002); end
  def test_results_w103; assert_in_delta(0.0, (worksheet.results_w103||0), 0.002); end
  def test_results_e104; assert_equal("Aviation Domestic Conventional ", worksheet.results_e104.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f104; assert_in_epsilon(2.214710411365551, worksheet.results_f104, 0.002); end
  def test_results_g104; assert_in_epsilon(2.5304855752768733, worksheet.results_g104, 0.002); end
  def test_results_h104; assert_in_epsilon(2.7806581632047287, worksheet.results_h104, 0.002); end
  def test_results_i104; assert_in_epsilon(3.0028202119606697, worksheet.results_i104, 0.002); end
  def test_results_j104; assert_in_epsilon(3.2097702949928384, worksheet.results_j104, 0.002); end
  def test_results_k104; assert_in_epsilon(3.3787694178588565, worksheet.results_k104, 0.002); end
  def test_results_l104; assert_in_epsilon(3.533545648570639, worksheet.results_l104, 0.002); end
  def test_results_m104; assert_in_epsilon(3.638235968174833, worksheet.results_m104, 0.002); end
  def test_results_n104; assert_in_epsilon(3.6986718498219058, worksheet.results_n104, 0.002); end
  def test_results_o104; assert_in_epsilon(3.755925346681803, worksheet.results_o104, 0.002); end
  def test_results_p104; assert_in_epsilon(3.8132119688395583, worksheet.results_p104, 0.002); end
  def test_results_q104; assert_in_epsilon(3.8738496976642387, worksheet.results_q104, 0.002); end
  def test_results_r104; assert_in_epsilon(3.9384461536822566, worksheet.results_r104, 0.002); end
  def test_results_s104; assert_in_epsilon(4.004938744253578, worksheet.results_s104, 0.002); end
  def test_results_t104; assert_in_epsilon(4.071438403403103, worksheet.results_t104, 0.002); end
  def test_results_u104; assert_in_epsilon(4.137934458963742, worksheet.results_u104, 0.002); end
  def test_results_v104; assert_in_epsilon(4.205486458468395, worksheet.results_v104, 0.002); end
  def test_results_w104; assert_in_epsilon(4.274448893423998, worksheet.results_w104, 0.002); end
  def test_results_e105; assert_equal("Aviation International Plug-in Hybrid Electric Vehicle ", worksheet.results_e105.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f105; assert_in_delta(0.0, (worksheet.results_f105||0), 0.002); end
  def test_results_g105; assert_in_delta(0.0, (worksheet.results_g105||0), 0.002); end
  def test_results_h105; assert_in_delta(0.0, (worksheet.results_h105||0), 0.002); end
  def test_results_i105; assert_in_delta(0.0, (worksheet.results_i105||0), 0.002); end
  def test_results_j105; assert_in_delta(0.0, (worksheet.results_j105||0), 0.002); end
  def test_results_k105; assert_in_delta(0.0, (worksheet.results_k105||0), 0.002); end
  def test_results_l105; assert_in_delta(0.0, (worksheet.results_l105||0), 0.002); end
  def test_results_m105; assert_in_delta(0.0, (worksheet.results_m105||0), 0.002); end
  def test_results_n105; assert_in_delta(0.0, (worksheet.results_n105||0), 0.002); end
  def test_results_o105; assert_in_delta(0.0, (worksheet.results_o105||0), 0.002); end
  def test_results_p105; assert_in_delta(0.0, (worksheet.results_p105||0), 0.002); end
  def test_results_q105; assert_in_delta(0.0, (worksheet.results_q105||0), 0.002); end
  def test_results_r105; assert_in_delta(0.0, (worksheet.results_r105||0), 0.002); end
  def test_results_s105; assert_in_delta(0.0, (worksheet.results_s105||0), 0.002); end
  def test_results_t105; assert_in_delta(0.0, (worksheet.results_t105||0), 0.002); end
  def test_results_u105; assert_in_delta(0.0, (worksheet.results_u105||0), 0.002); end
  def test_results_v105; assert_in_delta(0.0, (worksheet.results_v105||0), 0.002); end
  def test_results_w105; assert_in_delta(0.0, (worksheet.results_w105||0), 0.002); end
  def test_results_e106; assert_equal("Aviation International Conventional ", worksheet.results_e106.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f106; assert_in_epsilon(36.942919818629925, worksheet.results_f106, 0.002); end
  def test_results_g106; assert_in_epsilon(40.62725670063316, worksheet.results_g106, 0.002); end
  def test_results_h106; assert_in_epsilon(42.94247605370944, worksheet.results_h106, 0.002); end
  def test_results_i106; assert_in_epsilon(44.72965788127872, worksheet.results_i106, 0.002); end
  def test_results_j106; assert_in_epsilon(45.98139866684657, worksheet.results_j106, 0.002); end
  def test_results_k106; assert_in_epsilon(48.15805609925605, worksheet.results_k106, 0.002); end
  def test_results_l106; assert_in_epsilon(51.120500703326925, worksheet.results_l106, 0.002); end
  def test_results_m106; assert_in_epsilon(52.48336309664013, worksheet.results_m106, 0.002); end
  def test_results_n106; assert_in_epsilon(53.369165237281834, worksheet.results_n106, 0.002); end
  def test_results_o106; assert_in_epsilon(54.208323510406416, worksheet.results_o106, 0.002); end
  def test_results_p106; assert_in_epsilon(55.047967297417, worksheet.results_p106, 0.002); end
  def test_results_q106; assert_in_epsilon(55.936727890175796, worksheet.results_q106, 0.002); end
  def test_results_r106; assert_in_epsilon(56.88351111661688, worksheet.results_r106, 0.002); end
  def test_results_s106; assert_in_epsilon(57.85808578086754, worksheet.results_s106, 0.002); end
  def test_results_t106; assert_in_epsilon(58.83276404849973, worksheet.results_t106, 0.002); end
  def test_results_u106; assert_in_epsilon(59.80738949872174, worksheet.results_u106, 0.002); end
  def test_results_v106; assert_in_epsilon(60.797491804422904, worksheet.results_v106, 0.002); end
  def test_results_w106; assert_in_epsilon(61.8082667090444, worksheet.results_w106, 0.002); end
  def test_results_e107; assert_equal("Woodland ", worksheet.results_e107.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f107; assert_in_epsilon(-7.29159883, worksheet.results_f107, 0.002); end
  def test_results_g107; assert_in_epsilon(-4.04741327, worksheet.results_g107, 0.002); end
  def test_results_h107; assert_in_epsilon(-1.1500830640694388, worksheet.results_h107, 0.002); end
  def test_results_i107; assert_in_delta(0.4167896294888984, worksheet.results_i107, 0.002); end
  def test_results_j107; assert_in_delta(0.5773353706750121, worksheet.results_j107, 0.002); end
  def test_results_k107; assert_in_delta(-0.5538703005111023, worksheet.results_k107, 0.002); end
  def test_results_l107; assert_in_epsilon(-1.9448040740694406, worksheet.results_l107, 0.002); end
  def test_results_m107; assert_in_epsilon(-2.568644469999998, worksheet.results_m107, 0.002); end
  def test_results_n107; assert_in_epsilon(-2.674060469999996, worksheet.results_n107, 0.002); end
  def test_results_o107; assert_in_epsilon(-2.7794764699999988, worksheet.results_o107, 0.002); end
  def test_results_p107; assert_in_epsilon(-2.884892469999997, worksheet.results_p107, 0.002); end
  def test_results_q107; assert_in_epsilon(-2.9903084699999996, worksheet.results_q107, 0.002); end
  def test_results_r107; assert_in_epsilon(-2.9903084699999996, worksheet.results_r107, 0.002); end
  def test_results_s107; assert_in_epsilon(-2.9903084699999996, worksheet.results_s107, 0.002); end
  def test_results_t107; assert_in_epsilon(-2.9903084699999996, worksheet.results_t107, 0.002); end
  def test_results_u107; assert_in_epsilon(-2.9903084699999996, worksheet.results_u107, 0.002); end
  def test_results_v107; assert_in_epsilon(-2.9903084699999996, worksheet.results_v107, 0.002); end
  def test_results_w107; assert_in_epsilon(-2.9903084699999996, worksheet.results_w107, 0.002); end
  def test_results_e108; assert_equal("Arable Land for Food ", worksheet.results_e108.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f108; assert_in_epsilon(15.28835, worksheet.results_f108, 0.002); end
  def test_results_g108; assert_in_epsilon(15.28835, worksheet.results_g108, 0.002); end
  def test_results_h108; assert_in_epsilon(15.211908249999997, worksheet.results_h108, 0.002); end
  def test_results_i108; assert_in_epsilon(15.135466499999998, worksheet.results_i108, 0.002); end
  def test_results_j108; assert_in_epsilon(15.059024749999997, worksheet.results_j108, 0.002); end
  def test_results_k108; assert_in_epsilon(14.982582999999998, worksheet.results_k108, 0.002); end
  def test_results_l108; assert_in_epsilon(14.906141249999997, worksheet.results_l108, 0.002); end
  def test_results_m108; assert_in_epsilon(14.829699499999998, worksheet.results_m108, 0.002); end
  def test_results_n108; assert_in_epsilon(14.829699499999998, worksheet.results_n108, 0.002); end
  def test_results_o108; assert_in_epsilon(14.829699499999998, worksheet.results_o108, 0.002); end
  def test_results_p108; assert_in_epsilon(14.829699499999998, worksheet.results_p108, 0.002); end
  def test_results_q108; assert_in_epsilon(14.829699499999998, worksheet.results_q108, 0.002); end
  def test_results_r108; assert_in_epsilon(14.829699499999998, worksheet.results_r108, 0.002); end
  def test_results_s108; assert_in_epsilon(14.829699499999998, worksheet.results_s108, 0.002); end
  def test_results_t108; assert_in_epsilon(14.829699499999998, worksheet.results_t108, 0.002); end
  def test_results_u108; assert_in_epsilon(14.829699499999998, worksheet.results_u108, 0.002); end
  def test_results_v108; assert_in_epsilon(14.829699499999998, worksheet.results_v108, 0.002); end
  def test_results_w108; assert_in_epsilon(14.829699499999998, worksheet.results_w108, 0.002); end
  def test_results_e109; assert_equal("Livestock Grazing Land", worksheet.results_e109.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f109; assert_in_epsilon(-7.96705, worksheet.results_f109, 0.002); end
  def test_results_g109; assert_in_epsilon(-7.927294340869316, worksheet.results_g109, 0.002); end
  def test_results_h109; assert_in_epsilon(-7.887737062875045, worksheet.results_h109, 0.002); end
  def test_results_i109; assert_in_epsilon(-7.848377176093409, worksheet.results_i109, 0.002); end
  def test_results_j109; assert_in_epsilon(-7.809213695540161, worksheet.results_j109, 0.002); end
  def test_results_k109; assert_in_epsilon(-7.7702456411463245, worksheet.results_k109, 0.002); end
  def test_results_l109; assert_in_epsilon(-7.731472037733385, worksheet.results_l109, 0.002); end
  def test_results_m109; assert_in_epsilon(-7.692891914988979, worksheet.results_m109, 0.002); end
  def test_results_n109; assert_in_epsilon(-7.692891914988979, worksheet.results_n109, 0.002); end
  def test_results_o109; assert_in_epsilon(-7.692891914988979, worksheet.results_o109, 0.002); end
  def test_results_p109; assert_in_epsilon(-7.692891914988979, worksheet.results_p109, 0.002); end
  def test_results_q109; assert_in_epsilon(-7.692891914988979, worksheet.results_q109, 0.002); end
  def test_results_r109; assert_in_epsilon(-7.692891914988979, worksheet.results_r109, 0.002); end
  def test_results_s109; assert_in_epsilon(-7.692891914988979, worksheet.results_s109, 0.002); end
  def test_results_t109; assert_in_epsilon(-7.692891914988979, worksheet.results_t109, 0.002); end
  def test_results_u109; assert_in_epsilon(-7.692891914988979, worksheet.results_u109, 0.002); end
  def test_results_v109; assert_in_epsilon(-7.692891914988979, worksheet.results_v109, 0.002); end
  def test_results_w109; assert_in_epsilon(-7.692891914988979, worksheet.results_w109, 0.002); end
  def test_results_e110; assert_equal("Settlement Land", worksheet.results_e110.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f110; assert_in_epsilon(6.32981, worksheet.results_f110, 0.002); end
  def test_results_g110; assert_in_epsilon(6.32981, worksheet.results_g110, 0.002); end
  def test_results_h110; assert_in_epsilon(6.32981, worksheet.results_h110, 0.002); end
  def test_results_i110; assert_in_epsilon(6.32981, worksheet.results_i110, 0.002); end
  def test_results_j110; assert_in_epsilon(6.32981, worksheet.results_j110, 0.002); end
  def test_results_k110; assert_in_epsilon(6.32981, worksheet.results_k110, 0.002); end
  def test_results_l110; assert_in_epsilon(6.32981, worksheet.results_l110, 0.002); end
  def test_results_m110; assert_in_epsilon(6.32981, worksheet.results_m110, 0.002); end
  def test_results_n110; assert_in_epsilon(6.32981, worksheet.results_n110, 0.002); end
  def test_results_o110; assert_in_epsilon(6.32981, worksheet.results_o110, 0.002); end
  def test_results_p110; assert_in_epsilon(6.32981, worksheet.results_p110, 0.002); end
  def test_results_q110; assert_in_epsilon(6.32981, worksheet.results_q110, 0.002); end
  def test_results_r110; assert_in_epsilon(6.32981, worksheet.results_r110, 0.002); end
  def test_results_s110; assert_in_epsilon(6.32981, worksheet.results_s110, 0.002); end
  def test_results_t110; assert_in_epsilon(6.32981, worksheet.results_t110, 0.002); end
  def test_results_u110; assert_in_epsilon(6.32981, worksheet.results_u110, 0.002); end
  def test_results_v110; assert_in_epsilon(6.32981, worksheet.results_v110, 0.002); end
  def test_results_w110; assert_in_epsilon(6.32981, worksheet.results_w110, 0.002); end
  def test_results_e111; assert_equal("Other Land ", worksheet.results_e111.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f111; assert_in_epsilon(-1.29274, worksheet.results_f111, 0.002); end
  def test_results_g111; assert_in_epsilon(-1.29274, worksheet.results_g111, 0.002); end
  def test_results_h111; assert_in_epsilon(-1.29274, worksheet.results_h111, 0.002); end
  def test_results_i111; assert_in_epsilon(-1.29274, worksheet.results_i111, 0.002); end
  def test_results_j111; assert_in_epsilon(-1.29274, worksheet.results_j111, 0.002); end
  def test_results_k111; assert_in_epsilon(-1.29274, worksheet.results_k111, 0.002); end
  def test_results_l111; assert_in_epsilon(-1.29274, worksheet.results_l111, 0.002); end
  def test_results_m111; assert_in_epsilon(-1.29274, worksheet.results_m111, 0.002); end
  def test_results_n111; assert_in_epsilon(-1.29274, worksheet.results_n111, 0.002); end
  def test_results_o111; assert_in_epsilon(-1.29274, worksheet.results_o111, 0.002); end
  def test_results_p111; assert_in_epsilon(-1.29274, worksheet.results_p111, 0.002); end
  def test_results_q111; assert_in_epsilon(-1.29274, worksheet.results_q111, 0.002); end
  def test_results_r111; assert_in_epsilon(-1.29274, worksheet.results_r111, 0.002); end
  def test_results_s111; assert_in_epsilon(-1.29274, worksheet.results_s111, 0.002); end
  def test_results_t111; assert_in_epsilon(-1.29274, worksheet.results_t111, 0.002); end
  def test_results_u111; assert_in_epsilon(-1.29274, worksheet.results_u111, 0.002); end
  def test_results_v111; assert_in_epsilon(-1.29274, worksheet.results_v111, 0.002); end
  def test_results_w111; assert_in_epsilon(-1.29274, worksheet.results_w111, 0.002); end
  def test_results_e112; assert_equal("Manure Management ", worksheet.results_e112.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f112; assert_in_epsilon(4.55687, worksheet.results_f112, 0.002); end
  def test_results_g112; assert_in_epsilon(2.8416110022298655, worksheet.results_g112, 0.002); end
  def test_results_h112; assert_in_epsilon(2.8367807703635703, worksheet.results_h112, 0.002); end
  def test_results_i112; assert_in_epsilon(2.831777220095185, worksheet.results_i112, 0.002); end
  def test_results_j112; assert_in_epsilon(2.8265983613754173, worksheet.results_j112, 0.002); end
  def test_results_k112; assert_in_epsilon(2.8212421859722543, worksheet.results_k112, 0.002); end
  def test_results_l112; assert_in_epsilon(2.815706667320935, worksheet.results_l112, 0.002); end
  def test_results_m112; assert_in_epsilon(2.8099897603727397, worksheet.results_m112, 0.002); end
  def test_results_n112; assert_in_epsilon(2.8099897603727397, worksheet.results_n112, 0.002); end
  def test_results_o112; assert_in_epsilon(2.8099897603727397, worksheet.results_o112, 0.002); end
  def test_results_p112; assert_in_epsilon(2.8099897603727397, worksheet.results_p112, 0.002); end
  def test_results_q112; assert_in_epsilon(2.8099897603727397, worksheet.results_q112, 0.002); end
  def test_results_r112; assert_in_epsilon(2.8099897603727397, worksheet.results_r112, 0.002); end
  def test_results_s112; assert_in_epsilon(2.8099897603727397, worksheet.results_s112, 0.002); end
  def test_results_t112; assert_in_epsilon(2.8099897603727397, worksheet.results_t112, 0.002); end
  def test_results_u112; assert_in_epsilon(2.8099897603727397, worksheet.results_u112, 0.002); end
  def test_results_v112; assert_in_epsilon(2.8099897603727397, worksheet.results_v112, 0.002); end
  def test_results_w112; assert_in_epsilon(2.8099897603727397, worksheet.results_w112, 0.002); end
  def test_results_e113; assert_equal("Enteric Fermentation ", worksheet.results_e113.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f113; assert_in_epsilon(15.561, worksheet.results_f113, 0.002); end
  def test_results_g113; assert_in_epsilon(15.37152176275053, worksheet.results_g113, 0.002); end
  def test_results_h113; assert_in_epsilon(15.314493320969015, worksheet.results_h113, 0.002); end
  def test_results_i113; assert_in_epsilon(15.257676455062827, worksheet.results_i113, 0.002); end
  def test_results_j113; assert_in_epsilon(15.201070380084142, worksheet.results_j113, 0.002); end
  def test_results_k113; assert_in_epsilon(15.144674313997307, worksheet.results_k113, 0.002); end
  def test_results_l113; assert_in_epsilon(15.088487477668016, worksheet.results_l113, 0.002); end
  def test_results_m113; assert_in_epsilon(15.032509094852562, worksheet.results_m113, 0.002); end
  def test_results_n113; assert_in_epsilon(15.032509094852562, worksheet.results_n113, 0.002); end
  def test_results_o113; assert_in_epsilon(15.032509094852562, worksheet.results_o113, 0.002); end
  def test_results_p113; assert_in_epsilon(15.032509094852562, worksheet.results_p113, 0.002); end
  def test_results_q113; assert_in_epsilon(15.032509094852562, worksheet.results_q113, 0.002); end
  def test_results_r113; assert_in_epsilon(15.032509094852562, worksheet.results_r113, 0.002); end
  def test_results_s113; assert_in_epsilon(15.032509094852562, worksheet.results_s113, 0.002); end
  def test_results_t113; assert_in_epsilon(15.032509094852562, worksheet.results_t113, 0.002); end
  def test_results_u113; assert_in_epsilon(15.032509094852562, worksheet.results_u113, 0.002); end
  def test_results_v113; assert_in_epsilon(15.032509094852562, worksheet.results_v113, 0.002); end
  def test_results_w113; assert_in_epsilon(15.032509094852562, worksheet.results_w113, 0.002); end
  def test_results_e114; assert_equal("Soil Management ", worksheet.results_e114.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f114; assert_in_epsilon(23.28, worksheet.results_f114, 0.002); end
  def test_results_g114; assert_in_epsilon(22.545258398704277, worksheet.results_g114, 0.002); end
  def test_results_h114; assert_in_epsilon(22.473715332253565, worksheet.results_h114, 0.002); end
  def test_results_i114; assert_in_epsilon(22.40217226580285, worksheet.results_i114, 0.002); end
  def test_results_j114; assert_in_epsilon(22.33062919935214, worksheet.results_j114, 0.002); end
  def test_results_k114; assert_in_epsilon(22.259086132901427, worksheet.results_k114, 0.002); end
  def test_results_l114; assert_in_epsilon(22.18754306645071, worksheet.results_l114, 0.002); end
  def test_results_m114; assert_in_epsilon(22.116, worksheet.results_m114, 0.002); end
  def test_results_n114; assert_in_epsilon(22.116, worksheet.results_n114, 0.002); end
  def test_results_o114; assert_in_epsilon(22.116, worksheet.results_o114, 0.002); end
  def test_results_p114; assert_in_epsilon(22.116, worksheet.results_p114, 0.002); end
  def test_results_q114; assert_in_epsilon(22.116, worksheet.results_q114, 0.002); end
  def test_results_r114; assert_in_epsilon(22.116, worksheet.results_r114, 0.002); end
  def test_results_s114; assert_in_epsilon(22.116, worksheet.results_s114, 0.002); end
  def test_results_t114; assert_in_epsilon(22.116, worksheet.results_t114, 0.002); end
  def test_results_u114; assert_in_epsilon(22.116, worksheet.results_u114, 0.002); end
  def test_results_v114; assert_in_epsilon(22.116, worksheet.results_v114, 0.002); end
  def test_results_w114; assert_in_epsilon(22.116, worksheet.results_w114, 0.002); end
  def test_results_e115; assert_equal("Agricultural Fuel Use", worksheet.results_e115.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f115; assert_in_epsilon(1.5732495789301777, worksheet.results_f115, 0.002); end
  def test_results_g115; assert_in_epsilon(1.6343324755419286, worksheet.results_g115, 0.002); end
  def test_results_h115; assert_in_epsilon(1.5809618733018966, worksheet.results_h115, 0.002); end
  def test_results_i115; assert_in_epsilon(1.5347353610463577, worksheet.results_i115, 0.002); end
  def test_results_j115; assert_in_epsilon(1.478305747775109, worksheet.results_j115, 0.002); end
  def test_results_k115; assert_in_epsilon(1.4212210130469556, worksheet.results_k115, 0.002); end
  def test_results_l115; assert_in_epsilon(1.3641362783188022, worksheet.results_l115, 0.002); end
  def test_results_m115; assert_in_epsilon(1.3070515435906491, worksheet.results_m115, 0.002); end
  def test_results_n115; assert_in_epsilon(1.297922557278242, worksheet.results_n115, 0.002); end
  def test_results_o115; assert_in_epsilon(1.2887935709658351, worksheet.results_o115, 0.002); end
  def test_results_p115; assert_in_epsilon(1.2887935709658351, worksheet.results_p115, 0.002); end
  def test_results_q115; assert_in_epsilon(1.2887935709658351, worksheet.results_q115, 0.002); end
  def test_results_r115; assert_in_epsilon(1.2887935709658351, worksheet.results_r115, 0.002); end
  def test_results_s115; assert_in_epsilon(1.2887935709658351, worksheet.results_s115, 0.002); end
  def test_results_t115; assert_in_epsilon(1.2887935709658351, worksheet.results_t115, 0.002); end
  def test_results_u115; assert_in_epsilon(1.2887935709658351, worksheet.results_u115, 0.002); end
  def test_results_v115; assert_in_epsilon(1.2887935709658351, worksheet.results_v115, 0.002); end
  def test_results_w115; assert_in_epsilon(1.2887935709658351, worksheet.results_w115, 0.002); end
  def test_results_e116; assert_equal("Woodland Dry Waste ", worksheet.results_e116.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f116; assert_in_delta(0.011065203140800001, worksheet.results_f116, 0.002); end
  def test_results_g116; assert_in_delta(0.011229087492800001, worksheet.results_g116, 0.002); end
  def test_results_h116; assert_in_delta(0.012284390720583025, worksheet.results_h116, 0.002); end
  def test_results_i116; assert_in_delta(0.01336533951421283, worksheet.results_i116, 0.002); end
  def test_results_j116; assert_in_delta(0.01447193387368942, worksheet.results_j116, 0.002); end
  def test_results_k116; assert_in_delta(0.01560417379901284, worksheet.results_k116, 0.002); end
  def test_results_l116; assert_in_delta(0.016762059290183037, worksheet.results_l116, 0.002); end
  def test_results_m116; assert_in_delta(0.017945590347199978, worksheet.results_m116, 0.002); end
  def test_results_n116; assert_in_delta(0.01890112313759996, worksheet.results_n116, 0.002); end
  def test_results_o116; assert_in_delta(0.019856655927999987, worksheet.results_o116, 0.002); end
  def test_results_p116; assert_in_delta(0.020812188718399967, worksheet.results_p116, 0.002); end
  def test_results_q116; assert_in_delta(0.0217677215088, worksheet.results_q116, 0.002); end
  def test_results_r116; assert_in_delta(0.0217677215088, worksheet.results_r116, 0.002); end
  def test_results_s116; assert_in_delta(0.0217677215088, worksheet.results_s116, 0.002); end
  def test_results_t116; assert_in_delta(0.0217677215088, worksheet.results_t116, 0.002); end
  def test_results_u116; assert_in_delta(0.0217677215088, worksheet.results_u116, 0.002); end
  def test_results_v116; assert_in_delta(0.0217677215088, worksheet.results_v116, 0.002); end
  def test_results_w116; assert_in_delta(0.0217677215088, worksheet.results_w116, 0.002); end
  def test_results_e117; assert_equal("Arable Land for Food Dry Waste ", worksheet.results_e117.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f117; assert_in_delta(0.03239204344, worksheet.results_f117, 0.002); end
  def test_results_g117; assert_in_delta(0.03239204344, worksheet.results_g117, 0.002); end
  def test_results_h117; assert_in_delta(0.03239204344, worksheet.results_h117, 0.002); end
  def test_results_i117; assert_in_delta(0.03239204344, worksheet.results_i117, 0.002); end
  def test_results_j117; assert_in_delta(0.03239204344, worksheet.results_j117, 0.002); end
  def test_results_k117; assert_in_delta(0.03239204344, worksheet.results_k117, 0.002); end
  def test_results_l117; assert_in_delta(0.03239204344, worksheet.results_l117, 0.002); end
  def test_results_m117; assert_in_delta(0.03239204344, worksheet.results_m117, 0.002); end
  def test_results_n117; assert_in_delta(0.03239204344, worksheet.results_n117, 0.002); end
  def test_results_o117; assert_in_delta(0.03239204344, worksheet.results_o117, 0.002); end
  def test_results_p117; assert_in_delta(0.03239204344, worksheet.results_p117, 0.002); end
  def test_results_q117; assert_in_delta(0.03239204344, worksheet.results_q117, 0.002); end
  def test_results_r117; assert_in_delta(0.03239204344, worksheet.results_r117, 0.002); end
  def test_results_s117; assert_in_delta(0.03239204344, worksheet.results_s117, 0.002); end
  def test_results_t117; assert_in_delta(0.03239204344, worksheet.results_t117, 0.002); end
  def test_results_u117; assert_in_delta(0.03239204344, worksheet.results_u117, 0.002); end
  def test_results_v117; assert_in_delta(0.03239204344, worksheet.results_v117, 0.002); end
  def test_results_w117; assert_in_delta(0.03239204344, worksheet.results_w117, 0.002); end
  def test_results_e118; assert_equal("Bioenergy LandBioenergy Solid ", worksheet.results_e118.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f118; assert_in_delta(0.2935333333333333, worksheet.results_f118, 0.002); end
  def test_results_g118; assert_in_delta(0.37683363061829644, worksheet.results_g118, 0.002); end
  def test_results_h118; assert_in_delta(0.46985141336857034, worksheet.results_h118, 0.002); end
  def test_results_i118; assert_in_delta(0.5678563243308695, worksheet.results_i118, 0.002); end
  def test_results_j118; assert_in_delta(0.6709930250733092, worksheet.results_j118, 0.002); end
  def test_results_k118; assert_in_delta(0.779409452375009, worksheet.results_k118, 0.002); end
  def test_results_l118; assert_in_delta(0.8932568830582244, worksheet.results_l118, 0.002); end
  def test_results_m118; assert_in_epsilon(1.01269, worksheet.results_m118, 0.002); end
  def test_results_n118; assert_in_epsilon(1.01269, worksheet.results_n118, 0.002); end
  def test_results_o118; assert_in_epsilon(1.01269, worksheet.results_o118, 0.002); end
  def test_results_p118; assert_in_epsilon(1.01269, worksheet.results_p118, 0.002); end
  def test_results_q118; assert_in_epsilon(1.01269, worksheet.results_q118, 0.002); end
  def test_results_r118; assert_in_epsilon(1.01269, worksheet.results_r118, 0.002); end
  def test_results_s118; assert_in_epsilon(1.01269, worksheet.results_s118, 0.002); end
  def test_results_t118; assert_in_epsilon(1.01269, worksheet.results_t118, 0.002); end
  def test_results_u118; assert_in_epsilon(1.01269, worksheet.results_u118, 0.002); end
  def test_results_v118; assert_in_epsilon(1.01269, worksheet.results_v118, 0.002); end
  def test_results_w118; assert_in_epsilon(1.01269, worksheet.results_w118, 0.002); end
  def test_results_e119; assert_equal("Manure Management Wet Waste ", worksheet.results_e119.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f119; assert_in_delta(0.10075278779654606, worksheet.results_f119, 0.002); end
  def test_results_g119; assert_in_delta(0.2544108846357746, worksheet.results_g119, 0.002); end
  def test_results_h119; assert_in_delta(0.2569651902907495, worksheet.results_h119, 0.002); end
  def test_results_i119; assert_in_delta(0.25954514137904927, worksheet.results_i119, 0.002); end
  def test_results_j119; assert_in_delta(0.26215099538287817, worksheet.results_j119, 0.002); end
  def test_results_k119; assert_in_delta(0.26478301236958224, worksheet.results_k119, 0.002); end
  def test_results_l119; assert_in_delta(0.2674414550176049, worksheet.results_l119, 0.002); end
  def test_results_m119; assert_in_delta(0.27012658864270195, worksheet.results_m119, 0.002); end
  def test_results_n119; assert_in_delta(0.27012658864270195, worksheet.results_n119, 0.002); end
  def test_results_o119; assert_in_delta(0.27012658864270195, worksheet.results_o119, 0.002); end
  def test_results_p119; assert_in_delta(0.27012658864270195, worksheet.results_p119, 0.002); end
  def test_results_q119; assert_in_delta(0.27012658864270195, worksheet.results_q119, 0.002); end
  def test_results_r119; assert_in_delta(0.27012658864270195, worksheet.results_r119, 0.002); end
  def test_results_s119; assert_in_delta(0.27012658864270195, worksheet.results_s119, 0.002); end
  def test_results_t119; assert_in_delta(0.27012658864270195, worksheet.results_t119, 0.002); end
  def test_results_u119; assert_in_delta(0.27012658864270195, worksheet.results_u119, 0.002); end
  def test_results_v119; assert_in_delta(0.27012658864270195, worksheet.results_v119, 0.002); end
  def test_results_w119; assert_in_delta(0.27012658864270195, worksheet.results_w119, 0.002); end
  def test_results_e120; assert_equal("Biomass Pelletisation Plant", worksheet.results_e120.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f120; assert_in_delta(0.0, (worksheet.results_f120||0), 0.002); end
  def test_results_g120; assert_in_delta(0.0, (worksheet.results_g120||0), 0.002); end
  def test_results_h120; assert_in_delta(0.0, (worksheet.results_h120||0), 0.002); end
  def test_results_i120; assert_in_delta(0.0, (worksheet.results_i120||0), 0.002); end
  def test_results_j120; assert_in_delta(0.0, (worksheet.results_j120||0), 0.002); end
  def test_results_k120; assert_in_delta(0.0, (worksheet.results_k120||0), 0.002); end
  def test_results_l120; assert_in_delta(0.0, (worksheet.results_l120||0), 0.002); end
  def test_results_m120; assert_in_delta(0.0, (worksheet.results_m120||0), 0.002); end
  def test_results_n120; assert_in_delta(0.0, (worksheet.results_n120||0), 0.002); end
  def test_results_o120; assert_in_delta(0.0, (worksheet.results_o120||0), 0.002); end
  def test_results_p120; assert_in_delta(0.0, (worksheet.results_p120||0), 0.002); end
  def test_results_q120; assert_in_delta(0.0, (worksheet.results_q120||0), 0.002); end
  def test_results_r120; assert_in_delta(0.0, (worksheet.results_r120||0), 0.002); end
  def test_results_s120; assert_in_delta(0.0, (worksheet.results_s120||0), 0.002); end
  def test_results_t120; assert_in_delta(0.0, (worksheet.results_t120||0), 0.002); end
  def test_results_u120; assert_in_delta(0.0, (worksheet.results_u120||0), 0.002); end
  def test_results_v120; assert_in_delta(0.0, (worksheet.results_v120||0), 0.002); end
  def test_results_w120; assert_in_delta(0.0, (worksheet.results_w120||0), 0.002); end
  def test_results_e121; assert_equal("Landfill Gas Collection ", worksheet.results_e121.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f121; assert_in_delta(0.0, (worksheet.results_f121||0), 0.002); end
  def test_results_g121; assert_in_delta(0.0, (worksheet.results_g121||0), 0.002); end
  def test_results_h121; assert_in_delta(0.0, (worksheet.results_h121||0), 0.002); end
  def test_results_i121; assert_in_delta(0.0, (worksheet.results_i121||0), 0.002); end
  def test_results_j121; assert_in_delta(0.0, (worksheet.results_j121||0), 0.002); end
  def test_results_k121; assert_in_delta(0.0, (worksheet.results_k121||0), 0.002); end
  def test_results_l121; assert_in_delta(0.0, (worksheet.results_l121||0), 0.002); end
  def test_results_m121; assert_in_delta(0.0, (worksheet.results_m121||0), 0.002); end
  def test_results_n121; assert_in_delta(0.0, (worksheet.results_n121||0), 0.002); end
  def test_results_o121; assert_in_delta(0.0, (worksheet.results_o121||0), 0.002); end
  def test_results_p121; assert_in_delta(0.0, (worksheet.results_p121||0), 0.002); end
  def test_results_q121; assert_in_delta(0.0, (worksheet.results_q121||0), 0.002); end
  def test_results_r121; assert_in_delta(0.0, (worksheet.results_r121||0), 0.002); end
  def test_results_s121; assert_in_delta(0.0, (worksheet.results_s121||0), 0.002); end
  def test_results_t121; assert_in_delta(0.0, (worksheet.results_t121||0), 0.002); end
  def test_results_u121; assert_in_delta(0.0, (worksheet.results_u121||0), 0.002); end
  def test_results_v121; assert_in_delta(0.0, (worksheet.results_v121||0), 0.002); end
  def test_results_w121; assert_in_delta(0.0, (worksheet.results_w121||0), 0.002); end
  def test_results_e122; assert_equal("Anaerobic Digestion Plant ", worksheet.results_e122.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f122; assert_in_delta(0.0, (worksheet.results_f122||0), 0.002); end
  def test_results_g122; assert_in_delta(0.0, (worksheet.results_g122||0), 0.002); end
  def test_results_h122; assert_in_delta(0.014654620121185033, worksheet.results_h122, 0.002); end
  def test_results_i122; assert_in_delta(0.046774268694524786, worksheet.results_i122, 0.002); end
  def test_results_j122; assert_in_delta(0.0656785036115686, worksheet.results_j122, 0.002); end
  def test_results_k122; assert_in_delta(0.06995144486118635, worksheet.results_k122, 0.002); end
  def test_results_l122; assert_in_delta(0.0735010044374063, worksheet.results_l122, 0.002); end
  def test_results_m122; assert_in_delta(0.07638125069133124, worksheet.results_m122, 0.002); end
  def test_results_n122; assert_in_delta(0.08666439549899153, worksheet.results_n122, 0.002); end
  def test_results_o122; assert_in_delta(0.09805154516279835, worksheet.results_o122, 0.002); end
  def test_results_p122; assert_in_delta(0.10482703665518577, worksheet.results_p122, 0.002); end
  def test_results_q122; assert_in_delta(0.10816442953486158, worksheet.results_q122, 0.002); end
  def test_results_r122; assert_in_delta(0.11620966533864702, worksheet.results_r122, 0.002); end
  def test_results_s122; assert_in_delta(0.12233017541340892, worksheet.results_s122, 0.002); end
  def test_results_t122; assert_in_delta(0.12700581386011792, worksheet.results_t122, 0.002); end
  def test_results_u122; assert_in_delta(0.13060324777767532, worksheet.results_u122, 0.002); end
  def test_results_v122; assert_in_delta(0.13340270611504645, worksheet.results_v122, 0.002); end
  def test_results_w122; assert_in_delta(0.13561243204469065, worksheet.results_w122, 0.002); end
  def test_results_e123; assert_equal("Biomass Gasification Plant (BioSNG) ", worksheet.results_e123.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f123; assert_in_delta(0.0, (worksheet.results_f123||0), 0.002); end
  def test_results_g123; assert_in_delta(0.0, (worksheet.results_g123||0), 0.002); end
  def test_results_h123; assert_in_delta(0.0, (worksheet.results_h123||0), 0.002); end
  def test_results_i123; assert_in_delta(0.0, (worksheet.results_i123||0), 0.002); end
  def test_results_j123; assert_in_delta(0.0, (worksheet.results_j123||0), 0.002); end
  def test_results_k123; assert_in_delta(0.0, (worksheet.results_k123||0), 0.002); end
  def test_results_l123; assert_in_delta(0.0, (worksheet.results_l123||0), 0.002); end
  def test_results_m123; assert_in_delta(0.0, (worksheet.results_m123||0), 0.002); end
  def test_results_n123; assert_in_delta(0.0, (worksheet.results_n123||0), 0.002); end
  def test_results_o123; assert_in_delta(0.0, (worksheet.results_o123||0), 0.002); end
  def test_results_p123; assert_in_delta(0.0, (worksheet.results_p123||0), 0.002); end
  def test_results_q123; assert_in_delta(0.0, (worksheet.results_q123||0), 0.002); end
  def test_results_r123; assert_in_delta(0.0, (worksheet.results_r123||0), 0.002); end
  def test_results_s123; assert_in_delta(0.0, (worksheet.results_s123||0), 0.002); end
  def test_results_t123; assert_in_delta(0.0, (worksheet.results_t123||0), 0.002); end
  def test_results_u123; assert_in_delta(0.0, (worksheet.results_u123||0), 0.002); end
  def test_results_v123; assert_in_delta(0.0, (worksheet.results_v123||0), 0.002); end
  def test_results_w123; assert_in_delta(0.0, (worksheet.results_w123||0), 0.002); end
  def test_results_e124; assert_equal("Biofuel Plant ", worksheet.results_e124.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f124; assert_in_delta(0.00840076988652702, worksheet.results_f124, 0.002); end
  def test_results_g124; assert_in_delta(0.008606123673125078, worksheet.results_g124, 0.002); end
  def test_results_h124; assert_in_delta(0.016422575043824265, worksheet.results_h124, 0.002); end
  def test_results_i124; assert_in_delta(0.021852672249321727, worksheet.results_i124, 0.002); end
  def test_results_j124; assert_in_delta(0.02493873163370769, worksheet.results_j124, 0.002); end
  def test_results_k124; assert_in_delta(0.08922020546930881, worksheet.results_k124, 0.002); end
  def test_results_l124; assert_in_delta(0.15703781578042303, worksheet.results_l124, 0.002); end
  def test_results_m124; assert_in_delta(0.19682047134992434, worksheet.results_m124, 0.002); end
  def test_results_n124; assert_in_delta(0.19849447076328897, worksheet.results_n124, 0.002); end
  def test_results_o124; assert_in_delta(0.19914948468042415, worksheet.results_o124, 0.002); end
  def test_results_p124; assert_in_delta(0.2027486975048282, worksheet.results_p124, 0.002); end
  def test_results_q124; assert_in_delta(0.20664237152561923, worksheet.results_q124, 0.002); end
  def test_results_r124; assert_in_delta(0.21088070190915076, worksheet.results_r124, 0.002); end
  def test_results_s124; assert_in_delta(0.21529967764528357, worksheet.results_s124, 0.002); end
  def test_results_t124; assert_in_delta(0.2197488985275161, worksheet.results_t124, 0.002); end
  def test_results_u124; assert_in_delta(0.22422847414398725, worksheet.results_u124, 0.002); end
  def test_results_v124; assert_in_delta(0.2231788172646479, worksheet.results_v124, 0.002); end
  def test_results_w124; assert_in_delta(0.22151779071431854, worksheet.results_w124, 0.002); end
  def test_results_e125; assert_equal("Energy from Waste ", worksheet.results_e125.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f125; assert_in_delta(0.447196557322895, worksheet.results_f125, 0.002); end
  def test_results_g125; assert_in_delta(0.6741201731037033, worksheet.results_g125, 0.002); end
  def test_results_h125; assert_in_delta(0.6822309377199879, worksheet.results_h125, 0.002); end
  def test_results_i125; assert_in_delta(0.6802131284002014, worksheet.results_i125, 0.002); end
  def test_results_j125; assert_in_delta(0.6717653745845423, worksheet.results_j125, 0.002); end
  def test_results_k125; assert_in_delta(0.6145354138542063, worksheet.results_k125, 0.002); end
  def test_results_l125; assert_in_delta(0.5529517305887596, worksheet.results_l125, 0.002); end
  def test_results_m125; assert_in_delta(0.5196703853342325, worksheet.results_m125, 0.002); end
  def test_results_n125; assert_in_delta(0.479939607274211, worksheet.results_n125, 0.002); end
  def test_results_o125; assert_in_delta(0.44123218919975415, worksheet.results_o125, 0.002); end
  def test_results_p125; assert_in_delta(0.43193107813707177, worksheet.results_p125, 0.002); end
  def test_results_q125; assert_in_delta(0.4250802802651999, worksheet.results_q125, 0.002); end
  def test_results_r125; assert_in_delta(0.41407397985306527, worksheet.results_r125, 0.002); end
  def test_results_s125; assert_in_delta(0.40442251452614186, worksheet.results_s125, 0.002); end
  def test_results_t125; assert_in_delta(0.39590085329143887, worksheet.results_t125, 0.002); end
  def test_results_u125; assert_in_delta(0.3882139539556127, worksheet.results_u125, 0.002); end
  def test_results_v125; assert_in_delta(0.3870854166666667, worksheet.results_v125, 0.002); end
  def test_results_w125; assert_in_delta(0.3870854166666667, worksheet.results_w125, 0.002); end
  def test_results_e126; assert_equal("Biomass Gasification Plant (BioSNG) with CCS ", worksheet.results_e126.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f126; assert_in_delta(0.0, (worksheet.results_f126||0), 0.002); end
  def test_results_g126; assert_in_delta(0.0, (worksheet.results_g126||0), 0.002); end
  def test_results_h126; assert_in_delta(0.0, (worksheet.results_h126||0), 0.002); end
  def test_results_i126; assert_in_delta(0.0, (worksheet.results_i126||0), 0.002); end
  def test_results_j126; assert_in_delta(0.0, (worksheet.results_j126||0), 0.002); end
  def test_results_k126; assert_in_delta(0.0, (worksheet.results_k126||0), 0.002); end
  def test_results_l126; assert_in_delta(0.0, (worksheet.results_l126||0), 0.002); end
  def test_results_m126; assert_in_delta(0.0, (worksheet.results_m126||0), 0.002); end
  def test_results_n126; assert_in_delta(0.0, (worksheet.results_n126||0), 0.002); end
  def test_results_o126; assert_in_delta(0.0, (worksheet.results_o126||0), 0.002); end
  def test_results_p126; assert_in_delta(0.0, (worksheet.results_p126||0), 0.002); end
  def test_results_q126; assert_in_delta(0.0, (worksheet.results_q126||0), 0.002); end
  def test_results_r126; assert_in_delta(0.0, (worksheet.results_r126||0), 0.002); end
  def test_results_s126; assert_in_delta(0.0, (worksheet.results_s126||0), 0.002); end
  def test_results_t126; assert_in_delta(0.0, (worksheet.results_t126||0), 0.002); end
  def test_results_u126; assert_in_delta(0.0, (worksheet.results_u126||0), 0.002); end
  def test_results_v126; assert_in_delta(0.0, (worksheet.results_v126||0), 0.002); end
  def test_results_w126; assert_in_delta(0.0, (worksheet.results_w126||0), 0.002); end
  def test_results_e127; assert_equal("Biofuel Plant with CCS ", worksheet.results_e127.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f127; assert_in_delta(0.0, (worksheet.results_f127||0), 0.002); end
  def test_results_g127; assert_in_delta(0.0, (worksheet.results_g127||0), 0.002); end
  def test_results_h127; assert_in_delta(0.0, (worksheet.results_h127||0), 0.002); end
  def test_results_i127; assert_in_delta(0.0, (worksheet.results_i127||0), 0.002); end
  def test_results_j127; assert_in_delta(-0.0892912812676131, worksheet.results_j127, 0.002); end
  def test_results_k127; assert_in_delta(-0.271164844035539, worksheet.results_k127, 0.002); end
  def test_results_l127; assert_in_delta(-0.559452310051154, worksheet.results_l127, 0.002); end
  def test_results_m127; assert_in_delta(-0.8911437059561661, worksheet.results_m127, 0.002); end
  def test_results_n127; assert_in_epsilon(-1.1582987399950146, worksheet.results_n127, 0.002); end
  def test_results_o127; assert_in_epsilon(-1.442758113696935, worksheet.results_o127, 0.002); end
  def test_results_p127; assert_in_epsilon(-1.474205426911114, worksheet.results_p127, 0.002); end
  def test_results_q127; assert_in_epsilon(-1.4922034382558074, worksheet.results_q127, 0.002); end
  def test_results_r127; assert_in_epsilon(-1.5117945796605676, worksheet.results_r127, 0.002); end
  def test_results_s127; assert_in_epsilon(-1.5322207311581413, worksheet.results_s127, 0.002); end
  def test_results_t127; assert_in_epsilon(-1.5527866869844074, worksheet.results_t127, 0.002); end
  def test_results_u127; assert_in_epsilon(-1.573492953696555, worksheet.results_u127, 0.002); end
  def test_results_v127; assert_in_epsilon(-1.5686410487036078, worksheet.results_v127, 0.002); end
  def test_results_w127; assert_in_epsilon(-1.5609631654147056, worksheet.results_w127, 0.002); end
  def test_results_e128; assert_equal("Energy from Waste with CCS ", worksheet.results_e128.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f128; assert_in_delta(0.0, (worksheet.results_f128||0), 0.002); end
  def test_results_g128; assert_in_delta(0.0, (worksheet.results_g128||0), 0.002); end
  def test_results_h128; assert_in_delta(0.0, (worksheet.results_h128||0), 0.002); end
  def test_results_i128; assert_in_delta(0.0, (worksheet.results_i128||0), 0.002); end
  def test_results_j128; assert_in_delta(-0.517205369180875, worksheet.results_j128, 0.002); end
  def test_results_k128; assert_in_delta(-0.9831135579912621, worksheet.results_k128, 0.002); end
  def test_results_l128; assert_in_epsilon(-1.3908877777606776, worksheet.results_l128, 0.002); end
  def test_results_m128; assert_in_epsilon(-1.829258310708213, worksheet.results_m128, 0.002); end
  def test_results_n128; assert_in_epsilon(-2.219430624825458, worksheet.results_n128, 0.002); end
  def test_results_o128; assert_in_epsilon(-2.577206802022186, worksheet.results_o128, 0.002); end
  def test_results_p128; assert_in_epsilon(-2.5489840665859513, worksheet.results_p128, 0.002); end
  def test_results_q128; assert_in_epsilon(-2.5085549900441135, worksheet.results_q128, 0.002); end
  def test_results_r128; assert_in_epsilon(-2.443602765481827, worksheet.results_r128, 0.002); end
  def test_results_s128; assert_in_epsilon(-2.3866459207841944, worksheet.results_s128, 0.002); end
  def test_results_t128; assert_in_epsilon(-2.336356465341935, worksheet.results_t128, 0.002); end
  def test_results_u128; assert_in_epsilon(-2.2909932467169183, worksheet.results_u128, 0.002); end
  def test_results_v128; assert_in_epsilon(-2.2843333333333335, worksheet.results_v128, 0.002); end
  def test_results_w128; assert_in_epsilon(-2.2843333333333335, worksheet.results_w128, 0.002); end
  def test_results_e129; assert_equal("Landfill Gas Release ", worksheet.results_e129.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f129; assert_in_epsilon(13.770505546875004, worksheet.results_f129, 0.002); end
  def test_results_g129; assert_in_epsilon(13.367937515625004, worksheet.results_g129, 0.002); end
  def test_results_h129; assert_in_epsilon(12.729509665039066, worksheet.results_h129, 0.002); end
  def test_results_i129; assert_in_epsilon(11.908507748779298, worksheet.results_i129, 0.002); end
  def test_results_j129; assert_in_epsilon(10.944896082092287, worksheet.results_j129, 0.002); end
  def test_results_k129; assert_in_epsilon(9.868647901412963, worksheet.results_k129, 0.002); end
  def test_results_l129; assert_in_epsilon(8.702243134067537, worksheet.results_l129, 0.002); end
  def test_results_m129; assert_in_epsilon(7.462541725550651, worksheet.results_m129, 0.002); end
  def test_results_n129; assert_in_epsilon(6.532765669162988, worksheet.results_n129, 0.002); end
  def test_results_o129; assert_in_epsilon(5.835433626872242, worksheet.results_o129, 0.002); end
  def test_results_p129; assert_in_epsilon(5.312434595154181, worksheet.results_p129, 0.002); end
  def test_results_q129; assert_in_epsilon(4.920185321365636, worksheet.results_q129, 0.002); end
  def test_results_r129; assert_in_epsilon(4.625998366024227, worksheet.results_r129, 0.002); end
  def test_results_s129; assert_in_epsilon(4.40535814951817, worksheet.results_s129, 0.002); end
  def test_results_t129; assert_in_epsilon(4.239877987138627, worksheet.results_t129, 0.002); end
  def test_results_u129; assert_in_epsilon(4.11576786535397, worksheet.results_u129, 0.002); end
  def test_results_v129; assert_in_epsilon(4.022685274015478, worksheet.results_v129, 0.002); end
  def test_results_w129; assert_in_epsilon(3.952873330511607, worksheet.results_w129, 0.002); end
  def test_results_e130; assert_equal("Direct Air Capture ", worksheet.results_e130.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f130; assert_in_delta(0.0, (worksheet.results_f130||0), 0.002); end
  def test_results_g130; assert_in_delta(0.0, (worksheet.results_g130||0), 0.002); end
  def test_results_h130; assert_in_delta(0.0, (worksheet.results_h130||0), 0.002); end
  def test_results_i130; assert_in_delta(0.0, (worksheet.results_i130||0), 0.002); end
  def test_results_j130; assert_in_delta(0.0, (worksheet.results_j130||0), 0.002); end
  def test_results_k130; assert_in_delta(0.0, (worksheet.results_k130||0), 0.002); end
  def test_results_l130; assert_in_delta(-0.8333333333333333, worksheet.results_l130, 0.002); end
  def test_results_m130; assert_in_epsilon(-1.6666666666666665, worksheet.results_m130, 0.002); end
  def test_results_n130; assert_in_epsilon(-2.5, worksheet.results_n130, 0.002); end
  def test_results_o130; assert_in_epsilon(-3.333333333333333, worksheet.results_o130, 0.002); end
  def test_results_p130; assert_in_epsilon(-4.166666666666666, worksheet.results_p130, 0.002); end
  def test_results_q130; assert_in_epsilon(-5.0, worksheet.results_q130, 0.002); end
  def test_results_r130; assert_in_epsilon(-5.0, worksheet.results_r130, 0.002); end
  def test_results_s130; assert_in_epsilon(-5.0, worksheet.results_s130, 0.002); end
  def test_results_t130; assert_in_epsilon(-5.0, worksheet.results_t130, 0.002); end
  def test_results_u130; assert_in_epsilon(-5.0, worksheet.results_u130, 0.002); end
  def test_results_v130; assert_in_epsilon(-5.0, worksheet.results_v130, 0.002); end
  def test_results_w130; assert_in_epsilon(-5.0, worksheet.results_w130, 0.002); end
  def test_results_e131; assert_equal("Enhanced Weathering", worksheet.results_e131.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f131; assert_in_delta(0.0, (worksheet.results_f131||0), 0.002); end
  def test_results_g131; assert_in_delta(0.0, (worksheet.results_g131||0), 0.002); end
  def test_results_h131; assert_in_delta(0.0, (worksheet.results_h131||0), 0.002); end
  def test_results_i131; assert_in_delta(0.0, (worksheet.results_i131||0), 0.002); end
  def test_results_j131; assert_in_delta(0.0, (worksheet.results_j131||0), 0.002); end
  def test_results_k131; assert_in_delta(0.0, (worksheet.results_k131||0), 0.002); end
  def test_results_l131; assert_in_delta(-0.3333333333333333, worksheet.results_l131, 0.002); end
  def test_results_m131; assert_in_delta(-0.6666666666666666, worksheet.results_m131, 0.002); end
  def test_results_n131; assert_in_delta(-1.0, worksheet.results_n131, 0.002); end
  def test_results_o131; assert_in_epsilon(-1.3333333333333333, worksheet.results_o131, 0.002); end
  def test_results_p131; assert_in_epsilon(-1.6666666666666667, worksheet.results_p131, 0.002); end
  def test_results_q131; assert_in_epsilon(-2.0, worksheet.results_q131, 0.002); end
  def test_results_r131; assert_in_epsilon(-2.0, worksheet.results_r131, 0.002); end
  def test_results_s131; assert_in_epsilon(-2.0, worksheet.results_s131, 0.002); end
  def test_results_t131; assert_in_epsilon(-2.0, worksheet.results_t131, 0.002); end
  def test_results_u131; assert_in_epsilon(-2.0, worksheet.results_u131, 0.002); end
  def test_results_v131; assert_in_epsilon(-2.0, worksheet.results_v131, 0.002); end
  def test_results_w131; assert_in_epsilon(-2.0, worksheet.results_w131, 0.002); end
  def test_results_e132; assert_equal("Hydrogen Production - Biomass Gasification with CCS", worksheet.results_e132.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f132; assert_in_delta(0.0, (worksheet.results_f132||0), 0.002); end
  def test_results_g132; assert_in_delta(0.0, (worksheet.results_g132||0), 0.002); end
  def test_results_h132; assert_in_epsilon(-5.56875, worksheet.results_h132, 0.002); end
  def test_results_i132; assert_in_epsilon(-11.1375, worksheet.results_i132, 0.002); end
  def test_results_j132; assert_in_epsilon(-16.70625, worksheet.results_j132, 0.002); end
  def test_results_k132; assert_in_epsilon(-22.555648302726766, worksheet.results_k132, 0.002); end
  def test_results_l132; assert_in_epsilon(-28.54654403567447, worksheet.results_l132, 0.002); end
  def test_results_m132; assert_in_epsilon(-34.679648241206024, worksheet.results_m132, 0.002); end
  def test_results_n132; assert_in_epsilon(-35.10486577181208, worksheet.results_n132, 0.002); end
  def test_results_o132; assert_in_epsilon(-35.53151260504201, worksheet.results_o132, 0.002); end
  def test_results_p132; assert_in_epsilon(-35.95959595959595, worksheet.results_p132, 0.002); end
  def test_results_q132; assert_in_epsilon(-35.95959595959595, worksheet.results_q132, 0.002); end
  def test_results_r132; assert_in_epsilon(-35.95959595959595, worksheet.results_r132, 0.002); end
  def test_results_s132; assert_in_epsilon(-35.95959595959595, worksheet.results_s132, 0.002); end
  def test_results_t132; assert_in_epsilon(-35.95959595959595, worksheet.results_t132, 0.002); end
  def test_results_u132; assert_in_epsilon(-35.95959595959595, worksheet.results_u132, 0.002); end
  def test_results_v132; assert_in_epsilon(-35.95959595959595, worksheet.results_v132, 0.002); end
  def test_results_w132; assert_in_epsilon(-35.95959595959595, worksheet.results_w132, 0.002); end
  def test_results_e133; assert_equal("Hydrogen Production - Steam Methane Reformation with CCS", worksheet.results_e133.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f133; assert_in_delta(0.0, (worksheet.results_f133||0), 0.002); end
  def test_results_g133; assert_in_delta(0.0, (worksheet.results_g133||0), 0.002); end
  def test_results_h133; assert_in_delta(0.34410645643964977, worksheet.results_h133, 0.002); end
  def test_results_i133; assert_in_delta(0.5718503454869444, worksheet.results_i133, 0.002); end
  def test_results_j133; assert_in_epsilon(1.15992267928649, worksheet.results_j133, 0.002); end
  def test_results_k133; assert_in_epsilon(1.4852166838080363, worksheet.results_k133, 0.002); end
  def test_results_l133; assert_in_epsilon(1.77958077711713, worksheet.results_l133, 0.002); end
  def test_results_m133; assert_in_epsilon(2.0428595325242624, worksheet.results_m133, 0.002); end
  def test_results_n133; assert_in_epsilon(1.949911268749523, worksheet.results_n133, 0.002); end
  def test_results_o133; assert_in_epsilon(1.8566505738360455, worksheet.results_o133, 0.002); end
  def test_results_p133; assert_in_epsilon(1.7630758698487863, worksheet.results_p133, 0.002); end
  def test_results_q133; assert_in_epsilon(1.7630758698487863, worksheet.results_q133, 0.002); end
  def test_results_r133; assert_in_epsilon(1.7630758698487863, worksheet.results_r133, 0.002); end
  def test_results_s133; assert_in_epsilon(1.7630758698487863, worksheet.results_s133, 0.002); end
  def test_results_t133; assert_in_epsilon(1.7630758698487863, worksheet.results_t133, 0.002); end
  def test_results_u133; assert_in_epsilon(1.7630758698487863, worksheet.results_u133, 0.002); end
  def test_results_v133; assert_in_epsilon(1.7630758698487863, worksheet.results_v133, 0.002); end
  def test_results_w133; assert_in_epsilon(1.7630758698487863, worksheet.results_w133, 0.002); end
  def test_results_e134; assert_equal("Zero Carbon hydrogen imports", worksheet.results_e134.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f134; assert_in_delta(0.0, (worksheet.results_f134||0), 0.002); end
  def test_results_g134; assert_in_delta(0.0, (worksheet.results_g134||0), 0.002); end
  def test_results_h134; assert_in_delta(0.0, (worksheet.results_h134||0), 0.002); end
  def test_results_i134; assert_in_delta(0.0, (worksheet.results_i134||0), 0.002); end
  def test_results_j134; assert_in_delta(0.0, (worksheet.results_j134||0), 0.002); end
  def test_results_k134; assert_in_delta(0.0, (worksheet.results_k134||0), 0.002); end
  def test_results_l134; assert_in_delta(0.0, (worksheet.results_l134||0), 0.002); end
  def test_results_m134; assert_in_delta(0.0, (worksheet.results_m134||0), 0.002); end
  def test_results_n134; assert_in_delta(0.0, (worksheet.results_n134||0), 0.002); end
  def test_results_o134; assert_in_delta(0.0, (worksheet.results_o134||0), 0.002); end
  def test_results_p134; assert_in_delta(0.0, (worksheet.results_p134||0), 0.002); end
  def test_results_q134; assert_in_delta(0.0, (worksheet.results_q134||0), 0.002); end
  def test_results_r134; assert_in_delta(0.0, (worksheet.results_r134||0), 0.002); end
  def test_results_s134; assert_in_delta(0.0, (worksheet.results_s134||0), 0.002); end
  def test_results_t134; assert_in_delta(0.0, (worksheet.results_t134||0), 0.002); end
  def test_results_u134; assert_in_delta(0.0, (worksheet.results_u134||0), 0.002); end
  def test_results_v134; assert_in_delta(0.0, (worksheet.results_v134||0), 0.002); end
  def test_results_w134; assert_in_delta(0.0, (worksheet.results_w134||0), 0.002); end
  def test_results_e135; assert_equal("Hydrogen Production - Electrolysis", worksheet.results_e135.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f135; assert_in_delta(0.0, (worksheet.results_f135||0), 0.002); end
  def test_results_g135; assert_in_delta(0.0, (worksheet.results_g135||0), 0.002); end
  def test_results_h135; assert_in_delta(0.0, (worksheet.results_h135||0), 0.002); end
  def test_results_i135; assert_in_delta(0.0, (worksheet.results_i135||0), 0.002); end
  def test_results_j135; assert_in_delta(0.0, (worksheet.results_j135||0), 0.002); end
  def test_results_k135; assert_in_delta(0.0, (worksheet.results_k135||0), 0.002); end
  def test_results_l135; assert_in_delta(0.0, (worksheet.results_l135||0), 0.002); end
  def test_results_m135; assert_in_delta(0.0, (worksheet.results_m135||0), 0.002); end
  def test_results_n135; assert_in_delta(0.0, (worksheet.results_n135||0), 0.002); end
  def test_results_o135; assert_in_delta(0.0, (worksheet.results_o135||0), 0.002); end
  def test_results_p135; assert_in_delta(0.0, (worksheet.results_p135||0), 0.002); end
  def test_results_q135; assert_in_delta(0.0, (worksheet.results_q135||0), 0.002); end
  def test_results_r135; assert_in_delta(0.0, (worksheet.results_r135||0), 0.002); end
  def test_results_s135; assert_in_delta(0.0, (worksheet.results_s135||0), 0.002); end
  def test_results_t135; assert_in_delta(0.0, (worksheet.results_t135||0), 0.002); end
  def test_results_u135; assert_in_delta(0.0, (worksheet.results_u135||0), 0.002); end
  def test_results_v135; assert_in_delta(0.0, (worksheet.results_v135||0), 0.002); end
  def test_results_w135; assert_in_delta(0.0, (worksheet.results_w135||0), 0.002); end
  def test_results_e136; assert_equal("Seasonal Hydrogen Storage", worksheet.results_e136.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f136; assert_in_delta(0.0, (worksheet.results_f136||0), 0.002); end
  def test_results_g136; assert_in_delta(0.0, (worksheet.results_g136||0), 0.002); end
  def test_results_h136; assert_in_delta(0.0, (worksheet.results_h136||0), 0.002); end
  def test_results_i136; assert_in_delta(0.0, (worksheet.results_i136||0), 0.002); end
  def test_results_j136; assert_in_delta(0.0, (worksheet.results_j136||0), 0.002); end
  def test_results_k136; assert_in_delta(0.0, (worksheet.results_k136||0), 0.002); end
  def test_results_l136; assert_in_delta(0.0, (worksheet.results_l136||0), 0.002); end
  def test_results_m136; assert_in_delta(0.0, (worksheet.results_m136||0), 0.002); end
  def test_results_n136; assert_in_delta(0.0, (worksheet.results_n136||0), 0.002); end
  def test_results_o136; assert_in_delta(0.0, (worksheet.results_o136||0), 0.002); end
  def test_results_p136; assert_in_delta(0.0, (worksheet.results_p136||0), 0.002); end
  def test_results_q136; assert_in_delta(0.0, (worksheet.results_q136||0), 0.002); end
  def test_results_r136; assert_in_delta(0.0, (worksheet.results_r136||0), 0.002); end
  def test_results_s136; assert_in_delta(0.0, (worksheet.results_s136||0), 0.002); end
  def test_results_t136; assert_in_delta(0.0, (worksheet.results_t136||0), 0.002); end
  def test_results_u136; assert_in_delta(0.0, (worksheet.results_u136||0), 0.002); end
  def test_results_v136; assert_in_delta(0.0, (worksheet.results_v136||0), 0.002); end
  def test_results_w136; assert_in_delta(0.0, (worksheet.results_w136||0), 0.002); end
  def test_results_e137; assert_equal("Electricity - Biomass CCS ", worksheet.results_e137.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f137; assert_in_epsilon(-7.769468013989542, worksheet.results_f137, 0.002); end
  def test_results_g137; assert_in_epsilon(-11.437252529159817, worksheet.results_g137, 0.002); end
  def test_results_h137; assert_in_epsilon(-11.459298136230032, worksheet.results_h137, 0.002); end
  def test_results_i137; assert_in_epsilon(-9.10323061480098, worksheet.results_i137, 0.002); end
  def test_results_j137; assert_in_epsilon(-6.106033114322072, worksheet.results_j137, 0.002); end
  def test_results_k137; assert_in_delta(0.0, (worksheet.results_k137||0), 0.002); end
  def test_results_l137; assert_in_delta(0.0, (worksheet.results_l137||0), 0.002); end
  def test_results_m137; assert_in_delta(0.0, (worksheet.results_m137||0), 0.002); end
  def test_results_n137; assert_in_delta(0.0, (worksheet.results_n137||0), 0.002); end
  def test_results_o137; assert_in_delta(0.0, (worksheet.results_o137||0), 0.002); end
  def test_results_p137; assert_in_delta(0.0, (worksheet.results_p137||0), 0.002); end
  def test_results_q137; assert_in_delta(0.0, (worksheet.results_q137||0), 0.002); end
  def test_results_r137; assert_in_delta(0.0, (worksheet.results_r137||0), 0.002); end
  def test_results_s137; assert_in_delta(0.0, (worksheet.results_s137||0), 0.002); end
  def test_results_t137; assert_in_delta(0.0, (worksheet.results_t137||0), 0.002); end
  def test_results_u137; assert_in_delta(0.0, (worksheet.results_u137||0), 0.002); end
  def test_results_v137; assert_in_delta(0.0, (worksheet.results_v137||0), 0.002); end
  def test_results_w137; assert_in_delta(0.0, (worksheet.results_w137||0), 0.002); end
  def test_results_e138; assert_equal("Electricity - Nuclear ", worksheet.results_e138.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f138; assert_in_delta(0.0, (worksheet.results_f138||0), 0.002); end
  def test_results_g138; assert_in_delta(0.0, (worksheet.results_g138||0), 0.002); end
  def test_results_h138; assert_in_delta(0.0, (worksheet.results_h138||0), 0.002); end
  def test_results_i138; assert_in_delta(0.0, (worksheet.results_i138||0), 0.002); end
  def test_results_j138; assert_in_delta(0.0, (worksheet.results_j138||0), 0.002); end
  def test_results_k138; assert_in_delta(0.0, (worksheet.results_k138||0), 0.002); end
  def test_results_l138; assert_in_delta(0.0, (worksheet.results_l138||0), 0.002); end
  def test_results_m138; assert_in_delta(0.0, (worksheet.results_m138||0), 0.002); end
  def test_results_n138; assert_in_delta(0.0, (worksheet.results_n138||0), 0.002); end
  def test_results_o138; assert_in_delta(0.0, (worksheet.results_o138||0), 0.002); end
  def test_results_p138; assert_in_delta(0.0, (worksheet.results_p138||0), 0.002); end
  def test_results_q138; assert_in_delta(0.0, (worksheet.results_q138||0), 0.002); end
  def test_results_r138; assert_in_delta(0.0, (worksheet.results_r138||0), 0.002); end
  def test_results_s138; assert_in_delta(0.0, (worksheet.results_s138||0), 0.002); end
  def test_results_t138; assert_in_delta(0.0, (worksheet.results_t138||0), 0.002); end
  def test_results_u138; assert_in_delta(0.0, (worksheet.results_u138||0), 0.002); end
  def test_results_v138; assert_in_delta(0.0, (worksheet.results_v138||0), 0.002); end
  def test_results_w138; assert_in_delta(0.0, (worksheet.results_w138||0), 0.002); end
  def test_results_e139; assert_equal("Electricity - Hydro ", worksheet.results_e139.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f139; assert_in_delta(0.0, (worksheet.results_f139||0), 0.002); end
  def test_results_g139; assert_in_delta(0.0, (worksheet.results_g139||0), 0.002); end
  def test_results_h139; assert_in_delta(0.0, (worksheet.results_h139||0), 0.002); end
  def test_results_i139; assert_in_delta(0.0, (worksheet.results_i139||0), 0.002); end
  def test_results_j139; assert_in_delta(0.0, (worksheet.results_j139||0), 0.002); end
  def test_results_k139; assert_in_delta(0.0, (worksheet.results_k139||0), 0.002); end
  def test_results_l139; assert_in_delta(0.0, (worksheet.results_l139||0), 0.002); end
  def test_results_m139; assert_in_delta(0.0, (worksheet.results_m139||0), 0.002); end
  def test_results_n139; assert_in_delta(0.0, (worksheet.results_n139||0), 0.002); end
  def test_results_o139; assert_in_delta(0.0, (worksheet.results_o139||0), 0.002); end
  def test_results_p139; assert_in_delta(0.0, (worksheet.results_p139||0), 0.002); end
  def test_results_q139; assert_in_delta(0.0, (worksheet.results_q139||0), 0.002); end
  def test_results_r139; assert_in_delta(0.0, (worksheet.results_r139||0), 0.002); end
  def test_results_s139; assert_in_delta(0.0, (worksheet.results_s139||0), 0.002); end
  def test_results_t139; assert_in_delta(0.0, (worksheet.results_t139||0), 0.002); end
  def test_results_u139; assert_in_delta(0.0, (worksheet.results_u139||0), 0.002); end
  def test_results_v139; assert_in_delta(0.0, (worksheet.results_v139||0), 0.002); end
  def test_results_w139; assert_in_delta(0.0, (worksheet.results_w139||0), 0.002); end
  def test_results_e140; assert_equal("Electricity - Wind (onshore) ", worksheet.results_e140.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f140; assert_in_delta(0.0, (worksheet.results_f140||0), 0.002); end
  def test_results_g140; assert_in_delta(0.0, (worksheet.results_g140||0), 0.002); end
  def test_results_h140; assert_in_delta(0.0, (worksheet.results_h140||0), 0.002); end
  def test_results_i140; assert_in_delta(0.0, (worksheet.results_i140||0), 0.002); end
  def test_results_j140; assert_in_delta(0.0, (worksheet.results_j140||0), 0.002); end
  def test_results_k140; assert_in_delta(0.0, (worksheet.results_k140||0), 0.002); end
  def test_results_l140; assert_in_delta(0.0, (worksheet.results_l140||0), 0.002); end
  def test_results_m140; assert_in_delta(0.0, (worksheet.results_m140||0), 0.002); end
  def test_results_n140; assert_in_delta(0.0, (worksheet.results_n140||0), 0.002); end
  def test_results_o140; assert_in_delta(0.0, (worksheet.results_o140||0), 0.002); end
  def test_results_p140; assert_in_delta(0.0, (worksheet.results_p140||0), 0.002); end
  def test_results_q140; assert_in_delta(0.0, (worksheet.results_q140||0), 0.002); end
  def test_results_r140; assert_in_delta(0.0, (worksheet.results_r140||0), 0.002); end
  def test_results_s140; assert_in_delta(0.0, (worksheet.results_s140||0), 0.002); end
  def test_results_t140; assert_in_delta(0.0, (worksheet.results_t140||0), 0.002); end
  def test_results_u140; assert_in_delta(0.0, (worksheet.results_u140||0), 0.002); end
  def test_results_v140; assert_in_delta(0.0, (worksheet.results_v140||0), 0.002); end
  def test_results_w140; assert_in_delta(0.0, (worksheet.results_w140||0), 0.002); end
  def test_results_e141; assert_equal("Electricity - Wind (offshore) ", worksheet.results_e141.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f141; assert_in_delta(0.0, (worksheet.results_f141||0), 0.002); end
  def test_results_g141; assert_in_delta(0.0, (worksheet.results_g141||0), 0.002); end
  def test_results_h141; assert_in_delta(0.0, (worksheet.results_h141||0), 0.002); end
  def test_results_i141; assert_in_delta(0.0, (worksheet.results_i141||0), 0.002); end
  def test_results_j141; assert_in_delta(0.0, (worksheet.results_j141||0), 0.002); end
  def test_results_k141; assert_in_delta(0.0, (worksheet.results_k141||0), 0.002); end
  def test_results_l141; assert_in_delta(0.0, (worksheet.results_l141||0), 0.002); end
  def test_results_m141; assert_in_delta(0.0, (worksheet.results_m141||0), 0.002); end
  def test_results_n141; assert_in_delta(0.0, (worksheet.results_n141||0), 0.002); end
  def test_results_o141; assert_in_delta(0.0, (worksheet.results_o141||0), 0.002); end
  def test_results_p141; assert_in_delta(0.0, (worksheet.results_p141||0), 0.002); end
  def test_results_q141; assert_in_delta(0.0, (worksheet.results_q141||0), 0.002); end
  def test_results_r141; assert_in_delta(0.0, (worksheet.results_r141||0), 0.002); end
  def test_results_s141; assert_in_delta(0.0, (worksheet.results_s141||0), 0.002); end
  def test_results_t141; assert_in_delta(0.0, (worksheet.results_t141||0), 0.002); end
  def test_results_u141; assert_in_delta(0.0, (worksheet.results_u141||0), 0.002); end
  def test_results_v141; assert_in_delta(0.0, (worksheet.results_v141||0), 0.002); end
  def test_results_w141; assert_in_delta(0.0, (worksheet.results_w141||0), 0.002); end
  def test_results_e142; assert_equal("Electricity - Solar PV ", worksheet.results_e142.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f142; assert_in_delta(0.0, (worksheet.results_f142||0), 0.002); end
  def test_results_g142; assert_in_delta(0.0, (worksheet.results_g142||0), 0.002); end
  def test_results_h142; assert_in_delta(0.0, (worksheet.results_h142||0), 0.002); end
  def test_results_i142; assert_in_delta(0.0, (worksheet.results_i142||0), 0.002); end
  def test_results_j142; assert_in_delta(0.0, (worksheet.results_j142||0), 0.002); end
  def test_results_k142; assert_in_delta(0.0, (worksheet.results_k142||0), 0.002); end
  def test_results_l142; assert_in_delta(0.0, (worksheet.results_l142||0), 0.002); end
  def test_results_m142; assert_in_delta(0.0, (worksheet.results_m142||0), 0.002); end
  def test_results_n142; assert_in_delta(0.0, (worksheet.results_n142||0), 0.002); end
  def test_results_o142; assert_in_delta(0.0, (worksheet.results_o142||0), 0.002); end
  def test_results_p142; assert_in_delta(0.0, (worksheet.results_p142||0), 0.002); end
  def test_results_q142; assert_in_delta(0.0, (worksheet.results_q142||0), 0.002); end
  def test_results_r142; assert_in_delta(0.0, (worksheet.results_r142||0), 0.002); end
  def test_results_s142; assert_in_delta(0.0, (worksheet.results_s142||0), 0.002); end
  def test_results_t142; assert_in_delta(0.0, (worksheet.results_t142||0), 0.002); end
  def test_results_u142; assert_in_delta(0.0, (worksheet.results_u142||0), 0.002); end
  def test_results_v142; assert_in_delta(0.0, (worksheet.results_v142||0), 0.002); end
  def test_results_w142; assert_in_delta(0.0, (worksheet.results_w142||0), 0.002); end
  def test_results_e143; assert_equal("Electricity - Tidal Stream ", worksheet.results_e143.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f143; assert_in_delta(0.0, (worksheet.results_f143||0), 0.002); end
  def test_results_g143; assert_in_delta(0.0, (worksheet.results_g143||0), 0.002); end
  def test_results_h143; assert_in_delta(0.0, (worksheet.results_h143||0), 0.002); end
  def test_results_i143; assert_in_delta(0.0, (worksheet.results_i143||0), 0.002); end
  def test_results_j143; assert_in_delta(0.0, (worksheet.results_j143||0), 0.002); end
  def test_results_k143; assert_in_delta(0.0, (worksheet.results_k143||0), 0.002); end
  def test_results_l143; assert_in_delta(0.0, (worksheet.results_l143||0), 0.002); end
  def test_results_m143; assert_in_delta(0.0, (worksheet.results_m143||0), 0.002); end
  def test_results_n143; assert_in_delta(0.0, (worksheet.results_n143||0), 0.002); end
  def test_results_o143; assert_in_delta(0.0, (worksheet.results_o143||0), 0.002); end
  def test_results_p143; assert_in_delta(0.0, (worksheet.results_p143||0), 0.002); end
  def test_results_q143; assert_in_delta(0.0, (worksheet.results_q143||0), 0.002); end
  def test_results_r143; assert_in_delta(0.0, (worksheet.results_r143||0), 0.002); end
  def test_results_s143; assert_in_delta(0.0, (worksheet.results_s143||0), 0.002); end
  def test_results_t143; assert_in_delta(0.0, (worksheet.results_t143||0), 0.002); end
  def test_results_u143; assert_in_delta(0.0, (worksheet.results_u143||0), 0.002); end
  def test_results_v143; assert_in_delta(0.0, (worksheet.results_v143||0), 0.002); end
  def test_results_w143; assert_in_delta(0.0, (worksheet.results_w143||0), 0.002); end
  def test_results_e144; assert_equal("Electricity - Tidal Range ", worksheet.results_e144.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f144; assert_in_delta(0.0, (worksheet.results_f144||0), 0.002); end
  def test_results_g144; assert_in_delta(0.0, (worksheet.results_g144||0), 0.002); end
  def test_results_h144; assert_in_delta(0.0, (worksheet.results_h144||0), 0.002); end
  def test_results_i144; assert_in_delta(0.0, (worksheet.results_i144||0), 0.002); end
  def test_results_j144; assert_in_delta(0.0, (worksheet.results_j144||0), 0.002); end
  def test_results_k144; assert_in_delta(0.0, (worksheet.results_k144||0), 0.002); end
  def test_results_l144; assert_in_delta(0.0, (worksheet.results_l144||0), 0.002); end
  def test_results_m144; assert_in_delta(0.0, (worksheet.results_m144||0), 0.002); end
  def test_results_n144; assert_in_delta(0.0, (worksheet.results_n144||0), 0.002); end
  def test_results_o144; assert_in_delta(0.0, (worksheet.results_o144||0), 0.002); end
  def test_results_p144; assert_in_delta(0.0, (worksheet.results_p144||0), 0.002); end
  def test_results_q144; assert_in_delta(0.0, (worksheet.results_q144||0), 0.002); end
  def test_results_r144; assert_in_delta(0.0, (worksheet.results_r144||0), 0.002); end
  def test_results_s144; assert_in_delta(0.0, (worksheet.results_s144||0), 0.002); end
  def test_results_t144; assert_in_delta(0.0, (worksheet.results_t144||0), 0.002); end
  def test_results_u144; assert_in_delta(0.0, (worksheet.results_u144||0), 0.002); end
  def test_results_v144; assert_in_delta(0.0, (worksheet.results_v144||0), 0.002); end
  def test_results_w144; assert_in_delta(0.0, (worksheet.results_w144||0), 0.002); end
  def test_results_e145; assert_equal("Electricity - Wave ", worksheet.results_e145.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f145; assert_in_delta(0.0, (worksheet.results_f145||0), 0.002); end
  def test_results_g145; assert_in_delta(0.0, (worksheet.results_g145||0), 0.002); end
  def test_results_h145; assert_in_delta(0.0, (worksheet.results_h145||0), 0.002); end
  def test_results_i145; assert_in_delta(0.0, (worksheet.results_i145||0), 0.002); end
  def test_results_j145; assert_in_delta(0.0, (worksheet.results_j145||0), 0.002); end
  def test_results_k145; assert_in_delta(0.0, (worksheet.results_k145||0), 0.002); end
  def test_results_l145; assert_in_delta(0.0, (worksheet.results_l145||0), 0.002); end
  def test_results_m145; assert_in_delta(0.0, (worksheet.results_m145||0), 0.002); end
  def test_results_n145; assert_in_delta(0.0, (worksheet.results_n145||0), 0.002); end
  def test_results_o145; assert_in_delta(0.0, (worksheet.results_o145||0), 0.002); end
  def test_results_p145; assert_in_delta(0.0, (worksheet.results_p145||0), 0.002); end
  def test_results_q145; assert_in_delta(0.0, (worksheet.results_q145||0), 0.002); end
  def test_results_r145; assert_in_delta(0.0, (worksheet.results_r145||0), 0.002); end
  def test_results_s145; assert_in_delta(0.0, (worksheet.results_s145||0), 0.002); end
  def test_results_t145; assert_in_delta(0.0, (worksheet.results_t145||0), 0.002); end
  def test_results_u145; assert_in_delta(0.0, (worksheet.results_u145||0), 0.002); end
  def test_results_v145; assert_in_delta(0.0, (worksheet.results_v145||0), 0.002); end
  def test_results_w145; assert_in_delta(0.0, (worksheet.results_w145||0), 0.002); end
  def test_results_e146; assert_equal("Electricity - Biomass ", worksheet.results_e146.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f146; assert_in_delta(0.3691441966990915, worksheet.results_f146, 0.002); end
  def test_results_g146; assert_in_delta(0.5434085563798341, worksheet.results_g146, 0.002); end
  def test_results_h146; assert_in_delta(0.5444559907599005, worksheet.results_h146, 0.002); end
  def test_results_i146; assert_in_delta(0.4325141369546295, worksheet.results_i146, 0.002); end
  def test_results_j146; assert_in_delta(0.290110813886608, worksheet.results_j146, 0.002); end
  def test_results_k146; assert_in_delta(0.0, (worksheet.results_k146||0), 0.002); end
  def test_results_l146; assert_in_delta(0.0, (worksheet.results_l146||0), 0.002); end
  def test_results_m146; assert_in_delta(0.0, (worksheet.results_m146||0), 0.002); end
  def test_results_n146; assert_in_delta(0.0, (worksheet.results_n146||0), 0.002); end
  def test_results_o146; assert_in_delta(0.0, (worksheet.results_o146||0), 0.002); end
  def test_results_p146; assert_in_delta(0.0, (worksheet.results_p146||0), 0.002); end
  def test_results_q146; assert_in_delta(0.0, (worksheet.results_q146||0), 0.002); end
  def test_results_r146; assert_in_delta(0.0, (worksheet.results_r146||0), 0.002); end
  def test_results_s146; assert_in_delta(0.0, (worksheet.results_s146||0), 0.002); end
  def test_results_t146; assert_in_delta(0.0, (worksheet.results_t146||0), 0.002); end
  def test_results_u146; assert_in_delta(0.0, (worksheet.results_u146||0), 0.002); end
  def test_results_v146; assert_in_delta(0.0, (worksheet.results_v146||0), 0.002); end
  def test_results_w146; assert_in_delta(0.0, (worksheet.results_w146||0), 0.002); end
  def test_results_e147; assert_equal("Electricity - Gas CCS ", worksheet.results_e147.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f147; assert_in_delta(0.0, (worksheet.results_f147||0), 0.002); end
  def test_results_g147; assert_in_delta(0.0, (worksheet.results_g147||0), 0.002); end
  def test_results_h147; assert_in_delta(0.23574055701120716, worksheet.results_h147, 0.002); end
  def test_results_i147; assert_in_delta(0.468178903765014, worksheet.results_i147, 0.002); end
  def test_results_j147; assert_in_delta(0.7065745145056979, worksheet.results_j147, 0.002); end
  def test_results_k147; assert_in_delta(0.9086137764019775, worksheet.results_k147, 0.002); end
  def test_results_l147; assert_in_epsilon(1.0939491355890874, worksheet.results_l147, 0.002); end
  def test_results_m147; assert_in_epsilon(1.2647564171166734, worksheet.results_m147, 0.002); end
  def test_results_n147; assert_in_epsilon(1.2009640392406684, worksheet.results_n147, 0.002); end
  def test_results_o147; assert_in_epsilon(1.143581476177684, worksheet.results_o147, 0.002); end
  def test_results_p147; assert_in_epsilon(1.0857709428534388, worksheet.results_p147, 0.002); end
  def test_results_q147; assert_in_epsilon(1.0853380355002675, worksheet.results_q147, 0.002); end
  def test_results_r147; assert_in_epsilon(1.0852345145312243, worksheet.results_r147, 0.002); end
  def test_results_s147; assert_in_epsilon(1.0851244916075466, worksheet.results_s147, 0.002); end
  def test_results_t147; assert_in_epsilon(1.0850831289212535, worksheet.results_t147, 0.002); end
  def test_results_u147; assert_in_epsilon(1.0850437206148258, worksheet.results_u147, 0.002); end
  def test_results_v147; assert_in_epsilon(1.0849826761844918, worksheet.results_v147, 0.002); end
  def test_results_w147; assert_in_epsilon(1.084656255634223, worksheet.results_w147, 0.002); end
  def test_results_e148; assert_equal("Electricity - Coal Unabated ", worksheet.results_e148.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f148; assert_in_epsilon(23.92396881716982, worksheet.results_f148, 0.002); end
  def test_results_g148; assert_in_epsilon(13.043672639325644, worksheet.results_g148, 0.002); end
  def test_results_h148; assert_in_epsilon(13.06881466369084, worksheet.results_h148, 0.002); end
  def test_results_i148; assert_in_delta(0.0, (worksheet.results_i148||0), 0.002); end
  def test_results_j148; assert_in_delta(0.0, (worksheet.results_j148||0), 0.002); end
  def test_results_k148; assert_in_delta(0.0, (worksheet.results_k148||0), 0.002); end
  def test_results_l148; assert_in_delta(0.0, (worksheet.results_l148||0), 0.002); end
  def test_results_m148; assert_in_delta(0.0, (worksheet.results_m148||0), 0.002); end
  def test_results_n148; assert_in_delta(0.0, (worksheet.results_n148||0), 0.002); end
  def test_results_o148; assert_in_delta(0.0, (worksheet.results_o148||0), 0.002); end
  def test_results_p148; assert_in_delta(0.0, (worksheet.results_p148||0), 0.002); end
  def test_results_q148; assert_in_delta(0.0, (worksheet.results_q148||0), 0.002); end
  def test_results_r148; assert_in_delta(0.0, (worksheet.results_r148||0), 0.002); end
  def test_results_s148; assert_in_delta(0.0, (worksheet.results_s148||0), 0.002); end
  def test_results_t148; assert_in_delta(0.0, (worksheet.results_t148||0), 0.002); end
  def test_results_u148; assert_in_delta(0.0, (worksheet.results_u148||0), 0.002); end
  def test_results_v148; assert_in_delta(0.0, (worksheet.results_v148||0), 0.002); end
  def test_results_w148; assert_in_delta(0.0, (worksheet.results_w148||0), 0.002); end
  def test_results_e149; assert_equal("Electricity - Gas Unabated (CCGT)", worksheet.results_e149.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f149; assert_in_epsilon(83.16796434074912, worksheet.results_f149, 0.002); end
  def test_results_g149; assert_in_epsilon(88.79284209672988, worksheet.results_g149, 0.002); end
  def test_results_h149; assert_in_epsilon(97.0748846055302, worksheet.results_h149, 0.002); end
  def test_results_i149; assert_in_epsilon(103.70448065043479, worksheet.results_i149, 0.002); end
  def test_results_j149; assert_in_epsilon(116.07906995820392, worksheet.results_j149, 0.002); end
  def test_results_k149; assert_in_epsilon(118.04497608717537, worksheet.results_k149, 0.002); end
  def test_results_l149; assert_in_epsilon(103.4411665919102, worksheet.results_l149, 0.002); end
  def test_results_m149; assert_in_epsilon(74.08084216742674, worksheet.results_m149, 0.002); end
  def test_results_n149; assert_in_epsilon(89.8958894096335, worksheet.results_n149, 0.002); end
  def test_results_o149; assert_in_epsilon(106.64839460343987, worksheet.results_o149, 0.002); end
  def test_results_p149; assert_in_epsilon(108.07952991873326, worksheet.results_p149, 0.002); end
  def test_results_q149; assert_in_epsilon(109.5373701619457, worksheet.results_q149, 0.002); end
  def test_results_r149; assert_in_epsilon(112.79106939530735, worksheet.results_r149, 0.002); end
  def test_results_s149; assert_in_epsilon(116.09492604327296, worksheet.results_s149, 0.002); end
  def test_results_t149; assert_in_epsilon(119.40687951009856, worksheet.results_t149, 0.002); end
  def test_results_u149; assert_in_epsilon(122.73194019939751, worksheet.results_u149, 0.002); end
  def test_results_v149; assert_in_epsilon(125.88725970196136, worksheet.results_v149, 0.002); end
  def test_results_w149; assert_in_epsilon(129.0600786297309, worksheet.results_w149, 0.002); end
  def test_results_e150; assert_equal("Electricity - Gas Unabated Peaking plant (OCGT)", worksheet.results_e150.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f150; assert_in_epsilon(2.8963573814688535, worksheet.results_f150, 0.002); end
  def test_results_g150; assert_in_epsilon(5.890387827541659, worksheet.results_g150, 0.002); end
  def test_results_h150; assert_in_epsilon(6.4837580603037095, worksheet.results_h150, 0.002); end
  def test_results_i150; assert_in_epsilon(8.871111049435404, worksheet.results_i150, 0.002); end
  def test_results_j150; assert_in_epsilon(8.799879945865964, worksheet.results_j150, 0.002); end
  def test_results_k150; assert_in_epsilon(8.517578920996296, worksheet.results_k150, 0.002); end
  def test_results_l150; assert_in_epsilon(7.450460407740003, worksheet.results_l150, 0.002); end
  def test_results_m150; assert_in_epsilon(5.473216944659102, worksheet.results_m150, 0.002); end
  def test_results_n150; assert_in_epsilon(7.330414759085669, worksheet.results_n150, 0.002); end
  def test_results_o150; assert_in_epsilon(7.729248130111249, worksheet.results_o150, 0.002); end
  def test_results_p150; assert_in_epsilon(7.815491420693785, worksheet.results_p150, 0.002); end
  def test_results_q150; assert_in_epsilon(7.978746149170363, worksheet.results_q150, 0.002); end
  def test_results_r150; assert_in_epsilon(8.091674341441795, worksheet.results_r150, 0.002); end
  def test_results_s150; assert_in_epsilon(8.208466969744336, worksheet.results_s150, 0.002); end
  def test_results_t150; assert_in_epsilon(8.30536573275721, worksheet.results_t150, 0.002); end
  def test_results_u150; assert_in_epsilon(8.402260799546932, worksheet.results_u150, 0.002); end
  def test_results_v150; assert_in_epsilon(8.501744581679601, worksheet.results_v150, 0.002); end
  def test_results_w150; assert_in_epsilon(8.684835706063991, worksheet.results_w150, 0.002); end
  def test_results_e151; assert_equal("Electricity - Interconnectors ", worksheet.results_e151.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f151; assert_in_delta(0.0, (worksheet.results_f151||0), 0.002); end
  def test_results_g151; assert_in_delta(0.0, (worksheet.results_g151||0), 0.002); end
  def test_results_h151; assert_in_delta(0.0, (worksheet.results_h151||0), 0.002); end
  def test_results_i151; assert_in_delta(0.0, (worksheet.results_i151||0), 0.002); end
  def test_results_j151; assert_in_delta(0.0, (worksheet.results_j151||0), 0.002); end
  def test_results_k151; assert_in_delta(0.0, (worksheet.results_k151||0), 0.002); end
  def test_results_l151; assert_in_delta(0.0, (worksheet.results_l151||0), 0.002); end
  def test_results_m151; assert_in_delta(0.0, (worksheet.results_m151||0), 0.002); end
  def test_results_n151; assert_in_delta(0.0, (worksheet.results_n151||0), 0.002); end
  def test_results_o151; assert_in_delta(0.0, (worksheet.results_o151||0), 0.002); end
  def test_results_p151; assert_in_delta(0.0, (worksheet.results_p151||0), 0.002); end
  def test_results_q151; assert_in_delta(0.0, (worksheet.results_q151||0), 0.002); end
  def test_results_r151; assert_in_delta(0.0, (worksheet.results_r151||0), 0.002); end
  def test_results_s151; assert_in_delta(0.0, (worksheet.results_s151||0), 0.002); end
  def test_results_t151; assert_in_delta(0.0, (worksheet.results_t151||0), 0.002); end
  def test_results_u151; assert_in_delta(0.0, (worksheet.results_u151||0), 0.002); end
  def test_results_v151; assert_in_delta(0.0, (worksheet.results_v151||0), 0.002); end
  def test_results_w151; assert_in_delta(0.0, (worksheet.results_w151||0), 0.002); end
  def test_results_e152; assert_equal("Electricity - Seasonal Storage ", worksheet.results_e152.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f152; assert_in_delta(0.0, (worksheet.results_f152||0), 0.002); end
  def test_results_g152; assert_in_delta(0.0, (worksheet.results_g152||0), 0.002); end
  def test_results_h152; assert_in_delta(0.0, (worksheet.results_h152||0), 0.002); end
  def test_results_i152; assert_in_delta(0.0, (worksheet.results_i152||0), 0.002); end
  def test_results_j152; assert_in_delta(0.0, (worksheet.results_j152||0), 0.002); end
  def test_results_k152; assert_in_delta(0.0, (worksheet.results_k152||0), 0.002); end
  def test_results_l152; assert_in_delta(0.0, (worksheet.results_l152||0), 0.002); end
  def test_results_m152; assert_in_delta(0.0, (worksheet.results_m152||0), 0.002); end
  def test_results_n152; assert_in_delta(0.0, (worksheet.results_n152||0), 0.002); end
  def test_results_o152; assert_in_delta(0.0, (worksheet.results_o152||0), 0.002); end
  def test_results_p152; assert_in_delta(0.0, (worksheet.results_p152||0), 0.002); end
  def test_results_q152; assert_in_delta(0.0, (worksheet.results_q152||0), 0.002); end
  def test_results_r152; assert_in_delta(0.0, (worksheet.results_r152||0), 0.002); end
  def test_results_s152; assert_in_delta(0.0, (worksheet.results_s152||0), 0.002); end
  def test_results_t152; assert_in_delta(0.0, (worksheet.results_t152||0), 0.002); end
  def test_results_u152; assert_in_delta(0.0, (worksheet.results_u152||0), 0.002); end
  def test_results_v152; assert_in_delta(0.0, (worksheet.results_v152||0), 0.002); end
  def test_results_w152; assert_in_delta(0.0, (worksheet.results_w152||0), 0.002); end
  def test_results_e153; assert_equal("Electricity - Demand Shift Vehicle to Grid ", worksheet.results_e153.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f153; assert_in_delta(0.0, (worksheet.results_f153||0), 0.002); end
  def test_results_g153; assert_in_delta(0.0, (worksheet.results_g153||0), 0.002); end
  def test_results_h153; assert_in_delta(0.0, (worksheet.results_h153||0), 0.002); end
  def test_results_i153; assert_in_delta(0.0, (worksheet.results_i153||0), 0.002); end
  def test_results_j153; assert_in_delta(0.0, (worksheet.results_j153||0), 0.002); end
  def test_results_k153; assert_in_delta(0.0, (worksheet.results_k153||0), 0.002); end
  def test_results_l153; assert_in_delta(0.0, (worksheet.results_l153||0), 0.002); end
  def test_results_m153; assert_in_delta(0.0, (worksheet.results_m153||0), 0.002); end
  def test_results_n153; assert_in_delta(0.0, (worksheet.results_n153||0), 0.002); end
  def test_results_o153; assert_in_delta(0.0, (worksheet.results_o153||0), 0.002); end
  def test_results_p153; assert_in_delta(0.0, (worksheet.results_p153||0), 0.002); end
  def test_results_q153; assert_in_delta(0.0, (worksheet.results_q153||0), 0.002); end
  def test_results_r153; assert_in_delta(0.0, (worksheet.results_r153||0), 0.002); end
  def test_results_s153; assert_in_delta(0.0, (worksheet.results_s153||0), 0.002); end
  def test_results_t153; assert_in_delta(0.0, (worksheet.results_t153||0), 0.002); end
  def test_results_u153; assert_in_delta(0.0, (worksheet.results_u153||0), 0.002); end
  def test_results_v153; assert_in_delta(0.0, (worksheet.results_v153||0), 0.002); end
  def test_results_w153; assert_in_delta(0.0, (worksheet.results_w153||0), 0.002); end
  def test_results_e154; assert_equal("Electricity - Demand Shift Battery ", worksheet.results_e154.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f154; assert_in_delta(0.0, (worksheet.results_f154||0), 0.002); end
  def test_results_g154; assert_in_delta(0.0, (worksheet.results_g154||0), 0.002); end
  def test_results_h154; assert_in_delta(0.0, (worksheet.results_h154||0), 0.002); end
  def test_results_i154; assert_in_delta(0.0, (worksheet.results_i154||0), 0.002); end
  def test_results_j154; assert_in_delta(0.0, (worksheet.results_j154||0), 0.002); end
  def test_results_k154; assert_in_delta(0.0, (worksheet.results_k154||0), 0.002); end
  def test_results_l154; assert_in_delta(0.0, (worksheet.results_l154||0), 0.002); end
  def test_results_m154; assert_in_delta(0.0, (worksheet.results_m154||0), 0.002); end
  def test_results_n154; assert_in_delta(0.0, (worksheet.results_n154||0), 0.002); end
  def test_results_o154; assert_in_delta(0.0, (worksheet.results_o154||0), 0.002); end
  def test_results_p154; assert_in_delta(0.0, (worksheet.results_p154||0), 0.002); end
  def test_results_q154; assert_in_delta(0.0, (worksheet.results_q154||0), 0.002); end
  def test_results_r154; assert_in_delta(0.0, (worksheet.results_r154||0), 0.002); end
  def test_results_s154; assert_in_delta(0.0, (worksheet.results_s154||0), 0.002); end
  def test_results_t154; assert_in_delta(0.0, (worksheet.results_t154||0), 0.002); end
  def test_results_u154; assert_in_delta(0.0, (worksheet.results_u154||0), 0.002); end
  def test_results_v154; assert_in_delta(0.0, (worksheet.results_v154||0), 0.002); end
  def test_results_w154; assert_in_delta(0.0, (worksheet.results_w154||0), 0.002); end
  def test_results_e155; assert_equal("Electricity - Distribution ", worksheet.results_e155.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f155; assert_in_delta(0.0, (worksheet.results_f155||0), 0.002); end
  def test_results_g155; assert_in_delta(0.0, (worksheet.results_g155||0), 0.002); end
  def test_results_h155; assert_in_delta(0.0, (worksheet.results_h155||0), 0.002); end
  def test_results_i155; assert_in_delta(0.0, (worksheet.results_i155||0), 0.002); end
  def test_results_j155; assert_in_delta(0.0, (worksheet.results_j155||0), 0.002); end
  def test_results_k155; assert_in_delta(0.0, (worksheet.results_k155||0), 0.002); end
  def test_results_l155; assert_in_delta(0.0, (worksheet.results_l155||0), 0.002); end
  def test_results_m155; assert_in_delta(0.0, (worksheet.results_m155||0), 0.002); end
  def test_results_n155; assert_in_delta(0.0, (worksheet.results_n155||0), 0.002); end
  def test_results_o155; assert_in_delta(0.0, (worksheet.results_o155||0), 0.002); end
  def test_results_p155; assert_in_delta(0.0, (worksheet.results_p155||0), 0.002); end
  def test_results_q155; assert_in_delta(0.0, (worksheet.results_q155||0), 0.002); end
  def test_results_r155; assert_in_delta(0.0, (worksheet.results_r155||0), 0.002); end
  def test_results_s155; assert_in_delta(0.0, (worksheet.results_s155||0), 0.002); end
  def test_results_t155; assert_in_delta(0.0, (worksheet.results_t155||0), 0.002); end
  def test_results_u155; assert_in_delta(0.0, (worksheet.results_u155||0), 0.002); end
  def test_results_v155; assert_in_delta(0.0, (worksheet.results_v155||0), 0.002); end
  def test_results_w155; assert_in_delta(0.0, (worksheet.results_w155||0), 0.002); end
  def test_results_e156; assert_equal("Electricity - Transmission ", worksheet.results_e156.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f156; assert_in_delta(0.0, (worksheet.results_f156||0), 0.002); end
  def test_results_g156; assert_in_delta(0.0, (worksheet.results_g156||0), 0.002); end
  def test_results_h156; assert_in_delta(0.0, (worksheet.results_h156||0), 0.002); end
  def test_results_i156; assert_in_delta(0.0, (worksheet.results_i156||0), 0.002); end
  def test_results_j156; assert_in_delta(0.0, (worksheet.results_j156||0), 0.002); end
  def test_results_k156; assert_in_delta(0.0, (worksheet.results_k156||0), 0.002); end
  def test_results_l156; assert_in_delta(0.0, (worksheet.results_l156||0), 0.002); end
  def test_results_m156; assert_in_delta(0.0, (worksheet.results_m156||0), 0.002); end
  def test_results_n156; assert_in_delta(0.0, (worksheet.results_n156||0), 0.002); end
  def test_results_o156; assert_in_delta(0.0, (worksheet.results_o156||0), 0.002); end
  def test_results_p156; assert_in_delta(0.0, (worksheet.results_p156||0), 0.002); end
  def test_results_q156; assert_in_delta(0.0, (worksheet.results_q156||0), 0.002); end
  def test_results_r156; assert_in_delta(0.0, (worksheet.results_r156||0), 0.002); end
  def test_results_s156; assert_in_delta(0.0, (worksheet.results_s156||0), 0.002); end
  def test_results_t156; assert_in_delta(0.0, (worksheet.results_t156||0), 0.002); end
  def test_results_u156; assert_in_delta(0.0, (worksheet.results_u156||0), 0.002); end
  def test_results_v156; assert_in_delta(0.0, (worksheet.results_v156||0), 0.002); end
  def test_results_w156; assert_in_delta(0.0, (worksheet.results_w156||0), 0.002); end
  def test_results_e157; assert_equal("Industry Ferrous and non-ferrous metal production ", worksheet.results_e157.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f157; assert_in_epsilon(7.322434342226452, worksheet.results_f157, 0.002); end
  def test_results_g157; assert_in_epsilon(7.263176538198852, worksheet.results_g157, 0.002); end
  def test_results_h157; assert_in_epsilon(6.868965688850404, worksheet.results_h157, 0.002); end
  def test_results_i157; assert_in_epsilon(6.492488936597583, worksheet.results_i157, 0.002); end
  def test_results_j157; assert_in_epsilon(5.990609180914439, worksheet.results_j157, 0.002); end
  def test_results_k157; assert_in_epsilon(5.5198312368880575, worksheet.results_k157, 0.002); end
  def test_results_l157; assert_in_epsilon(5.0783823027555375, worksheet.results_l157, 0.002); end
  def test_results_m157; assert_in_epsilon(4.622980869101785, worksheet.results_m157, 0.002); end
  def test_results_n157; assert_in_epsilon(4.503052721088645, worksheet.results_n157, 0.002); end
  def test_results_o157; assert_in_epsilon(4.383170435745344, worksheet.results_o157, 0.002); end
  def test_results_p157; assert_in_epsilon(4.383013648293453, worksheet.results_p157, 0.002); end
  def test_results_q157; assert_in_epsilon(4.383013648293453, worksheet.results_q157, 0.002); end
  def test_results_r157; assert_in_epsilon(4.383013648293453, worksheet.results_r157, 0.002); end
  def test_results_s157; assert_in_epsilon(4.383013648293453, worksheet.results_s157, 0.002); end
  def test_results_t157; assert_in_epsilon(4.383013648293453, worksheet.results_t157, 0.002); end
  def test_results_u157; assert_in_epsilon(4.383013648293453, worksheet.results_u157, 0.002); end
  def test_results_v157; assert_in_epsilon(4.383013648293453, worksheet.results_v157, 0.002); end
  def test_results_w157; assert_in_epsilon(4.383013648293453, worksheet.results_w157, 0.002); end
  def test_results_e158; assert_equal("Industry Other Industry", worksheet.results_e158.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f158; assert_in_epsilon(67.82434342226452, worksheet.results_f158, 0.002); end
  def test_results_g158; assert_in_epsilon(67.1237653819885, worksheet.results_g158, 0.002); end
  def test_results_h158; assert_in_epsilon(63.41115688850402, worksheet.results_h158, 0.002); end
  def test_results_i158; assert_in_epsilon(59.87588936597586, worksheet.results_i158, 0.002); end
  def test_results_j158; assert_in_epsilon(55.0865918091444, worksheet.results_j158, 0.002); end
  def test_results_k158; assert_in_epsilon(50.60831236888058, worksheet.results_k158, 0.002); end
  def test_results_l158; assert_in_epsilon(46.42332302755537, worksheet.results_l158, 0.002); end
  def test_results_m158; assert_in_epsilon(42.09880869101785, worksheet.results_m158, 0.002); end
  def test_results_n158; assert_in_epsilon(40.899527210886454, worksheet.results_n158, 0.002); end
  def test_results_o158; assert_in_epsilon(39.70070435745344, worksheet.results_o158, 0.002); end
  def test_results_p158; assert_in_epsilon(39.699136482934534, worksheet.results_p158, 0.002); end
  def test_results_q158; assert_in_epsilon(39.699136482934534, worksheet.results_q158, 0.002); end
  def test_results_r158; assert_in_epsilon(39.699136482934534, worksheet.results_r158, 0.002); end
  def test_results_s158; assert_in_epsilon(39.699136482934534, worksheet.results_s158, 0.002); end
  def test_results_t158; assert_in_epsilon(39.699136482934534, worksheet.results_t158, 0.002); end
  def test_results_u158; assert_in_epsilon(39.699136482934534, worksheet.results_u158, 0.002); end
  def test_results_v158; assert_in_epsilon(39.699136482934534, worksheet.results_v158, 0.002); end
  def test_results_w158; assert_in_epsilon(39.699136482934534, worksheet.results_w158, 0.002); end
  def test_results_e159; assert_equal("Industry Cement, ceramics and glass", worksheet.results_e159.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f159; assert_in_epsilon(14.561979018470323, worksheet.results_f159, 0.002); end
  def test_results_g159; assert_in_epsilon(14.425982040874539, worksheet.results_g159, 0.002); end
  def test_results_h159; assert_in_epsilon(13.634697969150835, worksheet.results_h159, 0.002); end
  def test_results_i159; assert_in_epsilon(12.880246252933444, worksheet.results_i159, 0.002); end
  def test_results_j159; assert_in_epsilon(11.865342144976145, worksheet.results_j159, 0.002); end
  def test_results_k159; assert_in_epsilon(10.915034107382889, worksheet.results_k159, 0.002); end
  def test_results_l159; assert_in_epsilon(10.0256401672615, worksheet.results_l159, 0.002); end
  def test_results_m159; assert_in_epsilon(9.107267958903707, worksheet.results_m159, 0.002); end
  def test_results_n159; assert_in_epsilon(8.85818642072257, worksheet.results_n159, 0.002); end
  def test_results_o159; assert_in_epsilon(8.60920013577879, worksheet.results_o159, 0.002); end
  def test_results_p159; assert_in_epsilon(8.608874500301788, worksheet.results_p159, 0.002); end
  def test_results_q159; assert_in_epsilon(8.608874500301788, worksheet.results_q159, 0.002); end
  def test_results_r159; assert_in_epsilon(8.608874500301788, worksheet.results_r159, 0.002); end
  def test_results_s159; assert_in_epsilon(8.608874500301788, worksheet.results_s159, 0.002); end
  def test_results_t159; assert_in_epsilon(8.608874500301788, worksheet.results_t159, 0.002); end
  def test_results_u159; assert_in_epsilon(8.608874500301788, worksheet.results_u159, 0.002); end
  def test_results_v159; assert_in_epsilon(8.608874500301788, worksheet.results_v159, 0.002); end
  def test_results_w159; assert_in_epsilon(8.608874500301788, worksheet.results_w159, 0.002); end
  def test_results_e160; assert_equal("Industry Refineries", worksheet.results_e160.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f160; assert_in_epsilon(23.869965030783874, worksheet.results_f160, 0.002); end
  def test_results_g160; assert_in_epsilon(22.432535841594323, worksheet.results_g160, 0.002); end
  def test_results_h160; assert_in_epsilon(17.15047442974452, worksheet.results_h160, 0.002); end
  def test_results_i160; assert_in_epsilon(12.966313116134401, worksheet.results_i160, 0.002); end
  def test_results_j160; assert_in_epsilon(9.388481413971485, worksheet.results_j160, 0.002); end
  def test_results_k160; assert_in_epsilon(7.921143684499443, worksheet.results_k160, 0.002); end
  def test_results_l160; assert_in_epsilon(7.015092599996487, worksheet.results_l160, 0.002); end
  def test_results_m160; assert_in_epsilon(6.027369159418858, worksheet.results_m160, 0.002); end
  def test_results_n160; assert_in_epsilon(5.928092240502379, worksheet.results_n160, 0.002); end
  def test_results_o160; assert_in_epsilon(5.82130293615036, worksheet.results_o160, 0.002); end
  def test_results_p160; assert_in_epsilon(5.887511350664208, worksheet.results_p160, 0.002); end
  def test_results_q160; assert_in_epsilon(5.957108905715392, worksheet.results_q160, 0.002); end
  def test_results_r160; assert_in_epsilon(6.031275913835689, worksheet.results_r160, 0.002); end
  def test_results_s160; assert_in_epsilon(6.107635127928271, worksheet.results_s160, 0.002); end
  def test_results_t160; assert_in_epsilon(6.184009256803236, worksheet.results_t160, 0.002); end
  def test_results_u160; assert_in_epsilon(6.2603862186988195, worksheet.results_u160, 0.002); end
  def test_results_v160; assert_in_epsilon(6.337987596145276, worksheet.results_v160, 0.002); end
  def test_results_w160; assert_in_epsilon(6.4172222490489155, worksheet.results_w160, 0.002); end
  def test_results_e161; assert_equal("Industry Chemicals", worksheet.results_e161.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f161; assert_in_epsilon(12.493537682400646, worksheet.results_f161, 0.002); end
  def test_results_g161; assert_in_epsilon(12.379466182967198, worksheet.results_g161, 0.002); end
  def test_results_h161; assert_in_epsilon(11.701631603350712, worksheet.results_h161, 0.002); end
  def test_results_i161; assert_in_epsilon(11.055172733980344, worksheet.results_i161, 0.002); end
  def test_results_j161; assert_in_epsilon(10.186847012387089, worksheet.results_j161, 0.002); end
  def test_results_k161; assert_in_epsilon(9.373547572955795, worksheet.results_k161, 0.002); end
  def test_results_l161; assert_in_epsilon(8.6121379202598, worksheet.results_l161, 0.002); end
  def test_results_m161; assert_in_epsilon(7.826043076103158, worksheet.results_m161, 0.002); end
  def test_results_n161; assert_in_epsilon(7.61386250654145, worksheet.results_n161, 0.002); end
  def test_results_o161; assert_in_epsilon(7.401763078626377, worksheet.results_o161, 0.002); end
  def test_results_p161; assert_in_epsilon(7.401485685442263, worksheet.results_p161, 0.002); end
  def test_results_q161; assert_in_epsilon(7.401485685442263, worksheet.results_q161, 0.002); end
  def test_results_r161; assert_in_epsilon(7.401485685442263, worksheet.results_r161, 0.002); end
  def test_results_s161; assert_in_epsilon(7.401485685442263, worksheet.results_s161, 0.002); end
  def test_results_t161; assert_in_epsilon(7.401485685442263, worksheet.results_t161, 0.002); end
  def test_results_u161; assert_in_epsilon(7.401485685442263, worksheet.results_u161, 0.002); end
  def test_results_v161; assert_in_epsilon(7.401485685442263, worksheet.results_v161, 0.002); end
  def test_results_w161; assert_in_epsilon(7.401485685442263, worksheet.results_w161, 0.002); end
  def test_results_e644; assert_equal("Hydrogen", worksheet.results_e644.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f644; assert_in_delta(0.0, (worksheet.results_f644||0), 0.002); end
  def test_results_g644; assert_in_delta(0.0, (worksheet.results_g644||0), 0.002); end
  def test_results_h644; assert_in_delta(0.08333333333333333, worksheet.results_h644, 0.002); end
  def test_results_i644; assert_in_delta(0.16666666666666666, worksheet.results_i644, 0.002); end
  def test_results_j644; assert_in_delta(0.25, worksheet.results_j644, 0.002); end
  def test_results_k644; assert_in_delta(0.3333333333333333, worksheet.results_k644, 0.002); end
  def test_results_l644; assert_in_delta(0.4166666666666667, worksheet.results_l644, 0.002); end
  def test_results_m644; assert_in_delta(0.5, worksheet.results_m644, 0.002); end
  def test_results_n644; assert_in_delta(0.5, worksheet.results_n644, 0.002); end
  def test_results_o644; assert_in_delta(0.5, worksheet.results_o644, 0.002); end
  def test_results_p644; assert_in_delta(0.5, worksheet.results_p644, 0.002); end
  def test_results_q644; assert_in_delta(0.5, worksheet.results_q644, 0.002); end
  def test_results_r644; assert_in_delta(0.5, worksheet.results_r644, 0.002); end
  def test_results_s644; assert_in_delta(0.5, worksheet.results_s644, 0.002); end
  def test_results_t644; assert_in_delta(0.5, worksheet.results_t644, 0.002); end
  def test_results_u644; assert_in_delta(0.5, worksheet.results_u644, 0.002); end
  def test_results_v644; assert_in_delta(0.5, worksheet.results_v644, 0.002); end
  def test_results_w644; assert_in_delta(0.5, worksheet.results_w644, 0.002); end
  def test_results_e645; assert_equal("Electric", worksheet.results_e645.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f645; assert_in_delta(0.01, worksheet.results_f645, 0.002); end
  def test_results_g645; assert_in_delta(0.01, worksheet.results_g645, 0.002); end
  def test_results_h645; assert_in_delta(0.1325, worksheet.results_h645, 0.002); end
  def test_results_i645; assert_in_delta(0.255, worksheet.results_i645, 0.002); end
  def test_results_j645; assert_in_delta(0.3775, worksheet.results_j645, 0.002); end
  def test_results_k645; assert_in_delta(0.5, worksheet.results_k645, 0.002); end
  def test_results_l645; assert_in_delta(0.5, worksheet.results_l645, 0.002); end
  def test_results_m645; assert_in_delta(0.5, worksheet.results_m645, 0.002); end
  def test_results_n645; assert_in_delta(0.5, worksheet.results_n645, 0.002); end
  def test_results_o645; assert_in_delta(0.5, worksheet.results_o645, 0.002); end
  def test_results_p645; assert_in_delta(0.5, worksheet.results_p645, 0.002); end
  def test_results_q645; assert_in_delta(0.5, worksheet.results_q645, 0.002); end
  def test_results_r645; assert_in_delta(0.5, worksheet.results_r645, 0.002); end
  def test_results_s645; assert_in_delta(0.5, worksheet.results_s645, 0.002); end
  def test_results_t645; assert_in_delta(0.5, worksheet.results_t645, 0.002); end
  def test_results_u645; assert_in_delta(0.5, worksheet.results_u645, 0.002); end
  def test_results_v645; assert_in_delta(0.5, worksheet.results_v645, 0.002); end
  def test_results_w645; assert_in_delta(0.5, worksheet.results_w645, 0.002); end
  def test_results_e646; assert_equal("Plug-in Hybrid Electric", worksheet.results_e646.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f646; assert_in_delta(0.02, worksheet.results_f646, 0.002); end
  def test_results_g646; assert_in_delta(0.02, worksheet.results_g646, 0.002); end
  def test_results_h646; assert_in_delta(0.15, worksheet.results_h646, 0.002); end
  def test_results_i646; assert_in_delta(0.28, worksheet.results_i646, 0.002); end
  def test_results_j646; assert_in_delta(0.37250000000000005, worksheet.results_j646, 0.002); end
  def test_results_k646; assert_in_delta(0.16666666666666669, worksheet.results_k646, 0.002); end
  def test_results_l646; assert_in_delta(0.08333333333333331, worksheet.results_l646, 0.002); end
  def test_results_m646; assert_in_delta(0.0, (worksheet.results_m646||0), 0.002); end
  def test_results_n646; assert_in_delta(0.0, (worksheet.results_n646||0), 0.002); end
  def test_results_o646; assert_in_delta(0.0, (worksheet.results_o646||0), 0.002); end
  def test_results_p646; assert_in_delta(0.0, (worksheet.results_p646||0), 0.002); end
  def test_results_q646; assert_in_delta(0.0, (worksheet.results_q646||0), 0.002); end
  def test_results_r646; assert_in_delta(0.0, (worksheet.results_r646||0), 0.002); end
  def test_results_s646; assert_in_delta(0.0, (worksheet.results_s646||0), 0.002); end
  def test_results_t646; assert_in_delta(0.0, (worksheet.results_t646||0), 0.002); end
  def test_results_u646; assert_in_delta(0.0, (worksheet.results_u646||0), 0.002); end
  def test_results_v646; assert_in_delta(0.0, (worksheet.results_v646||0), 0.002); end
  def test_results_w646; assert_in_delta(0.0, (worksheet.results_w646||0), 0.002); end
  def test_results_e647; assert_equal("Conventional", worksheet.results_e647.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f647; assert_in_delta(0.97, worksheet.results_f647, 0.002); end
  def test_results_g647; assert_in_delta(0.97, worksheet.results_g647, 0.002); end
  def test_results_h647; assert_in_delta(0.6341666666666665, worksheet.results_h647, 0.002); end
  def test_results_i647; assert_in_delta(0.29833333333333334, worksheet.results_i647, 0.002); end
  def test_results_j647; assert_in_delta(0.0, (worksheet.results_j647||0), 0.002); end
  def test_results_k647; assert_in_delta(0.0, (worksheet.results_k647||0), 0.002); end
  def test_results_l647; assert_in_delta(0.0, (worksheet.results_l647||0), 0.002); end
  def test_results_m647; assert_in_delta(0.0, (worksheet.results_m647||0), 0.002); end
  def test_results_n647; assert_in_delta(0.0, (worksheet.results_n647||0), 0.002); end
  def test_results_o647; assert_in_delta(0.0, (worksheet.results_o647||0), 0.002); end
  def test_results_p647; assert_in_delta(0.0, (worksheet.results_p647||0), 0.002); end
  def test_results_q647; assert_in_delta(0.0, (worksheet.results_q647||0), 0.002); end
  def test_results_r647; assert_in_delta(0.0, (worksheet.results_r647||0), 0.002); end
  def test_results_s647; assert_in_delta(0.0, (worksheet.results_s647||0), 0.002); end
  def test_results_t647; assert_in_delta(0.0, (worksheet.results_t647||0), 0.002); end
  def test_results_u647; assert_in_delta(0.0, (worksheet.results_u647||0), 0.002); end
  def test_results_v647; assert_in_delta(0.0, (worksheet.results_v647||0), 0.002); end
  def test_results_w647; assert_in_delta(0.0, (worksheet.results_w647||0), 0.002); end
  def test_results_e689; assert_equal("Electricity ", worksheet.results_e689.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f689; assert_in_epsilon(8.172120758330962, worksheet.results_f689, 0.002); end
  def test_results_g689; assert_in_epsilon(8.26148824841383, worksheet.results_g689, 0.002); end
  def test_results_h689; assert_in_epsilon(28.4618926506027, worksheet.results_h689, 0.002); end
  def test_results_i689; assert_in_epsilon(49.01760049941427, worksheet.results_i689, 0.002); end
  def test_results_j689; assert_in_epsilon(68.67079785727623, worksheet.results_j689, 0.002); end
  def test_results_k689; assert_in_epsilon(71.70297758222762, worksheet.results_k689, 0.002); end
  def test_results_l689; assert_in_epsilon(69.4436907757069, worksheet.results_l689, 0.002); end
  def test_results_m689; assert_in_epsilon(67.03608196686832, worksheet.results_m689, 0.002); end
  def test_results_n689; assert_in_epsilon(67.84600265545374, worksheet.results_n689, 0.002); end
  def test_results_o689; assert_in_epsilon(68.6132751819221, worksheet.results_o689, 0.002); end
  def test_results_p689; assert_in_epsilon(69.3809916311615, worksheet.results_p689, 0.002); end
  def test_results_q689; assert_in_epsilon(70.19361733869633, worksheet.results_q689, 0.002); end
  def test_results_r689; assert_in_epsilon(71.05929522263642, worksheet.results_r689, 0.002); end
  def test_results_s689; assert_in_epsilon(71.9503838155992, worksheet.results_s689, 0.002); end
  def test_results_t689; assert_in_epsilon(72.84156713685203, worksheet.results_t689, 0.002); end
  def test_results_u689; assert_in_epsilon(73.7327021652511, worksheet.results_u689, 0.002); end
  def test_results_v689; assert_in_epsilon(74.63798823807839, worksheet.results_v689, 0.002); end
  def test_results_w689; assert_in_epsilon(75.56217601003712, worksheet.results_w689, 0.002); end
  def test_results_e690; assert_equal("Hydrogen Gaseous ", worksheet.results_e690.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f690; assert_in_delta(0.0, (worksheet.results_f690||0), 0.002); end
  def test_results_g690; assert_in_delta(0.0, (worksheet.results_g690||0), 0.002); end
  def test_results_h690; assert_in_epsilon(24.08324844803424, worksheet.results_h690, 0.002); end
  def test_results_i690; assert_in_epsilon(45.658515772190164, worksheet.results_i690, 0.002); end
  def test_results_j690; assert_in_epsilon(68.13111261201458, worksheet.results_j690, 0.002); end
  def test_results_k690; assert_in_epsilon(89.65505217421071, worksheet.results_k690, 0.002); end
  def test_results_l690; assert_in_epsilon(111.16297007163408, worksheet.results_l690, 0.002); end
  def test_results_m690; assert_in_epsilon(132.2739607700418, worksheet.results_m690, 0.002); end
  def test_results_n690; assert_in_epsilon(133.6744384853355, worksheet.results_n690, 0.002); end
  def test_results_o690; assert_in_epsilon(135.00117095435385, worksheet.results_o690, 0.002); end
  def test_results_p690; assert_in_epsilon(136.32867103427157, worksheet.results_p690, 0.002); end
  def test_results_q690; assert_in_epsilon(137.73382614429218, worksheet.results_q690, 0.002); end
  def test_results_r690; assert_in_epsilon(139.23071664501288, worksheet.results_r690, 0.002); end
  def test_results_s690; assert_in_epsilon(140.77154617855194, worksheet.results_s690, 0.002); end
  def test_results_t690; assert_in_epsilon(142.31253951190638, worksheet.results_t690, 0.002); end
  def test_results_u690; assert_in_epsilon(143.8534493394726, worksheet.results_u690, 0.002); end
  def test_results_v690; assert_in_epsilon(145.41882850415925, worksheet.results_v690, 0.002); end
  def test_results_w690; assert_in_epsilon(147.01689162023507, worksheet.results_w690, 0.002); end
  def test_results_e691; assert_equal("Fossil Fuel Liquid ", worksheet.results_e691.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f691; assert_in_epsilon(670.9290481724032, worksheet.results_f691, 0.002); end
  def test_results_g691; assert_in_epsilon(642.9536578705774, worksheet.results_g691, 0.002); end
  def test_results_h691; assert_in_epsilon(520.7208599508731, worksheet.results_h691, 0.002); end
  def test_results_i691; assert_in_epsilon(407.17885135616507, worksheet.results_i691, 0.002); end
  def test_results_j691; assert_in_epsilon(311.2882526100534, worksheet.results_j691, 0.002); end
  def test_results_k691; assert_in_epsilon(285.0254524634644, worksheet.results_k691, 0.002); end
  def test_results_l691; assert_in_epsilon(276.895713072283, worksheet.results_l691, 0.002); end
  def test_results_m691; assert_in_epsilon(263.20710912253276, worksheet.results_m691, 0.002); end
  def test_results_n691; assert_in_epsilon(266.99733790860085, worksheet.results_n691, 0.002); end
  def test_results_o691; assert_in_epsilon(270.5879838293252, worksheet.results_o691, 0.002); end
  def test_results_p691; assert_in_epsilon(274.18070719897673, worksheet.results_p691, 0.002); end
  def test_results_q691; assert_in_epsilon(277.9835948056346, worksheet.results_q691, 0.002); end
  def test_results_r691; assert_in_epsilon(282.0347534948921, worksheet.results_r691, 0.002); end
  def test_results_s691; assert_in_epsilon(286.20482802636656, worksheet.results_s691, 0.002); end
  def test_results_t691; assert_in_epsilon(290.3753458628422, worksheet.results_t691, 0.002); end
  def test_results_u691; assert_in_epsilon(294.5456377006899, worksheet.results_u691, 0.002); end
  def test_results_v691; assert_in_epsilon(298.78215293139635, worksheet.results_v691, 0.002); end
  def test_results_w691; assert_in_epsilon(303.1071234456428, worksheet.results_w691, 0.002); end
  def test_results_e692; assert_equal("Bioenergy Liquid ", worksheet.results_e692.to_s.gsub(/[\n\r]+/,'')); end
  def test_results_f692; assert_in_epsilon(1.5728227961365546, worksheet.results_f692, 0.002); end
  def test_results_g692; assert_in_epsilon(1.7334930761295322, worksheet.results_g692, 0.002); end
  def test_results_h692; assert_in_epsilon(5.929483925229272, worksheet.results_h692, 0.002); end
  def test_results_i692; assert_in_epsilon(8.21875072952473, worksheet.results_i692, 0.002); end
  def test_results_j692; assert_in_epsilon(9.01570383496548, worksheet.results_j692, 0.002); end
  def test_results_k692; assert_in_epsilon(10.561856595832731, worksheet.results_k692, 0.002); end
  def test_results_l692; assert_in_epsilon(12.433910463190706, worksheet.results_l692, 0.002); end
  def test_results_m692; assert_in_epsilon(13.853005743291199, worksheet.results_m692, 0.002); end
  def test_results_n692; assert_in_epsilon(14.052491468873729, worksheet.results_n692, 0.002); end
  def test_results_o692; assert_in_epsilon(14.24147283312238, worksheet.results_o692, 0.002); end
  def test_results_p692; assert_in_epsilon(14.430563536788252, worksheet.results_p692, 0.002); end
  def test_results_q692; assert_in_epsilon(14.630715516086033, worksheet.results_q692, 0.002); end
  def test_results_r692; assert_in_epsilon(14.843934394468006, worksheet.results_r692, 0.002); end
  def test_results_s692; assert_in_epsilon(15.063412001387716, worksheet.results_s692, 0.002); end
  def test_results_t692; assert_in_epsilon(15.282912940149595, worksheet.results_t692, 0.002); end
  def test_results_u692; assert_in_epsilon(15.50240198424684, worksheet.results_u692, 0.002); end
  def test_results_v692; assert_in_epsilon(15.725376470073495, worksheet.results_v692, 0.002); end
  def test_results_w692; assert_in_epsilon(15.953006497139096, worksheet.results_w692, 0.002); end
end
